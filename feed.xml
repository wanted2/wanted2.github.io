<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AiFi</title>
    <description>An AI Engineer&apos;s blog (This is a staging site, so the content may be imprecise, refer to official AiFi)</description>
    <link>https://wanted2.github.io/</link>
    <atom:link href="https://wanted2.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 27 Feb 2022 21:32:32 +0900</pubDate>
    <lastBuildDate>Sun, 27 Feb 2022 21:32:32 +0900</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Seq2Seq for Computer Vision: Three SOTAs and 8x GPU server choices</title>
        <description>&lt;p&gt;Trong các bài viết trước, chúng ta đã xem xét kha khá về &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; cho NLP/Vision-Language&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; và âm thanh&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
Trong bài viết này, ta sẽ tập trung vào 2 vấn đề: một vài SOTA của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; trong computer vision và vấn đề giá thành xây dựng tài nguyên cho dự án cần &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;vision-transformers&quot;&gt;Vision Transformers&lt;/h1&gt;

&lt;h2 id=&quot;vit&quot;&gt;ViT&lt;/h2&gt;

&lt;p&gt;Về nguyên lý chung của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; thì chúng ta có hai bài viết trước nói khá nhiều rồi&lt;sup id=&quot;fnref:4:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:5:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; nên các bạn tham khảo nhé.
Nhà cũng đang có cái “eo hẹp” là chỉ được tối đa 7 citations và 9 phút đọc thôi nên các bạn cần thì đọc lại hai bài viết&lt;sup id=&quot;fnref:4:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:5:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; để xem thêm kiến thức về attention, Transformer, …
Vision Transformer (ViT, &lt;a class=&quot;citation&quot; href=&quot;#dosovitskiy2020image&quot;&gt;[1]&lt;/a&gt;) đưa khái niệm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; vào vision.
Nếu các bạn đã quen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; thì hiểu ngay là ta cần chuyển hình ảnh thành 1 chuỗi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/ATsWtUsuuFRfq8OhZ7/source.gif&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Source: Google&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Để làm được việc này, các tác giả đề xuất:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Image patches&lt;/strong&gt;: Hình ảnh được chia ra thành patches và đánh số thự tự để input vào transformer.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Position embedding&lt;/strong&gt;: thứ tự chỉ đơn giản là chuỗi 1D.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MLP với GELU activation&lt;/strong&gt;: MLP sử dụng GELU để kích hoạt. Model không chứa CNN, có tối thiểu 12 tầng, với kích cỡ hidden size từ 768, ngoài ra có 12-16 heads.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Large-scale pre-training and fine-tuning&lt;/strong&gt;: Một điểm đáng chú ý khác là pre-training dạng supervised trên một dataset 300 triệu ảnh tạo ra 1 model rất mạnh.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Các tác giả báo cáo cải tiến trên khá nhiều bộ dữ liệu lớn, và ngoài ra cả con số &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPUv3-core-days = số lượng TPUv3 cores x sô lượng ngày train&lt;/code&gt;.
Cái con số &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TPUv3-core-days&lt;/code&gt; thì cứ mỗi thí nghiệm là vài ngàn tới vài chục ngàn, mà mỗi core thì cứ 10$/ngày thì các bạn cứ nhẩm tính xem budget của hội &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;con nhà giàu&lt;/code&gt; này đầu tư vào nó lớn cỡ nào đấy.&lt;/p&gt;

&lt;h2 id=&quot;detr&quot;&gt;DETR&lt;/h2&gt;

&lt;p&gt;DETR &lt;a class=&quot;citation&quot; href=&quot;#carion2020end&quot;&gt;[2, 3]&lt;/a&gt; tiếp tục ứng dụng transformer vào Object Detection và Segmentation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/detr.png&quot; alt=&quot;detr&quot; /&gt;
&lt;em&gt;Source: &lt;a class=&quot;citation&quot; href=&quot;#carion2020end&quot;&gt;[2]&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Backbone&lt;/strong&gt;: DETR dùng CNN quen thuộc như resnet-50 hoặc 101.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encoder&lt;/strong&gt;: DETR dùng \(1\times 1\) convolution để dimention reduction các feature maps rồi input vào. Position embedding là cố định vì transformer là không phụ thuộc vào permutation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decoder&lt;/strong&gt;: thay vì decode từng object query, thì DETR decode song song cùng lúc tất cả các queries.&lt;/li&gt;
  &lt;li&gt;Sau khi decode thì dùng FFN để predict vị trí và class. Để tính hàm loss thì dùng thuật toán Hungarian để matching.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Về mặt giá cả thì DETR tốn 300 epochs để hội tụ trên COCO, nên về sau gần đây có khá nhiều nghiên cứu để giảm giá thành hộ tụ (chỉ cần 50 epochs thôi chả hạn).&lt;/p&gt;

&lt;h2 id=&quot;yolox&quot;&gt;YOLOX&lt;/h2&gt;

&lt;p&gt;So với phiên bản cũ &lt;a class=&quot;citation&quot; href=&quot;#redmon2018yolov3&quot;&gt;[4]&lt;/a&gt; thì YOLOX &lt;a class=&quot;citation&quot; href=&quot;#ge2021yolox&quot;&gt;[5]&lt;/a&gt; ứng dụng khá nhiều kỹ thuật mới như decoupled heads, strong augmentation (Moáic và Mixup), anchor-free, pulti-positives, và SimOTA.
Backbone thì ngoài Darknet ra cũng dùng thêm những backbone nhỏ hơn như Tiny.&lt;/p&gt;

&lt;p&gt;Dưới đây là kết quả inference của model YOLOX-Tiny:&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/_5inpa6ruUY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;xây-dựng-tài-nguyên-gpu&quot;&gt;Xây dựng tài nguyên GPU&lt;/h1&gt;

&lt;h2 id=&quot;giá-thành-khi-train-model-state-of-the-art-sota&quot;&gt;Giá thành khi train model State-of-the-art (SOTA)&lt;/h2&gt;

&lt;p&gt;Nhìn chung là nếu chỉ hình ảnh với bộ dữ liệu nhỏ nhỏ như COCO &lt;a class=&quot;citation&quot; href=&quot;#lin2014microsoft&quot;&gt;[6]&lt;/a&gt; tầm trăm ngàn ảnh thì có bảng giá dưới đây: chúng ta lấy ví dụ từ báo cáo của 1 state-of-the-art thì họ dùng 8 cái V100, train tầm 6 ngày liên tục (\(6\times 24\) giờ) thì tổng tiền cho một lượt trên tầm ngàn Mỹ kim cho 6 ngày, 1 tháng cứ tầm 5 ngàn Mỹ kim.
Mà các bạn cũng nhớ giá này là giá &lt;a href=&quot;https://aws.amazon.com/ec2/spot/pricing/&quot;&gt;&lt;strong&gt;Spot&lt;/strong&gt;&lt;/a&gt; tức là có thể bị interrupt giữa chừng nên mới rẻ thế.
Chứ nếu bạn mà chọn &lt;a href=&quot;https://aws.amazon.com/ec2/pricing/on-demand/&quot;&gt;&lt;strong&gt;on-demand&lt;/strong&gt;&lt;/a&gt; thì có mà gấp 10 lần.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/detr-cost-analysis.jpg&quot; alt=&quot;pricing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nhưng ở trên mới chỉ là giá bộ COCO có hơn 100k ảnh nhé.
Bộ Open Images &lt;a class=&quot;citation&quot; href=&quot;#kuznetsova2020open&quot;&gt;[7]&lt;/a&gt; với 1.7 triệu ảnh thì còn máu nữa.
Search trên Kaggle mà có đồng chí chịu khó bỏ tiền ra ngồi train và báo cáo kết quả cho anh biết (xin cám ơn đồng chí): &lt;a href=&quot;https://www.kaggle.com/c/open-images-2019-object-detection/discussion/110953&quot;&gt;Kaggle Open Images 2019 challenge 6th place solution&lt;/a&gt;.
Thì kết quả là đồng chí ấy báo cáo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;train 8 models trên V100 (chắc lại EC2 P3 thôi thì mình cứ dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3.xlarge&lt;/code&gt; để làm phân tích giá nhé) rồi ensemble.&lt;/li&gt;
  &lt;li&gt;mỗi model train mất 18-36 ngày (tùy model). Thì đồng chí này train 8 GPUs khác nhau.&lt;/li&gt;
  &lt;li&gt;sau khi train xong các model thì mất thêm 1 ngày nữa để inference và 1 ngày nữa để ensemble (dùng NMS).&lt;/li&gt;
  &lt;li&gt;Vậy tổng thể đã tiêu tốn \(36\times 8+1\times 8+1=297\) ngày train, tức là \(297\times 24=7128\) giờ train.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/open-images-price.jpg&quot; alt=&quot;pricing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3.xlarge&lt;/code&gt; thì giá mềm nhất là &lt;a href=&quot;https://aws.amazon.com/ec2/spot/pricing/&quot;&gt;&lt;strong&gt;Spot&lt;/strong&gt;&lt;/a&gt; cũng tầm $0.918/h.&lt;/p&gt;

&lt;p&gt;Tức là để train được accuracy tầm 60% đã mất \(7128\times 0.918\) tức là tầm 6543 Mỹ kim và hơn tháng ngồi monitor màn hình train.&lt;/p&gt;

&lt;h2 id=&quot;xây-dựng-hệ-thống-816-gpu&quot;&gt;Xây dựng hệ thống 8~16 GPU&lt;/h2&gt;

&lt;p&gt;Nhìn chung thì theo dòng lịch sử có 3 loại NVIDIA GPU dành cho cloud khá thông dụng như sau (tôi không nói tới hai dòng GTX và RTX nhé):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NVIDIA V100 hay &lt;strong&gt;Volta&lt;/strong&gt;: nói đến dòng này chúng ta có những sự lựa chọn chủ yếu liên quan tới V100 Tensor Core mà đại diện cho thuê là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3.16xlarge&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3dn.24xlarge&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Với băng thông mạng của phiên bản P3.16xlarge cao hơn tới 4 lần, phiên bản P3dn.24xlarge của Amazon EC2 là sự bổ sung mới nhất cho dòng phiên bản P3, được tối ưu hóa cho machine learning phân tán và các ứng dụng HPC. Các phiên bản này cung cấp thông lượng kết nối mạng lên tới 100 Gbps, 96 vCPU Intel® Xeon® Có thể mở rộng (Skylake) tùy chỉnh, 8 GPU NVIDIA® V100 Tensor Core với 32 GB bộ nhớ mỗi GPU và 1,8 TB ổ lưu trữ SSD cục bộ chuẩn NVMe. Các phiên bản P3dn.24xlarge cũng hỗ trợ Elastic Fabric Adapter (EFA). Giao diện này tăng tốc các ứng dụng machine learning phân tán sử dụng Thư viện giao tiếp chung NVIDIA (NCCL). EFA có thể mở rộng quy mô lên đến hàng nghìn GPU, cải thiện đáng kể thông lượng và khả năng mở rộng của các mô hình huấn luyện deep learning, từ đó cho kết quả nhanh hơn.
Source: Amazon Web Service&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;NVIDIA T4 hay &lt;strong&gt;Turing&lt;/strong&gt;: với AWS EC2 thì bạn có thể thuê &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g4dn.metal&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;NVIDIA A100 hay &lt;strong&gt;Ampere&lt;/strong&gt;: Với AWS EC2 thì có thể thuê &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p4d.24xlarge&lt;/code&gt;, với Azure HPC thì có thể thuê &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Standard_ND96amsr_A100_v4&lt;/code&gt;. GCP thì có &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a2-highgpu-8g&lt;/code&gt; hoặc bản 16 GPU là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a2-highgpu-16g&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thì về mặt spec Ampere là khỏe nhất nếu nói về TFLOPS.
Dưới đây là bảng giá thành của NVIDIA 8x A100 Tensor Core.
Trong bảng này có 2 cột mà các bạn nên để ý là giá thành thuê theo giờ (&lt;strong&gt;Hourly cost&lt;/strong&gt;) và tỷ lệ GFLOPS/USD (đáng giá thế nào).
Giả định chung là hệ thống được xây dựng tối thiểu 4x GPU và được dùng ít nhất 24 tháng, mỗi tháng dùng 22 ngày (T7/CN nghỉ ngơi).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ampere.png&quot; alt=&quot;ampere&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nói chung tự build thì các bạn có thể tham khảo cấu hình của DGX-1&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, DGX-2&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, và DGX-A100&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; để mua các bộ phận về tự ráp thì sẽ tiết kiệm công lắp ráp, nhưng nhìn chung tôi nghĩ cũng phải 50 ngàn Mỹ Kim.&lt;/p&gt;

&lt;h2 id=&quot;các-cloud-solutions&quot;&gt;Các cloud solutions&lt;/h2&gt;
&lt;p&gt;Trong trường hợp bạn có bài toán train dữ liệu mà mất hàng tháng trời train với GTX/RTX thì bạn sẽ nghĩ phải thuê GPUs trên data center (8x-16x GPU).
Thì ngoài AWS/Azure/GCP là khá cùng rank nên bảng giá không chênh lệch nhau mấy, bạn có thể tham khảo thêm các trang cho thuê GPU bên ngoài để tìm được chỗ thuê hợp lý hơn.
Như kết quả tìm kiếm của AIFI thì hiện tại có trang &lt;a href=&quot;https://vast.ai&quot;&gt;vast.ai&lt;/a&gt; cung cấp khá nhiều sự lựa chọn cho thuê ở mức giá thấp hơn 5 USD/hour.&lt;/p&gt;

&lt;h2 id=&quot;còn-lời-giải-nào-khác&quot;&gt;Còn lời giải nào khác?&lt;/h2&gt;

&lt;p&gt;Nhìn chung tự build thì có hai khả năng:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mua đồ sẵn&lt;/strong&gt; như DGX&lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:2:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:3:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; thì các bạn cứ chuẩn bị 100k Mỹ kim trở lên.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mua bộ phận về tự ráp&lt;/strong&gt; thì các bác tham khảo cấu hình của DGX rồi độ lại tùy theo nhu cầu. Tuy nhiên, chắc chỉ giảm được tiền công, và tối ưu một chút kiểu DGX dùng nhiều RAM thì mình giảm RAM xuống. Nói chung chắc cũng phải 50K Mỹ Kim.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Về cá nhân, tôi thiên về thuê!
Nếu tự build thì mua mấy cái RTX/GTX dòng Ti là ổn rồi.
Tuy nhiên nếu bài toán lớn thì bạn bắt buộc phải dùng data center GPU thì lúc ấy phải có &lt;strong&gt;TIỀN&lt;/strong&gt;!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Vấn đề của đi thuê là tiền tính theo giờ nên bạn cần phải ước lượng được số giờ sử dụng.&lt;/strong&gt; Nếu tầm trên 200h/tháng, tôi nghĩ nên thuê theo năm hoặc 3 năm.
Spot price thì cũng tàm tạm thôi, vì mất công chờ với nó ngắt điện (interupt) mình cũng phải chịu ấy, nên là rẻ nhưng lại mất thời gian chờ và bị ngắt.
Mà vấn đề với Spot là &lt;strong&gt;nó không có luôn ấy (phải chờ đến khi cái server ấy nó open mình mới được dùng)&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hơi buồn nhưng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;đầu tiên vẫn là ... tiền đâu&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Như vậy chúng ta đã điểm qua một số SOTAs của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; cho Vision và nhìn chung các &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seq2seq&lt;/code&gt; vẫn đang nắm vị trí số 1.
Tuy vậy, vấn đề lớn khi “đua đòi” vào mảng này thì vẫn là tài nguyên thôi.
Nếu chuẩn bị được budget và plan nghiên cứu nghiêm chỉnh (mà đầu tiên là tiền đâu) thì về mặt nghiệp vụ PM tôi nghĩ không nên triển khai làm gì mất time anh em.
Ít nhất là cần vốn 200k Mỹ Kim thì cũng phải có tầm 100k trong túi hãy nghĩ!&lt;/p&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;dosovitskiy2020image&quot;&gt;Dosovitskiy, A., Beyer, L., Kolesnikov, A., Weissenborn, D., Zhai, X., Unterthiner, T., Dehghani, M., Minderer, M., Heigold, G., Gelly, S., Uskoreit, J. and Houlsby, N. 2020. An image is worth 16x16 words: Transformers for image recognition at scale. &lt;i&gt;arXiv preprint arXiv:2010.11929&lt;/i&gt;. (2020).&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/dosovitskiy2020image/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;carion2020end&quot;&gt;Carion, N., Massa, F., Synnaeve, G., Usunier, N., Kirillov, A. and Zagoruyko, S. 2020. End-to-end object detection with transformers. &lt;i&gt;European conference on computer vision&lt;/i&gt; (2020), 213–229.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/carion2020end/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;gao2021fast&quot;&gt;Gao, P., Zheng, M., Wang, X., Dai, J. and Li, H. 2021. Fast convergence of detr with spatially modulated co-attention. &lt;i&gt;Proceedings of the IEEE/CVF International Conference on Computer Vision&lt;/i&gt; (2021), 3621–3630.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/gao2021fast/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;redmon2018yolov3&quot;&gt;Redmon, J. and Farhadi, A. 2018. Yolov3: An incremental improvement. &lt;i&gt;arXiv preprint arXiv:1804.02767&lt;/i&gt;. (2018).&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/redmon2018yolov3/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;ge2021yolox&quot;&gt;Ge, Z., Liu, S., Wang, F., Li, Z. and Sun, J. 2021. Yolox: Exceeding yolo series in 2021. &lt;i&gt;arXiv preprint arXiv:2107.08430&lt;/i&gt;. (2021).&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/ge2021yolox/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;lin2014microsoft&quot;&gt;Lin, T.-Y., Maire, M., Belongie, S., Hays, J., Perona, P., Ramanan, D., Dollár, P. and Zitnick, C.L. 2014. Microsoft coco: Common objects in context. &lt;i&gt;European conference on computer vision&lt;/i&gt; (2014), 740–755.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/lin2014microsoft/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;kuznetsova2020open&quot;&gt;Kuznetsova, A., Rom, H., Alldrin, N., Uijlings, J., Krasin, I., Pont-Tuset, J., Kamali, S., Popov, S., Malloci, M., Kolesnikov, A., Duerig, T. and Ferrari, V. 2020. The open images dataset v4. &lt;i&gt;International Journal of Computer Vision&lt;/i&gt;. 128, 7 (2020), 1956–1981.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/kuznetsova2020open/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://wanted2.github.io/seq2seq/&quot;&gt;https://wanted2.github.io/seq2seq/&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:4:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:4:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://wanted2.github.io/speech/&quot;&gt;https://wanted2.github.io/speech/&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:5:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:5:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/data-center/dgx-1/&quot;&gt;https://www.nvidia.com/en-us/data-center/dgx-1/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/data-center/dgx-2/&quot;&gt;https://www.nvidia.com/en-us/data-center/dgx-2/&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:2:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.nvidia.com/en-us/data-center/dgx-a100/&quot;&gt;https://www.nvidia.com/en-us/data-center/dgx-a100/&lt;/a&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:3:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 12 Feb 2022 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/seq2seq-cv/</link>
        <guid isPermaLink="true">https://wanted2.github.io/seq2seq-cv/</guid>
        
        <category>Object Detection</category>
        
        <category>Object Recognition</category>
        
        <category>Image Segmentation</category>
        
        <category>Temporal Segmentation</category>
        
        <category>Sequence-to-sequence</category>
        
        <category>seq2seq</category>
        
        <category>Transformer</category>
        
        <category>Self-supervised learning</category>
        
        <category>BERT</category>
        
        <category>Vision Transformer</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
        <category>Artificial Intelligence</category>
        
        <category>Computer Vision</category>
        
      </item>
    
      <item>
        <title>RapidAPI and RapidAPI Hub</title>
        <description>&lt;p&gt;&lt;em&gt;Image Credit: &lt;a href=&quot;https://financefeeds.com/rakuten-launches-api-marketplace/&quot;&gt;FinanceFeeds&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rakuten launched RapidAPI Marketplace in 2018 as a result of the collaboration between Japan’s Rakuten Inc and San Francisco-based startup RapidAPI.
&lt;a href=&quot;https://api.rakuten.co.jp/en/&quot;&gt;The API marketplace&lt;/a&gt; aims to provide software developers in Japan and Asia unified access to more than 8,000 APIs with localized documentation and resources in Japan’s language and English.
The API marketplace platform will connect API providers and developers.
Developers in Japan and across Asia will be able to find, test, and connect to thousands of APIs for their applications.
The marketplace will also allow API providers to connect with the global developer community through personalized API portals.
 &lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-rapidapi&quot;&gt;What is RapidAPI?&lt;/h1&gt;

&lt;p&gt;Let us assume that you have an API that is ready for production.
You need to add authentication like API key, OAuth 2, or something else.
You need to deploy your API to somewhere that is stable and reliable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is the &lt;strong&gt;shortest path&lt;/strong&gt; to achieving your goal?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You are an application developer, and you need to manage the records of some data for the app.
For example, you need to maintain the list of public holidays in your app.
You don’t want to hardcode those things in the code.
Note that the public holidays change between countries and sometimes due to the law it will change between years.
It is somewhat troublesome to maintain the records in your database as it will make you allocate some effort and human resources there.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is the most convenient way to maintain such data?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In both scenarios, Rakuten RapidAPI Marketplace gives you excellent solutions.
Either maintenance of the data (public holidays) or publishing a new API, you can do all of the lifecycles in one platform.&lt;/p&gt;

&lt;p&gt;For example, when you want to check a day is a holiday or not, you can thus search for a free API like this &lt;a href=&quot;https://english.api.rakuten.net/theapiguy/api/public-holiday&quot;&gt;one&lt;/a&gt; and make a request.
Because all maintenance is up on the providers, this solution costs you nothing: you don’t need to worry about maintaining the records of holidays data (which shouldn’t be your matter in any way) and focus on your own application logic.
Note that the &lt;a href=&quot;https://english.api.rakuten.net/theapiguy/api/public-holiday&quot;&gt;Public Holidays API&lt;/a&gt; has low latency (59ms) and is completely free.
Another solution is to build an endpoint in your own API like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/v1/holidays&lt;/code&gt; to validate the holidays, but while such a ready-to-use solution is there, why should you waste time and money to build/manage/maintain on your own?&lt;/p&gt;

&lt;p&gt;RapidAPI helps your API to distribute and monetize.
Adding your API to the RapidAPI Hub gets you instant exposure to our growing user base, a search-engine-optimized profile page for your API, as well as features like user management and billing services.
RapidAPI also serves functional testings, API monitoring dashboards, and many other premiere features like API authentication.&lt;/p&gt;

&lt;h1 id=&quot;rapidapi-for-api-vendors&quot;&gt;RapidAPI for API Vendors&lt;/h1&gt;

&lt;p&gt;The workflow between an app developer’s client to a vendor API can be as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/rapidapi.svg&quot; alt=&quot;rapidapi&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An &lt;a href=&quot;https://docs.rapidapi.com/docs/keys&quot;&gt;API Key&lt;/a&gt; is generated and appended to the request’s header to RapidAPI servers.&lt;/li&gt;
  &lt;li&gt;RapidAPI authenticate the request (using API Key and optionally a configured authentication method like OAuth 2). Then it modifies the requests header to append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-RapidAPI-*&lt;/code&gt; headers.&lt;/li&gt;
  &lt;li&gt;The vendor API (destination API in the diagram) checks the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-RapidAPI-*&lt;/code&gt; headers and authenticates the modified requests.&lt;/li&gt;
  &lt;li&gt;A response is generated according to the requested information and is then returned to RapidAPI.&lt;/li&gt;
  &lt;li&gt;RapidAPI modifies the response from vendor servers. It appends Rapid API headers (for example, headers about rate limits) or generates a new response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, RapidAPI Marketplace acts as a proxy between app servers (client in the diagram) and the vendor API servers.
The vendors &lt;a href=&quot;https://docs.rapidapi.com/docs/add-an-api-basics&quot;&gt;register&lt;/a&gt; their APIs and &lt;a href=&quot;https://docs.rapidapi.com/docs/add-an-api-advanced-settings&quot;&gt;fine-tune&lt;/a&gt; the settings in RapidAPI dashboard.
All API endpoints are relative to a base URL, which is added as a “prefix” to all API endpoints.
This approach avoids the need to define absolute URLs for endpoints every time and increases API portability by changing the base URL.&lt;/p&gt;

&lt;p&gt;API vendors can &lt;a href=&quot;https://docs.rapidapi.com/docs/configuring-api-authentication&quot;&gt;add&lt;/a&gt; basic authentication or OAuth 2 to their APIs.&lt;/p&gt;

&lt;p&gt;RapidAPI supports &lt;a href=&quot;https://docs.rapidapi.com/docs/automating-api-provisioning&quot;&gt;automatic API provisioning using OpenAPI&lt;/a&gt; and &lt;a href=&quot;https://docs.rapidapi.com/docs/transformations&quot;&gt;custom transformations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;RapidAPI has basic plan options so app developers can choose among these options to pay:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;API Type&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Free APIs&lt;/td&gt;
      &lt;td&gt;APIs that do not require a credit card or subscription to consume.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pay Per Use&lt;/td&gt;
      &lt;td&gt;APIs that don’t have a subscription fee associated with them. A credit card is required as you pay for what you use on the API.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Freemium APIs&lt;/td&gt;
      &lt;td&gt;Paid APIs that also include a limited free tier. These require a credit card, even for the free plan.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paid APIs&lt;/td&gt;
      &lt;td&gt;APIs that require a paid subscription plan and credit card to consume.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;some-notes-on-security&quot;&gt;Some notes on security&lt;/h2&gt;

&lt;p&gt;RapidAPI supports &lt;a href=&quot;https://docs.rapidapi.com/docs/secret-headers-parameters&quot;&gt;secret headers and parameters&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;RapidAPI allows you to add secret headers and/or query string parameters to API requests. The RapidAPI proxy adds these secrets to every request but is &lt;strong&gt;hidden from the API consumers&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that even the consumers who make the requests do not know about these secrets.
This differs from header and query authentication methods where consumers know all secrets in the requests they make to RapidAPI.&lt;/p&gt;

&lt;p&gt;Users should configure RapidAPI &lt;a href=&quot;https://docs.rapidapi.com/docs/security-threat-protection&quot;&gt;security&lt;/a&gt; features like firewalls, threat protection, schema validation, and request size limit (which returns error code 413).&lt;/p&gt;

&lt;p&gt;Vendors can set their API to &lt;a href=&quot;https://docs.rapidapi.com/docs/private-apis-api-logo&quot;&gt;private&lt;/a&gt; where only invited users can access.&lt;/p&gt;

&lt;h2 id=&quot;audit-and-marketing-tools&quot;&gt;Audit and marketing tools&lt;/h2&gt;

&lt;p&gt;RapidAPI provides &lt;a href=&quot;https://docs.rapidapi.com/docs/provider-dashboard&quot;&gt;Provider Dashboard&lt;/a&gt; where vendors can monitor their API usages.
Another nice thing is that as a vendor, you can make your monetization more useful using &lt;a href=&quot;https://docs.rapidapi.com/docs/ive-added-my-api-to-rapidapi-now-what&quot;&gt;Marketing API&lt;/a&gt;.
When you have an API, you should make sure you don’t miss a checklist when publishing your solution:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://api.rakuten.co.jp/docs/ja-images/ProviderWelcome_1.png&quot; alt=&quot;RapidAPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This checklist helps you have a better SEO for your API.&lt;/p&gt;

&lt;h2 id=&quot;api-testing&quot;&gt;API Testing&lt;/h2&gt;

&lt;p&gt;Testing is quite tedious!
RapidAPI helps vendors reduce testing costs with their &lt;a href=&quot;https://docs.rapidapi.com/docs/rapidapi-testing-overview&quot;&gt;API testing feature&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.readme.io/726dc84-run-code.png&quot; alt=&quot;RapidAPI testing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are already familiar with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postman-tool&lt;/code&gt; you are ready to go with RapidAPI &lt;a href=&quot;https://docs.rapidapi.com/docs/create-a-test-advanced&quot;&gt;advanced testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://files.readme.io/fabfeb1-Screen_Shot_2020-12-03_at_4.00.53_PM.png&quot; alt=&quot;Advanced testing&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;rapidapi-for-app-developers&quot;&gt;RapidAPI for App Developers&lt;/h1&gt;

&lt;p&gt;As an app developer, you can find that &lt;a href=&quot;https://rapidapi.com/hub&quot;&gt;RapidAPI Hub&lt;/a&gt; now has more than 10,000 APIs.
Even you want to develop an OCR app or a Translation app, you can find your API right away.&lt;/p&gt;

&lt;p&gt;All you need is to register a RapidAPI account, choose your API and then &lt;strong&gt;make a payment&lt;/strong&gt;.
Finally, you can &lt;a href=&quot;https://docs.rapidapi.com/docs/connecting-to-an-api&quot;&gt;connect&lt;/a&gt; to your paid API using the API key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/rapidapi-vin.png&quot; alt=&quot;RapidAPI VIN&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It is worth noting that RapidAPI supports not only REST API but also &lt;a href=&quot;https://docs.rapidapi.com/docs/graphql-apis&quot;&gt;GraphQL&lt;/a&gt;, &lt;a href=&quot;https://docs.rapidapi.com/docs/adding-soap-apis&quot;&gt;SOAP&lt;/a&gt;, and &lt;a href=&quot;https://docs.rapidapi.com/docs/kafka-apis&quot;&gt;Kafka&lt;/a&gt; APIs.
We did not touch &lt;a href=&quot;https://docs.rapidapi.com/docs/what-is-rapidapi-for-teams&quot;&gt;RapidAPI for Teams&lt;/a&gt;, but it might be useful at the organization level.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/rapidapi/</link>
        <guid isPermaLink="true">https://wanted2.github.io/rapidapi/</guid>
        
        <category>api development</category>
        
        <category>backend</category>
        
        <category>infrastructure</category>
        
        <category>rapidapi</category>
        
        
        <category>Software Engineering</category>
        
        <category>Artificial Intelligence</category>
        
        <category>Site Reliable Engineering</category>
        
      </item>
    
      <item>
        <title>Chia tay 2021!</title>
        <description>&lt;p&gt;Đây là bài post thứ 61 của blog AiFi trong năm 2021, cũng là bài viết chia tay 2021, trong tâm thế đón chờ 2022 tươi mới hơn.
Theo quan điểm làm việc scrum, thì coi như đây là thời điểm kết thúc 1 chu kỳ, cũng là lúc làm một số việc để nhìn lại một năm đã qua (bao gồm cả GKPT hay &lt;em&gt;Good, Keep, Problem, Try&lt;/em&gt;).
2021年中61番目の投稿です．
2021年と別れて，2022年を迎える時期の投稿です．
一年間を1スプリントとすると，いろいろなことができたと思いますので，スクラムの行事として，レビューとレトロ会をここで開催したいと思います．
&lt;em&gt;Good, Keep, Problem, Try&lt;/em&gt; も含めてやります．
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;nhìn-lại-năm-2021-của-blog-aifi&quot;&gt;Nhìn lại năm 2021 của blog AiFi&lt;/h1&gt;

&lt;h2 id=&quot;nhìn-từ-thống-kê-người-dùng&quot;&gt;Nhìn từ thống kê người dùng&lt;/h2&gt;

&lt;p&gt;Hiện tại AiFi blog sử dụng Google Analytics để track và lấy thống kê người dùng.
Các sự kiện như view, scroll, referal, … được báo cáo theo phút lên server của Google.&lt;/p&gt;

&lt;p&gt;Đầu tiên là thống kê về người dùng và nguồn giới thiệu.
Trong năm 2021, blog tuy mới ra mắt và còn nhiều khó khăn vất vả nhưng đã thu hút được 552 user mới từ khắp nơi trên thế giới.
&lt;strong&gt;552 người dùng này đã ghi lại 7309 sự kiện.&lt;/strong&gt;
Một con số đáng khích lệ với blog mới 1 năm tuổi đời.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/analytics-2021-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Một điểm đáng chú ý là dù facebook.com là nơi tác giả hay chia sẻ bài viết, nhưng &lt;strong&gt;user lại phần lớn đến từ 2 nguồn: google và direct&lt;/strong&gt;.
Về yếu tố địa lý thì đa phần người dùng đến từ &lt;strong&gt;Việt Nam, Mỹ và Nhật Bản&lt;/strong&gt;.
Các nước khác vẫn chưa đóng tỷ trọng lớn trong cơ cấu người dùng của AiFi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/analytics-2021-02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tỷ lệ người dùng của AiFi gia tăng tính từ tháng &lt;strong&gt;7&lt;/strong&gt;.
Trong năm 2021, &lt;strong&gt;số lượng sự kiện &lt;em&gt;user engagement&lt;/em&gt; là 1852, và số &lt;em&gt;page view&lt;/em&gt; là 2622 lượt&lt;/strong&gt;.
Ngoài ra, 3 bài viết đạt số lượng truy cập cao nhất (không tính trang chủ) là:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/mOCR-mlkit-androidx-example/&quot;&gt;mOCR: A real-time application of OCR with Google MLKit and Android CameraX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/adobe-creative-cloud/&quot;&gt;Adobe Creative Cloud: An All-in-One Platform for Creators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/aws-lambda-spacy-mxnet-possible-but-shouldnt/&quot;&gt;Implementing a complex system in AWS Lambda: Should or shouldn’t?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sự “vùng lên” của bài viết &lt;a href=&quot;/adobe-creative-cloud/&quot;&gt;Adobe Creative Cloud: An All-in-One Platform for Creators&lt;/a&gt; thật thú vị vì bài viết được xuất bản trên blog AiFi vào tháng cuối năm nhưng lại đứng thứ nhì.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/analytics-2021-03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Về hệ điều hành, trình duyệt và ngôn ngữ đầu vẫn là &lt;strong&gt;Windows, Chrome và English&lt;/strong&gt;.
Theo sau lần lượt là &lt;strong&gt;MacOS, Safari và tiếng Nhật&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/analytics-2021-04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nhìn-từ-kết-quả-tìm-kiếm&quot;&gt;Nhìn từ kết quả tìm kiếm&lt;/h2&gt;

&lt;p&gt;Kết quả tìm kiếm về “AiFi Caineng” trên google.com và Bing Search trong ngày 31 tháng 12 năm 2021 như sau:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/aifi-search-engines-2021.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kết quả tìm kiếm từ khóa “aifi” và thậm chí “aifi caineng” quả là hơi nghèo nàn và dễ bị lẫn vào các từ khóa tìm kiếm khác như “wifi” chẳng hạn.
Đây cũng là 1 thiếu sót do blog mới chỉ 1 năm, và tác giả vẫn đang bận bịu công việc chính cuả tác giả.
Tuy nhiên, từ năm 2022, ở mức độ nhất định việc nâng rank trong các cỗ máy tìm kiếm từ khóa sẽ được &lt;strong&gt;tối ưu hóa&lt;/strong&gt; nhằm đưa tri thức của AiFi đến với đông đảo bạn đọc và nâng cao chất lượng phục vụ.&lt;/p&gt;

&lt;h1 id=&quot;good-keep-problem-try&quot;&gt;Good, Keep, Problem, Try&lt;/h1&gt;

&lt;p&gt;Việc chạy sprint kéo dài 1 năm quả là hơi lạ, tuy nhiên là cũng dễ hiểu vì viết blog chỉ là việc phụ làm trong thời gian rảnh rỗi của tác giả.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Good&lt;/th&gt;
      &lt;th&gt;Keep&lt;/th&gt;
      &lt;th&gt;Problem&lt;/th&gt;
      &lt;th&gt;Try&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Đã tạo được và thu hút lượng người dùng nhất định.&lt;/td&gt;
      &lt;td&gt;Duy trì tần suất chia sẻ bài viết.&lt;/td&gt;
      &lt;td&gt;Thứ hạng trên search engine chưa cao.&lt;/td&gt;
      &lt;td&gt;Tối ưu hóa SEO&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Tối ưu hóa từ khóa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Tối ưu thẻ HTML, …&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Chưa tạo ra thu nhập từ blog&lt;/td&gt;
      &lt;td&gt;Xem xét đưa vào và tối ưu hóa quảng cáo.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Các nguồn Google và Facebook đã đem đến lượng người dùng nhất định.&lt;/td&gt;
      &lt;td&gt;Tiếp tục duy trì quảng bá trên Google và Facebook.&lt;/td&gt;
      &lt;td&gt;Nguồn Facebook chưa đem lại nhiều người dùng mới.&lt;/td&gt;
      &lt;td&gt;Tối ưu hóa quảng bá blog trên Facebook.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Một số nguồn cấp khác như Twitter và LinkedIn vẫn chưa đem lại nhiều người dùng.&lt;/td&gt;
      &lt;td&gt;Lên chiến lược quảng bá trên các nền tảng này.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;tổng-kết&quot;&gt;Tổng kết&lt;/h1&gt;

&lt;p&gt;Kết thúc Sprint 2021, hướng tới Sprint 2022, blog AiFi xin cám ơn đông đảo bạn đọc, đặc biệt là 552 người dùng đã có, vì sự quan tâm và thịnh tình trong năm qua.
Trong năm 2022, AiFi sẽ tiếp tục cập nhật và mong muốn lan tỏa tri thức cho anh em, với phương châm, troll trước học sau.&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/year-end/</link>
        <guid isPermaLink="true">https://wanted2.github.io/year-end/</guid>
        
        <category>Event</category>
        
        <category>Year-end event</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
      </item>
    
      <item>
        <title>Nghịch ngợm Svelte và câu chuyện code JS thuần 10 năm trước</title>
        <description>&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; là một framework của ngôn ngữ Javascript, với mô hình &lt;strong&gt;bi-direction data binding&lt;/strong&gt; (MVVM) khiến cho trạng thái và hiển thị luôn đồng bộ, cũng giống như những người anh em khác như Vue.js, ReactJS hay AngularJS.
Tuy nhiên, một ưu điểm của Svelte là cấu trúc ngôn ngữ rất thanh thoát, khiến cho lượng code mà người lập trình cần viết rất ít.
Lật lại lịch sử của các JS Framework, có thể lần lại từ khoảng 2006, khi JQuery ra đời với một bước tiến trong xử lý JS dạng embedding (nhúng) vào trong trang HTML.
Với JQuery, mô hình lập trình là bạn có thể nhúng những snippet code JS vào trong HTML một cách thuận tiện và control hiển thị cũng như xử lý tại frontend.
Cách làm này nhìn chung là thủ công, và rất nhiều lập trình viên JS đã hiểu rằng đây là con đường code thuần và hầu như là &lt;strong&gt;buggy&lt;/strong&gt; (rất nhiều bug có thể phát sinh)!
Lịch sử sang trang mới vào những năm 2010-2011, cùng với sự ra đời của hàng loạt trào lưu mới như Lean startups, Agile development, … với những &lt;strong&gt;JS framework theo luồng MVVM (Model-View-ViewModel)&lt;/strong&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Backbone&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AngularJS&lt;/code&gt; hầu như ra đời trong giai đoạn này đã mở ra kỷ nguyên mới, khi dữ liệu và hiển thị được &lt;strong&gt;binding&lt;/strong&gt; với nhau khiến cho sự đồng bộ thống nhất trên frontend được đảm bảo.
Công ty tôi thời đó khởi đầu cũng làm JQuery thuần, code vô cùng nhiều bugs, mà kỹ sư OT ngày đêm lo sửa.
Nhưng đó là chuyện của hơn 10 năm trước các bạn ạ.
Sau đó nhiều kỹ sư trong công ty đã cực lực phản đối việc tiếp tục dùng JQuery và đề xuất dùng những con đường bug-free hơn như &lt;strong&gt;AngularJS&lt;/strong&gt;.
Đó là những chuyện xảy ra vào năm 2013.
Nhưng cùng lúc đó, 2013, Facebook, gã nhà giàu mới nổi, bắt đầu “o bế” khá nhiều công nghệ Web mới như ngôn ngữ lập trình Hack (hậu duệ của PHP) và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Meteor&lt;/code&gt; một kiểu JS framework cũng thực hiện MVVM, data binding để đồng bộ hiển thị và dữ liệu tại frontend.
Và cùng năm 2013, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactJS&lt;/code&gt;, cũng là một JS framework được FB o bế cũng ra đời và làm mưa làm gió.
Hồi đó cũng có tranh luận là lên tiếp tục &lt;strong&gt;chịu đựng JQuery&lt;/strong&gt; hay chuyển sang data binding là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AngularJS&lt;/code&gt; hoặc &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReactJS&lt;/code&gt; mà cuối cùng có vẻ là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AngularJS&lt;/code&gt; đã được chọn.
Bẵng đi ít lâu, 2013, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VueJS&lt;/code&gt; ra đời và nhanh chóng được chào đón.
Sau đó gần đây là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Svelte&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;một-ví-dụ-hộp-checkbox-check-alluncheck-all-và-bài-toán-reset-hiển-thị-đúng-cách&quot;&gt;Một ví dụ: hộp checkbox &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All/Uncheck All&lt;/code&gt; và bài toán reset hiển thị đúng cách&lt;/h1&gt;

&lt;h2 id=&quot;một-ngày-đẹp-trời-năm-2012-một-yêu-cầu-khách-hàng-tới&quot;&gt;Một ngày đẹp trời năm 2012, một yêu cầu khách hàng tới&lt;/h2&gt;

&lt;p&gt;Hồi ấy có 1 câu chuyện là thế này.
Nói thì dài dòng nhưng chủ yếu là làm chức năng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All/Uncheck All&lt;/code&gt; mà bạn có thể nhìn thấy ở hình ảnh bên trên.
Nó là chức năng bổ trợ cho &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Datatables&lt;/code&gt; mà chúng tôi có dùng.
&lt;strong&gt;Cũng 10 năm rồi, tôi thú thực là cũng chả nhớ chi tiết lắm&lt;/strong&gt;, nhưng đại để là có yêu cầu thế này:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mỗi dòng phải có 1 checkbox, và mỗi checkbox là riêng nhau, không có chuyện click checkbox ở dòng 1 mà lại thay đổi hiển thị của dòng 2 là … giải tán.&lt;/li&gt;
  &lt;li&gt;Có nút &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All&lt;/code&gt; mà khi click vào thì tất cả các checkbox con chuyển thành ON hết.&lt;/li&gt;
  &lt;li&gt;Có nút &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncheck All&lt;/code&gt; mà khi chọn thì tất cả các checkbox con của mỗi dùng đều OFF hết.&lt;/li&gt;
  &lt;li&gt;Nút &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncheck All&lt;/code&gt; có thể làm một để tối ưu trải nghiệm người dùng.&lt;/li&gt;
  &lt;li&gt;Nếu tất cả các nút con đều ON thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckAll&lt;/code&gt; cũng phải ON.&lt;/li&gt;
  &lt;li&gt;Nếu có ít nhất 1 nút con là OFF thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckAll&lt;/code&gt; phải OFF.&lt;/li&gt;
  &lt;li&gt;Ngược lại với &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncheck ALL&lt;/code&gt; (nếu tách hai hộp check ra).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/svelte-checkall-uncheckall-2.gif&quot; alt=&quot;svelte&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Đấy, yêu cầu có thế rồi chuyển xuống cho đội hakken làm&lt;/strong&gt;.
Tức là phải &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reset&lt;/code&gt; chuẩn, không được để chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All&lt;/code&gt; nhưng lại có dòng nào không được check (dù đã check rồi).
Không được để check dòng này nhưng dòng khác lại bị ảnh hưởng.&lt;/p&gt;

&lt;h2 id=&quot;lời-giải-10-năm-trước&quot;&gt;Lời giải 10 năm trước&lt;/h2&gt;

&lt;p&gt;Scope cũng khá nhẹ nhàng, nhưng lúc đó anh em lại chọn dùng JQuery và code thuần luôn.&lt;/p&gt;

&lt;p&gt;Đó quả thực là một bước đi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gian khổ&lt;/code&gt;: thứ nhất, là vấn đề &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data binding&lt;/code&gt;, chuyện bind checkbox từng dòng vào hiển thị từng dòng mà lại làm bằng JS thuần thì đòi hỏi phải chơi trò &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gắn nhãn và selector&lt;/code&gt;.
Tức là với dòng thứ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; gắn nhãn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id=&quot;row-n&quot;&lt;/code&gt; chẳng hạn, sau đó dùng selector của JS hoặc JQuery như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var el = document.querySelector(&quot;#row-n&quot;);&lt;/code&gt; hoặc như JQuery thì đơn giản hơn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$(&apos;#row-n&apos;)&lt;/code&gt;, để switch hiển thị.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Bạn nghĩ sao?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Thế tức là gắn nhãn bằng tay còn gì?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Vâng, đúng thế. Gắn nhãn bằng tay và select nhãn theo tên đã đặt.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Thế nếu miss một phát là toang, select nhầm nhãn là hiển nhiên có khả năng vì là con người làm. Rồi còn đặt tên mà không có quy tắc gây nhầm lẫn lúc select là TOANG nặng!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vâng, thú thực là lúc ấy mấy công nghệ &lt;strong&gt;MVVM frameworks như AngularJS/ReactJS&lt;/strong&gt; vẫn đang trong vòng thai nghén của Google và Facebook, anh em cũng chưa có điều kiện tiếp cận, mới bắt buộc phải dùng JS thuần mà code.
Chuyện 10 năm trước cơ mà!
(Chứ còn năm 2021 này mà còn dùng là … không nên! &lt;strong&gt;Phải MVVM hết&lt;/strong&gt;.).&lt;/p&gt;

&lt;h1 id=&quot;cách-làm-1-làm-bằng-js-thuần&quot;&gt;Cách làm 1: Làm bằng JS thuần&lt;/h1&gt;

&lt;p&gt;Đánh nhãn bằng tay đương nhiên là không tốt.
Để hiểu được lý do tại sao nên dùng framework và patterns có sẵn, chúng ta nên bắt đầu từ việc định tính hóa bài toán.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bài toán&lt;/strong&gt;: Giả sử có $n$ dòng trong bảng.
Mỗi dòng có một checkbox $c_i\in\{0,1\}$ (ở đây 0 là OFF còn 1 là ON).
Trạng thái của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check All&lt;/code&gt; là $C\in\{0,1\}$ và tương ứng của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Uncheck all&lt;/code&gt; là $\overline{C}=1-C$.
Thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bài toán đồng bộ trạng thái&lt;/code&gt; ở đây là đảm bảo rằng ở mọi thời điểm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$C=\bigcap_{i=1}^n c_i$                                          (1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Điều này khá thú vị, việc đảm bảo phương trình (1) luôn xảy ra đòi hỏi phải &lt;strong&gt;quản lý trạng thái&lt;/strong&gt; một cách chính xác.&lt;/p&gt;

&lt;p&gt;Để làm được điều này với JS thuần, đòi hỏi&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Đánh nhãn chính xác, khó nhầm lẫn.&lt;/li&gt;
  &lt;li&gt;Không select nhầm nhãn.&lt;/li&gt;
  &lt;li&gt;Quản lý trạng thái ON/OFF phải đồng bộ.&lt;/li&gt;
  &lt;li&gt;Phải set checked ngay khi có &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onclick&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nhìn chung là một cách làm khá &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tồi tệ&lt;/code&gt;.
&lt;strong&gt;Đặc biệt, vì số lượng biến trạng thái là $n+1$ nên khi $n$ càng lớn việc quản lý trạng thái càng khó khăn, dễ xảy ra bug, mistakes, …&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;cách-làm-2-làm-bằng-svelte&quot;&gt;Cách làm 2: Làm bằng Svelte&lt;/h1&gt;

&lt;p&gt;Với &lt;strong&gt;Svelte’s &lt;a href=&quot;https://svelte.dev/tutorial/checkbox-inputs&quot;&gt;binding&lt;/a&gt;&lt;/strong&gt;, việc quản lý trạng thái trở nên dễ dàng và ít mistakes hơn.
Bạn chỉ cần định nghĩa biến trạng thái của checkboxes và bind chúng vào định nghĩa của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt; nhờ từ khóa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind:checked={}&lt;/code&gt;.
Ví dụ như sau:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-svelte&quot;&gt;&amp;lt;input
    type=&quot;checkbox&quot;
    class=&quot;form-check-input&quot;
    aria-checked=&quot;false&quot;
    bind:checked={checkedAll}
    on:click={onCheckedAll}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Như trên biến &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkedAll&lt;/code&gt; đã được bind vào checkbox.
Thậm chí cũng chả cần định nghĩa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; cho textbox (tức là đánh nhãn) làm gì, bạn chỉ cần quản lý biến trạng thái &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checkedAll&lt;/code&gt; trong code của mình.
&lt;strong&gt;Mà thao tác ấy chắc chắn sẽ tự động và ít bugs hơn đánh nhãn bằng tay kiểu JS thuần.&lt;/strong&gt;
Khi biến trạng thái thay đổi, hiển thị checkbox sẽ &lt;strong&gt;tự động&lt;/strong&gt; thay đổi theo và bạn chẳng phải làm mấy cái thao tác set props hay gì mất thời gian mà lại dễ lỗi.
Ví dụ bạn để set prop nhầm chỗ hoặc assign nhầm label một phát vì cách đặt tên của lập trình viên cũ quá tồi thì ôi thôi có mà … toang nặng.&lt;/p&gt;

&lt;p&gt;Đến đây, việc còn lại quá nhẹ nhàng với vài dòng code chơi: bạn định nghĩa một mảng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;checked&lt;/code&gt; cho trạng thái của $n$ biến trạng thái còn lại và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bind:checked={}&lt;/code&gt; vào các checkbox ở từng dòng.
Để thực hiện logic chuyển trạng thái, bạn chỉ cần lo viết code tương tác giữa biến $C$ và $c_i, i=1,n$ chứ chả phải lo ngồi set prop, hoặc set text làm gì mất công và dễ bug.&lt;/p&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;p&gt;Nhìn chung cách làm bằng JS thuần là cách làm thiếu tính trừu tượng hóa, thủ công và đánh nhãn mệt nghỉ.
Thay vào đó sự tiến bộ của công nghệ những năm 2010-2014 đã cho phép lập trình frontend web có những framework kiểu MVVM đủ mạnh như AngularJS, VueJS, ReactJS và gần đây là Svelte.
Sử dụng Svelte để &lt;strong&gt;trừu tượng hóa&lt;/strong&gt; trạng thái hiển thị thành biến (qua &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binding&lt;/code&gt;) và quản lý trạng thái thông qua quản lý biến là một điểm chốt khiến cho việc sử dụng Svelte (cũng như VueJS, ReactJS, AngularJS) chiếm ưu thế vượt trội so với cách làm thủ công JS thuần mà 10 năm trước chúng tôi hay làm.&lt;/p&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://kit.svelte.dev/docs&quot;&gt;Docs • SvelteKit&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 10 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/svelte-and-reset-checkboxes-10years-ago/</link>
        <guid isPermaLink="true">https://wanted2.github.io/svelte-and-reset-checkboxes-10years-ago/</guid>
        
        <category>svelte framework</category>
        
        <category>svelte</category>
        
        <category>vuejs</category>
        
        <category>reactjs</category>
        
        <category>angularjs</category>
        
        <category>frontend</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>Quả trứng và con gà: cái nào có trước? - Bất bình đẳng về lương và sản lượng lao động</title>
        <description>&lt;iframe width=&quot;100%&quot; height=&quot;680&quot; src=&quot;https://www.epi.org?p=235212&amp;amp;view=embed&amp;amp;embed_template=charts_v2013_08_21&amp;amp;embed_date=20211121&amp;amp;onp=91701&amp;amp;utm_source=epi_press&amp;amp;utm_medium=chart_embed&amp;amp;utm_campaign=charts_v2&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Con gà và quả trứng&lt;/strong&gt; là một bài toán kinh điển trong thống kê học cổ điển liên quan tới &lt;strong&gt;nhân quả (causality)&lt;/strong&gt; và &lt;strong&gt;luân hồi (feedback)&lt;/strong&gt; của các chuỗi thời gian (time series).
Năm 1969, Granger (Nobel kinh tế 2003) xuất bản một seminar paper &lt;a class=&quot;citation&quot; href=&quot;#granger1969investigating&quot;&gt;[1]&lt;/a&gt; định tính hóa nhân quả và luân hồi giữa các chuỗi sự kiện thời gian (temporal time series).
Việc kiểm tra nhân quả và luân hồi giữa các chuỗi thời gian được định tính và định lượng thông qua &lt;strong&gt;Granger verification&lt;/strong&gt;.
Năm 1979, Feige và Pearce &lt;a class=&quot;citation&quot; href=&quot;#feige1979casual&quot;&gt;[2]&lt;/a&gt; nghiên cứu về mối quan hệ luân hồi giữa tiền tệ và thu nhập, có sử dụng Granger verification.
Năm 1988, Thurman và Fisher &lt;a class=&quot;citation&quot; href=&quot;#thurman1988chickens&quot;&gt;[3]&lt;/a&gt; nghiên cứu chuỗi thời gian về sản lượng trứng cũng như chuỗi dữ liệu về số lượng gà trên toàn nước Mỹ để tìm ra quan hệ nhân quả giữa trứng và gà.
Họ sử dụng công thức của Granger và lần đầu tiên kết luận mang tính thống kê rằng &lt;strong&gt;trứng có trước và là nguyên nhân sinh ra gà&lt;/strong&gt;.
Phân tích các chuỗi sự kiện thời gian (time series analysis) và nhân quả/luân hồi giữa các chuỗi là một chủ đề truyền thống của thống kê và kinh tế học.
Gần đây, những nghiên cứu cũng cho thấy sự tồn tại nhân quả giữa &lt;strong&gt;sản lượng lao động và bất bình đăng thu nhập&lt;/strong&gt; hay bài toán &lt;strong&gt;Productivity-Pay Gap&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
Thật thú vị rằng trong 40 năm qua, mặc dù sản lượng lao động bình quân năm tăng 61.8%, nhưng lương của người lao động không hề tăng cao, dẫn tới bất bình đẳng thu nhập gia tăng (giá trị tạo ra thay vì đi vào túi người lao động lại tập trung vào túi của tầng lớp chóp bu trong xã hội Mỹ).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;granger-verification&quot;&gt;Granger verification&lt;/h1&gt;

&lt;p&gt;Con gà và quả trứng &lt;a class=&quot;citation&quot; href=&quot;#thurman1988chickens&quot;&gt;[3]&lt;/a&gt;, cũng như Productivity-Pay gap&lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; là hai ứng dụng cơ bản của Granger method &lt;a class=&quot;citation&quot; href=&quot;#granger1969investigating&quot;&gt;[1]&lt;/a&gt;.
Giả sử ta có chuỗi thời gian $\mathbf{X}=\{X_t\}_{t=-\infty}^{+\infty}$ với thời điểm $t=0$ là thời điểm bắt đầu quan sát.&lt;/p&gt;

&lt;p&gt;Ta kí hiệu chuỗi tín hiệu quá khứ của thời điểm $t$ là $\overline{\mathbf{X_t}}=\{X_{t-i}\}_{i=1}^{+\infty}$.&lt;/p&gt;

&lt;p&gt;Ngoài ra, chuỗi tín hiệu quá khứ và hiện tại của thời điểm $t$ là $\overline{\overline{\mathbf{X_t}}}=\{X_{t-i}\}_{i=0}^{+\infty}$.&lt;/p&gt;

&lt;p&gt;Ta cũng ký hiệu giá trị ước đoán điều kiện của $A_t$ trong một chuỗi $\mathbf{A}$ theo least-square errors khi có quan sát là chuỗi $\mathbf{B}$ là $P_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Chuỗi giá trị lỗi của một dự đoán là $\epsilon_t(\mathbf{A}\mid\mathbf{B})=A_t-P_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Ta hãy gọi $\sigma^2_t(\mathbf{A}\mid\mathbf{B})$ là phương sai của chuỗi giá trị lỗi $\epsilon_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Trong trường hợp này ta hãy giả sử tất cả các chuỗi đều là &lt;strong&gt;sóng dừng&lt;/strong&gt;.
Bây giờ, ta có thể thêm ký hiệu $\mathbf{U}$ là chuỗi thông tin vũ trụ (universe time series) mô tả mọi trạng thái trong quá khứ, hiện tại và tương lai của thế giới.
Thì ứng với một chuỗi sự kiện cụ thể $\mathbf{Y}$ thì $\mathbf{U}-\mathbf{Y}$ là chuỗi thông tin toàn cầu mà bỏ đi thông tin của $\mathbf{Y}$.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Định nghĩa nhân quả&lt;/strong&gt;: Nếu $\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}-\mathbf{Y}})$ thì $\mathbf{Y}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; gây ra $\mathbf{X}$.
Định nghĩa này của Granger khá là trực quan, nói nôm na là nếu xóa thông tin của $\mathbf{Y}$ khỏi hệ thống thông tin toàn cầu thì dự đoán sẽ có sai lệch lớn hơn, thì rõ ràng $\mathbf{Y}$ là 1 trong các &lt;em&gt;nguyên nhân&lt;/em&gt; gây ra $\mathbf{X}$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Định nghĩa luân hồi&lt;/strong&gt;: Nếu đồng thời $\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}-\mathbf{Y}})$ và $\sigma^2(\mathbf{Y}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{Y}\mid\overline{\mathbf{U}-\mathbf{X}})$ thì $\mathbf{Y}$ là &lt;em&gt;luân hồi&lt;/em&gt; $\mathbf{X}$.
Định nghĩa này của Granger cũng khá là trực quan, nói nôm na là nếu $\mathbf{Y}$ là nguyên nhân của $\mathbf{X}$ mà $\mathbf{X}$ cũng là nguyên nhân của $\mathbf{Y}$, thì hai chuỗi có luân hồi nghiệp quả.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nghiệp quả xa&lt;/strong&gt;: ta nói $\mathbf{Y}$ là &lt;em&gt;nghiệp quả xa&lt;/em&gt; của $\mathbf{X}$ nếu có thêm thông tin quá khứ và hiện tại của $\mathbf{Y}$ thì kết quả dự đoán trở nên chính xác hơn: $P(\mathbf{X}\mid\overline{\mathbf{U}},\overline{\overline{\mathbf{Y}}})\leq P(\mathbf{X}\mid\overline{\mathbf{U}})$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Độ lệch của nghiệp quả&lt;/strong&gt;: là giá trị số nguyên dương nhỏ nhất thỏa mãn&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$m={\arg\min}_k\{\sigma^2(\mathbf{X}\mid\mathbf{U}-\mathbf{Y}(k))\leq\sigma^2(\mathbf{X}\mid\mathbf{U}-\mathbf{Y}(k+1))\}$,&lt;/p&gt;

&lt;p&gt;tức là chỉ cần biết tối đa $m$ giá trị gần nhất trong chuỗi quá khứ và hiện tại là đủ để dự đoán.&lt;/p&gt;

&lt;p&gt;Xem xét hai chuỗi theo mô hình white-noise như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^ma_jX_{t-j}+\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^mc_jY_{t-j}+\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Theo định nghĩa của &lt;strong&gt;nhân quả&lt;/strong&gt;, nếu $\exists j~\mbox{s.t.}~b_j\neq 0$ thì $\mathbf{Y}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; của $\mathbf{X}$.
Và ngược lại $\exists j~\mbox{s.t.}~d_j\neq 0$ thì $\mathbf{X}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; của $\mathbf{Y}$.
Nếu đồng thời hai điều kiện trên xảy ra thì chúng là &lt;em&gt;luân hồi&lt;/em&gt; của nhau.
Kiểm tra giả thuyết $H_0: b_j=0\forall j$ chính là &lt;strong&gt;Granger verification&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;trứng-và-gà&quot;&gt;Trứng và Gà&lt;/h1&gt;

&lt;p&gt;Năm 1988, Thurman và Fisher &lt;a class=&quot;citation&quot; href=&quot;#thurman1988chickens&quot;&gt;[3]&lt;/a&gt; đã thực hiện Granger verification trên bộ dữ liệu chứa hai chuỗi dữ liệu: sản lượng trứng hàng năm $\mathbf{X}$và số lượng gà hàng năm $\mathbf{Y}$ trên nước Mỹ từ 1930–1983.&lt;/p&gt;

&lt;p&gt;Vì cả 2 chuỗi trên đều có thể giả định là iid, nên ta có thể viết lại mô hình nhân quả như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Chúng ta kiểm định hai giả thiết null như sau:&lt;/p&gt;

&lt;p&gt;$H_{0x}: b_j=0\forall j$&lt;/p&gt;

&lt;p&gt;$H_{0y}: d_j=0\forall j$&lt;/p&gt;

&lt;p&gt;Giả thiết $H_{0x}$ chính là &lt;em&gt;trứng không là nguyên nhân của gà&lt;/em&gt;.
Giả thiết $H_{0y}$ chính là &lt;em&gt;gà không là nguyên nhân của trứng&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Trên bộ dữ liệu trứng Mỹ và gà Mỹ, có thể bác bỏ giả thuyết đầu, nhưng không thể bác bỏ giả thuyết sau.
Tựu chung lại là &lt;em&gt;trứng Mỹ có trước và sinh ra gà Mỹ&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;productivity-pay-gap&quot;&gt;Productivity-Pay Gap&lt;/h1&gt;

&lt;p&gt;Hầu hết người Mỹ đều tin rằng &lt;strong&gt;kinh tế phát triển thì người lao động sẽ nhận được reward&lt;/strong&gt;.
Nhưng theo 1 nghiên cứu gần đây&lt;sup id=&quot;fnref:1:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; thì có vẻ tình hình thu nhập của người lao động Mỹ không phải như vậy.
Từ năm 1979, nước Mỹ đã có những thay đổi lớn về chính sách kinh tế, trong đó có nhiều chính sách phục vụ cho người giàu:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starting in the late 1970s, policymakers began dismantling all the policy bulwarks helping to ensure that typical workers’ wages grew with productivity. Excess unemployment was tolerated to keep any chance of inflation in check. Raises in the federal minimum wage became smaller and rarer. Labor law failed to keep pace with growing employer hostility toward unions. Tax rates on top incomes were lowered. And anti-worker deregulatory pushes—from the deregulation of the trucking and airline industries to the retreat of anti-trust policy to the dismantling of financial regulations and more—succeeded again and again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Những chính sách như giảm thuế cho những người thu nhập cao, … đã khoét sâu “hố ngăn” thu nhập giữa tầng lớp giàu và nghèo.
Lấy mốc 1979 là 100% cho cả tổng sản lượng quốc nội $\mathbf{X}$ lẫn thu nhập bình quân của tầng lớp lao động $\mathbf{Y}$.
Tức là $X_{1979}=Y_{1979}=1$.
Thì rõ ràng là từ năm 1948 tới 1979, lương và sản lượng quốc nội đều cùng chiều tăng.
Nhưng từ mốc 1979 với sự thay đổi về chính sách, tổng sản lượng quốc nội vẫn tăng tuyến tính nhưng lương của tầng lớp lao động đã chững lại.
Nên nhớ tầng lớp lao động nói đến trong nghiên cứu này chiếm tới 80% dân số lao động của Mỹ (production and unsupervisory workers).
Cũng nhưu ví dụ trứng và gà, cả 2 chuỗi trên đều có thể giả định là iid, nên ta có thể viết lại mô hình nhân quả như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Tuy nhiên, &lt;strong&gt;điểm mốc 1979&lt;/strong&gt; gần như là mốc thay đổi tất cả.
Trước 1979, hai chuỗi song song tuyến tính phát triển và quan hệ nhân quả theo phép thử Granger sẽ cho kết quả chấp nhận (không bác bỏ).
Từ 1979, chuỗi thu nhập của người lao động chững lại, do đó quan hệ nhân quả luân hồi giảm đi.
Đây là một ví dụ cho thấy chính sách đủ mạnh có thể thay đổi quan hệ giữa hai chuỗi, khiến cho nhân quả luân hồi biến mất.
Hai bên đi theo hai hướng độc lập riêng biệt, một bên tiếp tục phát triển lên cao, còn một bên chững lại và phát triển chậm.&lt;/p&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;p&gt;Granger verification là một câu chuyện thú vị.
Hai ứng dụng cơ bản là trứng và gà đã được các nhà khoa học Mỹ phát kiến ra trong thế kỷ 20: &lt;em&gt;trứng Mỹ sinh ra gà Mỹ&lt;/em&gt; (chứ không phải ngược lại).
Và hầu như không có luân hồi trong quan hệ giữa trứng và gà trên đất Mỹ.
Câu chuyện thứ hai là về sự thay đổi của chính sách đủ mạnh để làm mất nhân quả: năm 1979 là năm cột mốc với những người lao động Mỹ, khi bắt đầu từ đó, sản lượng quốc nội vẫn tăng tuyến tính nhưng tiền lương của người lao động tăng chậm.
Một điểm lưu ý là các chuỗi thời gian trong giả thiết của Granger đều là sóng dừng nhưng gần đây có những nghiên cứu tổng quát cho mọi loại sóng.&lt;/p&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;granger1969investigating&quot;&gt;Granger, C.W.J. 1969. Investigating causal relations by econometric models and cross-spectral methods. &lt;i&gt;Econometrica: journal of the Econometric Society&lt;/i&gt;. (1969), 424–438.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/granger1969investigating/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;feige1979casual&quot;&gt;Feige, E.L. and Pearce, D.K. 1979. The casual causal relationship between money and income: Some caveats for time series analysis. &lt;i&gt;The Review of Economics and Statistics&lt;/i&gt;. (1979), 521–533.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/feige1979casual/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;thurman1988chickens&quot;&gt;Thurman, W.N., Fisher, M.E. and others 1988. Chickens, eggs, and causality, or which came first. &lt;i&gt;American journal of agricultural economics&lt;/i&gt;. 70, 2 (1988), 237–238.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/thurman1988chickens/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.epi.org/productivity-pay-gap/&quot;&gt;The Productivity–Pay Gap - Economic Policy Institute&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; &lt;a href=&quot;#fnref:1:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/chicken-and-egg-problem/</link>
        <guid isPermaLink="true">https://wanted2.github.io/chicken-and-egg-problem/</guid>
        
        <category>project management</category>
        
        <category>project lifecycle</category>
        
        <category>software development</category>
        
        <category>chicken and egg</category>
        
        <category>causal relations</category>
        
        <category>Granger model</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
        <category>Software Engineering</category>
        
        <category>Project Management</category>
        
        <category>Artificial Intelligence</category>
        
      </item>
    
      <item>
        <title>So sánh git merge và git rebase</title>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; là 2 câu lệnh quen thuộc với lập trình viên chỉ để giải quyết cùng 1 bài toán: với 2 branches được phát triển song song, nay cần migrate các tính năng của branch feature vào branch chính (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).
Vấn đề là làm thế nào? Một cách chi tiết thì chỉ có 2 cách tương ứng với 2 câu lệnh ở trên tiêu đề bài viết mà chúng ta sẽ đi sâu trong bài này.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;đôi-lời-mở&quot;&gt;Đôi lời mở&lt;/h1&gt;

&lt;p&gt;Có khá nhiều hướng dẫn về cách tích hợp 2 nhánh công việc khác nhau, với nhiều cái tên “mỹ miều” như migration, integration và những tài liệu dài hàng trang chỉ để giải thích các cách làm.
Nhưng nếu là LTV lâu năm đều nhìn ra “tư duy” đằng sau và biết câu lệnh đơn thuần nhất để giải quyết: người mới có khi phải làm “bằng tay” cả khối công việc đó trong một vài tháng để chỉ hiểu được “tư duy” ẩn giấu, nhưng người đã biết thì chỉ cần 1 câu lệnh như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; là giải quyết xong công việc.&lt;/p&gt;

&lt;p&gt;Bạn thử nghĩ xem, nếu chỉ cần 1 vài giây là chạy xong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhưng nếu bạn không biết và phải làm theo nguyên tắc: tức là chi tiết hóa và làm toàn bộ chi tiết của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bằng tay thì liệu 1 tháng có đủ không?&lt;/p&gt;

&lt;p&gt;Vì vậy cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;. Chi tiết hóa giúp nhận ra vấn đề là gì, sau khi nắm rõ vấn đề, trừu tượng hóa giúp nhận ra “à với công việc này, thì sử dụng công cụ này sẽ chỉ cần 1 vài dòng lệnh là giải quyết vấn đề”.&lt;/p&gt;

&lt;p&gt;Chỉ chi tiết hóa thôi thì sẽ bị sa đà vào tiểu tiết, lãng phí công số.
Chỉ trừu tượng hóa thôi thì sẽ có rủi ro là bị sai hướng vì không nắm rõ chi tiết.
Trừu tượng hóa trước thì sẽ bị sai hướng dẫn đến chi tiết hóa hoàn toàn sai lệch.&lt;/p&gt;

&lt;p&gt;Vì vậy chỉ có cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-devil-is-in-the-details&quot;&gt;The devil is in the details&lt;/h1&gt;

&lt;p&gt;Tại sao trừu tượng hóa trước thì không tốt? Đơn giản thôi: bởi để migrate tính năng, ngoài &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì còn có &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt;, nếu không chi tiết bài toán cũng như sự khác biệt giữa 2 câu lệnh thì có thể đi sai hướng và dùng sai công cụ.&lt;/p&gt;

&lt;h2 id=&quot;git-merge&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/git-merge.svg&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;
Đầu tiên chúng ta sẽ tìm hiểu cách thông dụng nhất và hay được khuyến khích dùng nhất để giải bài toán của chúng ta.
Bản chất của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì cũng như hình vẽ bên: tạo 1 commit mới hẳn và chuyển tất cả tính năng của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào đó.
Đây là lựa chọn mặc định của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;, bạn có thể thay đổi bằng thêm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--squash&lt;/code&gt;.
Chi tiết câu lệnh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì như bên dưới có 2 options mặc định là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ff&lt;/code&gt; cho fast-forward và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--commit&lt;/code&gt; (tức là tạo commit mới hay là merge commit).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git merge &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;...]
   or: git merge &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
   or: git merge &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show a diffstat at the end of the merge
    &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;                show a diffstat at the end of the merge       
    &lt;span class=&quot;nt&quot;&gt;--summary&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;synonym to &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;n&amp;gt;]           add &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at most &amp;lt;n&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; entries from shortlog to merge commit message
    &lt;span class=&quot;nt&quot;&gt;--squash&lt;/span&gt;              create a single commit instead of doing a merge
    &lt;span class=&quot;nt&quot;&gt;--commit&lt;/span&gt;              perform a commit &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;the merge succeeds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--edit&lt;/span&gt;            edit message before committing
    &lt;span class=&quot;nt&quot;&gt;--cleanup&lt;/span&gt; &amp;lt;mode&amp;gt;      how to strip spaces and &lt;span class=&quot;c&quot;&gt;#comments from message&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff&lt;/span&gt;                  allow fast-forward &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff-only&lt;/span&gt;             abort &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fast-forward is not possible
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--verify-signatures&lt;/span&gt;   verify that the named commit has a valid GPG signature
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          merge strategy to use
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;&lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value&amp;gt;
                          option &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;selected merge strategy
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--message&lt;/span&gt; &amp;lt;message&amp;gt;
                          merge commit message &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a non-fast-forward merge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &amp;lt;path&amp;gt;     &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;message from file
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         be more verbose
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be more quiet
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; but leave index and working tree alone
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue &lt;/span&gt;the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--allow-unrelated-histories&lt;/span&gt;
                          allow merging unrelated histories
    &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt;            force progress reporting
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG sign commit
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;--overwrite-ignore&lt;/span&gt;    update ignored files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           bypass pre-merge-commit and commit-msg hooks
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vậy quá trình sẽ xảy ra suôn sẻ? Đương nhiên conflict có thể xảy ra và dev sẽ phải resolve bằng tay, sau đó thì dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --continue&lt;/code&gt; để tiếp tục merge.
Trong trường hợp đang merge mà gặp phải tình huống conflict không thể giải quyết được thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --abort&lt;/code&gt; sẽ đưa bạn về thời điểm trước khi merge.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; đương nhiên là điều không mong muốn, mà điều mong muốn là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; đến khi xong.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhìn chung là 1 quy trình an toàn &lt;strong&gt;nếu bạn chịu khó làm đến cùng&lt;/strong&gt;. 
Nếu mới gặp conflict đầu tiên bạn đã sợ hãi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; ngay thì sẽ không bao giờ đi đến cùng được.
Đồng thời quy trình sẽ rất tự động nếu 2 branches không conflict nhiều.
Vì vậy, trước khi quyết định có merge hay không thì tốt nhất nên điều tra sơ xem có nhiều file trùng nhau giữa lịch sử 2 branches với base không?
Nếu nhìn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; sơ mà thấy khác nhau nhiều quá là có lẽ … không nên cho phép merge.
Bởi như vậy không khác gì làm bằng tay (cứ tí lại gặp conflict phải resolve)!&lt;/p&gt;

&lt;p&gt;Tuy nhiên, so với giải pháp tiếp theo mà chúng ta giới thiệu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; có ít rủi ro gặp conflict hơn và nhìn chung số lần resolve chỉ là $\leq 1$, nên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; luôn luôn là giải pháp ưu tiên cho bài toán của chúng ta.&lt;/p&gt;

&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/git-rebase.svg&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;
Một lựa chọn khác cho bài toán của chúng ta là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;.
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; sẽ không tạo ra commit mới nào cả mà sẽ sửa lại lịch sử git của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/strong&gt;
Như hình vẽ bên trái, bạn thấy rõ là các commit của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; sẽ được bố trí xen kẽ theo thứ tự thời gian vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bắt đầu từ commit đầu tiên của feature branch thì thực hiện merge và nếu gặp conflict thì dev phải resolve bằng tay rồi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt;.
Cũng như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bạn có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; để quay lại trạng thái ban đầu nếu … sợ!
Bạn cũng có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt;, nhưng nhớ là nếu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; dọn dẹp để đưa branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; về trạng thái ban đầu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt; sẽ để lại mớ hỗn độn nguyên xi đó.&lt;/p&gt;

&lt;p&gt;Trong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì dù 2 branches conflict nhiều thế nào thì cũng chỉ cần 1 merge commit để chứa tất cả.
Nhưng bạn thấy đấy với &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; số lần conflict có thể tỷ lệ thuận với số commit của hai branches.
Và công việc sẽ không khác gì bằng tay nếu hai branches conflict nhiều!
&lt;strong&gt;Nhìn chung đây là cách làm nguy hiểm hơn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; rất nhiều.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bạn có thể dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; để chọn lựa những commit muốn bỏ vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; nếu không phải tất cả mọi commit trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; đều có giá trị với bạn.
Sau khi chỉnh sửa lịch sử thì bạn có thể cập nhật branch bằng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt; | &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;upstream&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]]
   or: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt;] &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]
   or: git rebase &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;revision&amp;gt;     rebase onto given branch instead of upstream
    &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;           use the merge-base of upstream and branch as the current base
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           allow pre-rebase hook to run
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be quiet. implies &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         display a diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer to each commit
    &lt;span class=&quot;nt&quot;&gt;--committer-date-is-author-date&lt;/span&gt;
                          make committer &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;match author &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reset-author-date&lt;/span&gt;   ignore author &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;and use current &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;n&amp;gt;                passed to &lt;span class=&quot;s1&quot;&gt;&apos;git apply&apos;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ignore-whitespace&lt;/span&gt;   ignore changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;whitespace
    &lt;span class=&quot;nt&quot;&gt;--whitespace&lt;/span&gt; &amp;lt;action&amp;gt;
                          passed to &lt;span class=&quot;s1&quot;&gt;&apos;git apply&apos;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--force-rebase&lt;/span&gt;    cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt;               cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt;                skip current patch and &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort and check out the original branch
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                abort but keep HEAD where it is
    &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;           edit the todo list during an interactive rebase
    &lt;span class=&quot;nt&quot;&gt;--show-current-patch&lt;/span&gt;  show the patch file being applied or merged
    &lt;span class=&quot;nt&quot;&gt;--apply&lt;/span&gt;               use apply strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--merge&lt;/span&gt;           use merging strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;the user edit the list of commits to rebase
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--empty&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;drop,keep,ask&lt;span class=&quot;o&quot;&gt;}&amp;gt;&lt;/span&gt;
                          how to handle commits that become empty
    &lt;span class=&quot;nt&quot;&gt;--autosquash&lt;/span&gt;          move commits that begin with squash!/fixup! under &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG-sign commits
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     add &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lines after each commit of the editable list
    &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--rebase-merges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;mode&amp;gt;]
                          try to rebase merges instead of skipping them
    &lt;span class=&quot;nt&quot;&gt;--fork-point&lt;/span&gt;          use &lt;span class=&quot;s1&quot;&gt;&apos;merge-base --fork-point&apos;&lt;/span&gt; to refine upstream
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          use the given merge strategy
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;option&amp;gt;
                          pass the argument through to the merge strategy
    &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt;                rebase all reachable commits up to the root&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reschedule-failed-exec&lt;/span&gt;
                          automatically re-schedule any &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; that fails
    &lt;span class=&quot;nt&quot;&gt;--reapply-cherry-picks&lt;/span&gt;
                          apply all changes, even those already present upstream
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nói chung chỉnh sửa lịch sử là quá trình rất nguy hiểm!
Vì vậy cần chi tiết hóa trước để tránh đi theo những cách bất thường, sau đó trừu tượng hóa để tìm ra công cụ tối ưu.&lt;/p&gt;

&lt;h1 id=&quot;lời-kết&quot;&gt;Lời kết&lt;/h1&gt;

&lt;p&gt;Bài viết lấy ví dụ về bài toán migrate tính năng từ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bạn nên nhớ những Gitflow thực tế sẽ còn phức tạp hơn với những quy tắc như chỉ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; mới được merge vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, tuy nhiên đó là chủ đề khác.
Ngoài ra, nếu bài toán của bạn là bất thường, đòi hỏi phải edit history thì có thể bạn phải dùng rebase.
Nhưng nhìn chung trong các trường hợp &lt;strong&gt;bình thường&lt;/strong&gt;, tôi thấy hầu như đều dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; tức là tạo ra merge &lt;strong&gt;commit mới hẳn&lt;/strong&gt; và chuyển hết tính năng cần thiết vào.
Thêm nữa, đây là migrate &lt;strong&gt;tính năng&lt;/strong&gt; chứ không chỉ là files hay tài nguyên, tức là các tính năng được implement trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; phải tái hiện như thế trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nói chung tạo cái mới thì tốt hơn!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 08 Oct 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/git-merge-rebase/</link>
        <guid isPermaLink="true">https://wanted2.github.io/git-merge-rebase/</guid>
        
        <category>git</category>
        
        <category>gitflow</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>C4 diagrams for software architecture visualization - Context, Containers, Components, and Code -</title>
        <description>&lt;p&gt;Using MS Word and Excel, an engineer can describe the system in language and visuals.
Such conventional methodologies can be sufficient for small architecture with few components.
When the software system scales and changes frequently, maintaining records of the architecture by documents can be tedious.
Hence, the lack of interaction in conventional document methods may present a stiff learning curve for a new member to the project team.
To cope with these challenges, the &lt;strong&gt;C4 diagram model&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, &lt;a class=&quot;citation&quot; href=&quot;#brown2013software&quot;&gt;[1]&lt;/a&gt;&lt;/strong&gt; was created to give interactive views of the software architectures.
Systems are modeled at four different levels: system context, containers, components, and code.
These levels are represented by diagrams.
Intuitively, we can see the C4 diagrams as large visualization systems in which engineers can zoom in and out to see the details and the big picture.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;the-c4-model&quot;&gt;The C4 model&lt;/h1&gt;

&lt;h2 id=&quot;the-cure-of-representation&quot;&gt;The cure of representation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Knowledge sharing&lt;/strong&gt; is important in software projects.
Using representations like documents and diagrams, teams can keep the understanding of the product identically among team members.
Also, having such powerful representations can keep stakeholders motivated.
A good representation of the software projects, especially the architectures, helps audiences to capture the mechanism of the project at a glance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good representation should be lightweight but doesn’t omit any aspects of the software product. It should contain as many details as possible but also must be compact and fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had experiences in several projects where knowledge sharing is important.
People realized the need, and they tried to share by different means: verbal conversations (i. e., meetings or discussions), visual communications (presentations and diagrams), and textual things (documents by MS Office, notes, …).
However, things will be like “a ton of documents” have been produced, and new members need to read all when joining the project.
Then when a business staff wants to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short and compact description&lt;/code&gt; to put in presentations (and will give the presentation to the clients or investors), someone will need to do the &lt;strong&gt;summarization&lt;/strong&gt; after reading the whole bundle.
Such textual summary was a good means for knowledge sharing, but the compression ratio was not quite good: several sentences can capture only some aspects of the projects, and then QA sections always come for clients and members to understand more.&lt;/p&gt;

&lt;div style=&quot;width: 40%; float: right; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0b/1913_Piqua_Ohio_Advertisement_-_One_Look_Is_Worth_a_Thousand_Words.jpg&quot; /&gt;
&lt;p&gt;1913 Piqua Ohio Advertisement - One Look Is Worth a Thousand Words. Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words#/media/File:1913_Piqua_Ohio_Advertisement_-_One_Look_Is_Worth_a_Thousand_Words.jpg&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Another direction to find a compact representation is using visual information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A picture is worth a thousand words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diagrams and interactions are always good things. Some studies have shown that children will learn faster by visual representations like pictures and interesting pictures.
Finding such a compact and meaningful visual representation also needs to compress the whole architecture into small diagrams which are organized hierarchically.
In other words, architects who find such representations also need to refine, prune and search for compact architectures to put into the compact diagrams.&lt;/p&gt;

&lt;div style=&quot;width: 60%; float: left; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://c4model.com/img/c4-overview.png&quot; /&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://c4model.com/&quot;&gt;c4model.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Therefore, the search for good representations faces the tradeoff between the learning cost and the compactness of representations.
&lt;strong&gt;What C4 model provides is a compact, interactive and hierarchical representation of any software architecture.&lt;/strong&gt;
The model divides the architectural diagrams into four levels: context, containers, components, and code.
Low-level representations such as code and components represent details for implementations and maintenance.
Thus, they should be used by developers.
High-level representations such as context and containers represent an overview of the architecture such as system diagrams and container architecture (container here is not Docker!).&lt;/p&gt;

&lt;p&gt;Another aspect of a good representation is &lt;strong&gt;handling of changes&lt;/strong&gt;.
Projects always change: requirements change, designs change, people change, code change, architectures change, .etc.
Then the representations will change.
Having a &lt;strong&gt;general model&lt;/strong&gt; which is valid for many software architectures is a challenge.
Neither searching for such an architecture can be done soon, but for the short-term thinking, we need a representation that needs to change only a little even when the architectures change a lot.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good representation must be not only robust to changes in micro-level details (code and components designs) but also persistent to changes at macro-level architectures and management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;metamodel-and-notations&quot;&gt;Metamodel and notations&lt;/h2&gt;

&lt;p&gt;The author of C4 model &lt;strong&gt;Simon Brown&lt;/strong&gt; once talked about the invention as follows.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase. 
It’s a way to create maps of your code, at various levels of detail, in the same ways you would use something like Google Maps to zoom in and out of an area you are interested in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although primarily aimed at software architects and developers, the C4 model provides a way for software development teams to efficiently and effectively communicate their software architecture at different levels of detail, telling different stories to different types of audiences when doing up-front design or retrospectively documenting an existing codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The C4 model consists of a hierarchical set of software architecture diagrams for context, containers, components, and code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;elements-and-relationships&quot;&gt;Elements and relationships&lt;/h3&gt;
&lt;p&gt;The following elements and relationships form the diagrams in C4.
Notations and metamodel are described.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Terms&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Notation&lt;/th&gt;
      &lt;th&gt;Parent&lt;/th&gt;
      &lt;th&gt;Properties&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Person&lt;/td&gt;
      &lt;td&gt;A person represents one of the human users of your software system (e. g., roles, personas, etc.).&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-person.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Name, Description, Location (Internal or External)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Software system&lt;/td&gt;
      &lt;td&gt;A software system is the highest level of abstraction and describes something that delivers value to its users, whether they are human or not. It should be something large, contains all smaller levels of abstractions such as software containers.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-software-system.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Name, Description, Location (Internal or External), The set of containers that make up the software system&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Container&lt;/td&gt;
      &lt;td&gt;An application or data store. A container is essentially a context or boundary inside which some code or some data is stored.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-container.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;A software system&lt;/td&gt;
      &lt;td&gt;Name, Description, Technology, The set of components within the container&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Component&lt;/td&gt;
      &lt;td&gt;A component is a grouping of related functionality encapsulated behind a well-defined interface.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-component.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;A container&lt;/td&gt;
      &lt;td&gt;Name, Description, Technology, The set of code elements (e. g. classes, interfaces, etc.) that the component is implemented by&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code&lt;/td&gt;
      &lt;td&gt;This is the lowest level in C4. The diagrams here show the details of code elements (e. g., classes, interfaces, objects, functions, etc.).&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;A component&lt;/td&gt;
      &lt;td&gt;Name, Description, Fully qualified type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Relationship&lt;/td&gt;
      &lt;td&gt;Relationships are permitted between any elements in the model in either direction.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-relationship.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Description and Technology&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;views&quot;&gt;Views&lt;/h3&gt;

&lt;p&gt;The C4 model consists of 4 basic views with respect to 4 levels of diagrams.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;View type&lt;/th&gt;
      &lt;th&gt;Scope&lt;/th&gt;
      &lt;th&gt;Permitted elements&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1. System Context&lt;/td&gt;
      &lt;td&gt;A software system.&lt;/td&gt;
      &lt;td&gt;Software systems, People&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-SystemContext.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2. Container&lt;/td&gt;
      &lt;td&gt;A software system&lt;/td&gt;
      &lt;td&gt;Software systems, People, Containers within the software system in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Containers.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3. Component&lt;/td&gt;
      &lt;td&gt;A container&lt;/td&gt;
      &lt;td&gt;Software systems, People, Other containers within the parent software system of the container in scope, Components within the container in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Components.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4. Code&lt;/td&gt;
      &lt;td&gt;A component&lt;/td&gt;
      &lt;td&gt;Code elements (e. g., classes, interfaces, etc.) that are used to implement the component in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Classes.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System Context diagrams&lt;/strong&gt; describe &lt;strong&gt;business usecases&lt;/strong&gt; in which the interaction between users (people) and the software system is visualized. By seeing system context, stakeholders catch the key use-cases of the system, how end-users will use the system, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Container diagrams&lt;/strong&gt; visualize the architecture of each container.
Formally, it is a diagram of users and containers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Component diagrams&lt;/strong&gt; visualize the internal architecture of a container with components are atomic elements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code diagrams&lt;/strong&gt; show classes, interfaces, objects, and relationships. One can use UML diagrams to visualize. The class diagram or the ER diagram can be examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;supplementary-diagrams&quot;&gt;Supplementary diagrams&lt;/h2&gt;

&lt;p&gt;Besides four basic views, there are several supplementary views for the C4 model to capture the dynamic and the big picture of software systems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;System Landscape diagram&lt;/strong&gt; shows the target software systems in a landscape with other related systems.
For example, the target system is an Internet Banking System.
It needs to interact with other systems in the banks like Email Systems, Mainframe Banking Systems, and other roles like Customer Service Staff and Back Office Staff.
To do this, add another diagram that sits “on top” of the C4 diagrams to show the system landscape from an IT perspective.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width: 50%; float: left; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://c4model.com/img/bigbankplc-SignIn.png&quot; /&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://c4model.com/&quot;&gt;c4model.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Dynamic diagram&lt;/strong&gt; considers how elements in a static model collaborate at runtime to implement a user story, use case, feature, etc.
One can reuse the UML communication diagram to show it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Deployment diagram&lt;/strong&gt; is based on the UML deployment diagram.
It illustrates how software systems and/or containers in the static model are mapped to infrastructure.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;Tools for diagramming can be &lt;a href=&quot;https://c4model.com/&quot;&gt;a lot&lt;/a&gt;.
For only diagramming, I would like to recommend the &lt;a href=&quot;https://www.diagrams.net/&quot;&gt;Diagrams.net&lt;/a&gt;, which is very convenient for drawing system architecture.
It has many toolboxes for drawing deployment diagrams, AWS/GCP/Azure Cloud architectures, etc.&lt;/p&gt;

&lt;p&gt;For modeling the software architectures with diagramming, one can refer to Archi&lt;sup id=&quot;fnref:1:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-tutorial&quot;&gt;A tutorial&lt;/h2&gt;

&lt;p&gt;One way to learn to draw is through the tutorial video.
The following tutorial introduces all about C4 model by the author with a part of PlantUML use-case with C4.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/x2-rSnhpw0g&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The C4 model solved the problem of a compact representation for software architectures without disregarding any aspects of the product.
The model was designed for Agile projects and to keep the team communicating better with team members as well as stakeholders.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;brown2013software&quot;&gt;Brown, S. 2013. Software architecture for developers. &lt;i&gt;Coding the Architecture&lt;/i&gt;. (2013).&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/brown2013software/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://c4model.com/&quot;&gt;The C4 model for visualising software architecture&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.archimatetool.com/&quot;&gt;Archi – Open Source ArchiMate Modelling&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt; &lt;a href=&quot;#fnref:1:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 03 Sep 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/c4-diagrams-software-design/</link>
        <guid isPermaLink="true">https://wanted2.github.io/c4-diagrams-software-design/</guid>
        
        <category>programming</category>
        
        <category>software architecture</category>
        
        <category>visualization</category>
        
        <category>c4 diagrams</category>
        
        <category>diagrams</category>
        
        
        <category>Project Management</category>
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>The Last Pillar: The Liskov Substitution Principle</title>
        <description>&lt;p&gt;In 1988, Barbara Liskov &lt;a class=&quot;citation&quot; href=&quot;#abstraction1988hierarchy&quot;&gt;[1]&lt;/a&gt; wrote about the substitutions of software modules:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is wanted here is something like the following substitution property: If for each object $o_1$ of type $S$ there is an object $o_2$ of type $T$ such that for all programs $P$ defined in terms of $T$, the behavior of $P$ is unchanged when $o_1$ is substituted for $o_2$ then $S$ is a subtype of $T$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;Liskov Substitution Principle (LSP, &lt;a class=&quot;citation&quot; href=&quot;#cleanarch&quot;&gt;[2]&lt;/a&gt;, &lt;a class=&quot;citation&quot; href=&quot;#abstraction1988hierarchy&quot;&gt;[1]&lt;/a&gt;)&lt;/strong&gt; states that a software module should be built up from interchangeable parts.
Any violations of the principle lead to confusion and horrible mistakes in production.
In object-oriented designs, if different classes and modules behave differently, then one should not be the abstraction of the others.
The principle is helpful for designs of inheritance and REST API.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h1&gt;
&lt;p&gt;The following diagram shows a design that conforms LSP.
The interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt; has two implementations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonalLicense&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BusinessLicense&lt;/code&gt;.
Although &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BusinessLicense&lt;/code&gt; has a custom property named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;, both implementations do not have custom behaviors compared to behaviors of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt; (which has only one method: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateFee()&lt;/code&gt;).
Therefore, these implementations are interchangeable as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.
They are subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lsp1.svg&quot; alt=&quot;Billing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Billing&lt;/code&gt; class does not depend on the concrete implementations of the interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;, and this is one of the benefits of LSP.
Both are substitutable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;examples-of-violations&quot;&gt;Examples of violations&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Violations are bad! We should learn to avoid these negativities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous section, we learn a &lt;strong&gt;positive&lt;/strong&gt; example of the Liskov Substitution Principle (LSP).
In this section, we will learn &lt;strong&gt;negative&lt;/strong&gt; examples where LSP is violated.&lt;/p&gt;

&lt;h2 id=&quot;ducks-and-toys&quot;&gt;Ducks and Toys&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/lsp2.svg&quot; style=&quot;float: left; width: 60%; margin: 15px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following design violates the LSP.
In this design, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt; can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quack()&lt;/code&gt; like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt;.
However, when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remainBatteryAmount=0&lt;/code&gt;, it can raise an exception!
Neither the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt; can raise such an exception, so the behaviors are different.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt; is not a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just quacking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPECT_NO_THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code will work fine with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt; but let us substitute it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DuckToy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;battery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;battery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// throw an exception&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just quacking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remainBatteryAmount = 0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPECT_NO_THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;duckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this will throw an exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In class design, conforming LSP is more than drawing a diagram but also enforces the code: programmers must write a clean inheritance.&lt;/p&gt;

&lt;h2 id=&quot;an-api-design&quot;&gt;An API design&lt;/h2&gt;

&lt;p&gt;Assume that we have a taxi driver management system.
Each driver identity has a dispatch URI in the driver database.
For example, we have a driver Bob, and the dispatch URI is:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aificorp.in/driver/Bob
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When there is a new request from a customer assigned to Bob, the system dispatches all information needed for a pickup like&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;aificorp.in/driver/Bob/
  pickupAddress/%s/pickupTime/%s/destination/%s
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aificorp.in&lt;/code&gt; is the domain of a partner company, and it is different among partners.
Assume that developers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aificorp.in&lt;/code&gt; are doing their job good.
The problem arises when a new developer joins the team in a partner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.com&lt;/code&gt;, and the new member dispatches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination&lt;/code&gt; by the abbreviation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dest&lt;/code&gt;!&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;acme.com/driver/Alice/
  pickupAddress/%s/pickupTime/%s/dest/%s
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;What is the problem?&lt;/strong&gt;
That is, now we need to add an exception in our system for this partner only:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partnerDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acme.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// handle the exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now our dispatches table is as follows.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;URI&lt;/th&gt;
      &lt;th&gt;Dispatch format&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Acme.com&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pickupAddress/%s/pickupTime/%s/dest/%s&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pickupAddress/%s/pickupTime/%s/destination/%s&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And so, our architect has had to add a significant and complex mechanism to deal with the fact that the interfaces of the restful services are not all substitutable.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;abstraction1988hierarchy&quot;&gt;Liskov, B. 1988. Data Abstraction and Hierarchy. &lt;i&gt;SIGPLAN Notices&lt;/i&gt;. 23, 5 (1988), 17–34.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/abstraction1988hierarchy/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;cleanarch&quot;&gt;Martin, R.C. 2017. &lt;i&gt;Clean Architecture - A Craftman’s Guide to Software Structure and Design&lt;/i&gt;. Prentice Hall.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/cleanarch/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Sun, 29 Aug 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/liskov-substisution-principle/</link>
        <guid isPermaLink="true">https://wanted2.github.io/liskov-substisution-principle/</guid>
        
        <category>programming</category>
        
        <category>design principles</category>
        
        <category>substitution principle</category>
        
        <category>liskov substitution principle</category>
        
        
        <category>Project Management</category>
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>Aggregation and Segregation</title>
        <description>&lt;p&gt;&lt;strong&gt;Interface Segregation Principle (ISP) &lt;a class=&quot;citation&quot; href=&quot;#cleanarch&quot;&gt;[1]&lt;/a&gt;&lt;/strong&gt; is one of the five pillars in SOLID design principles.
The main spirit of ISP is that user interfaces shouldn’t rely on features or operations they don’t need.
Therefore, instead of designing an aggregated interface that contains functions for various member classes, we should segregate the functions into several sub-interfaces, for which each type of user only needs to a specific feature.
When other features change, the current feature is not affected, and the user service will not be interrupted.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/isp1.svg&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;
Let’s consider the following interface.
There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class which has three operations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; to calculate money, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt; for walking, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt; for riding.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police&lt;/code&gt; class only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; operation to calculate the money they collected from criminals.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pedestrian&lt;/code&gt; class only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt;, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rider&lt;/code&gt; only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt;.
However, in this &lt;strong&gt;aggregated design &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt;&lt;/strong&gt;, all actors have access to functions they don’t need.
The implementation of this aggregation can be found below:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _AGGREGATION_H_
#define _AGGREGATION_H_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Calculating ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Walking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Riding ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the main function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;aggregation.hpp&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can find the result:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buld &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Debug/aggregation.exe
Calculating ...
Walking ...
Riding ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;segregation&quot;&gt;Segregation&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/isp2.svg&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;
The &lt;strong&gt;Interface Segregation Principle (ISP, &lt;a class=&quot;citation&quot; href=&quot;#cleanarch&quot;&gt;[1]&lt;/a&gt;)&lt;/strong&gt; states that the aggregated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class in the previous section was not good enough:
whenever changes happen in one function, it will force the whole to be re-compiled, and then affect all other functions and actors.
The ISP guides us that the following design will be better.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police&lt;/code&gt; interface (actually, in C++ we don’t have interfaces, but we can use abstract class instead), or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoliceInst&lt;/code&gt; class can have only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function and doesn’t rely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt;.
The aggregation can be persisted by making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class inherited from all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police, Pedestrian&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rider&lt;/code&gt;.
Let’s see the implementation:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _SEGREGRATION_HPP_
#define _SEGREGRATION_HPP_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Police&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Calculating ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pedestrian&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Walking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Riding ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the main function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;segregation.hpp&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Human also can calculate, walk and ride:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we see the result again:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buld &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Debug/segregation.exe
Calculating ...
Walking ...
Riding ...
Human also can calculate, walk and ride:
Calculating ...
Walking ...
Riding ...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This design is perfect as it keeps the aggregation and resolves the segregation issues at the same time.&lt;/p&gt;

&lt;p&gt;A sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;VERSION 3.0&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;isp CXX&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;aggregation main.cpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;segregation main_seg.cpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;cleanarch&quot;&gt;Martin, R.C. 2017. &lt;i&gt;Clean Architecture - A Craftman’s Guide to Software Structure and Design&lt;/i&gt;. Prentice Hall.&lt;/span&gt;&lt;a class=&quot;details&quot; href=&quot;https://wanted2.github.io/bibliography/cleanarch/&quot;&gt;Details&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Sat, 28 Aug 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/aggregation-segregation/</link>
        <guid isPermaLink="true">https://wanted2.github.io/aggregation-segregation/</guid>
        
        <category>programming</category>
        
        <category>design principles</category>
        
        <category>interface segregation principle</category>
        
        <category>aggregation</category>
        
        <category>segregation</category>
        
        
        <category>Project Management</category>
        
        <category>Software Engineering</category>
        
      </item>
    
      <item>
        <title>Phân tích xu hướng: Tại sao các hiện tượng thành công gần đây lại ít có phiên bản web hơn ứng dụng mobile?</title>
        <description>&lt;p&gt;Cũng phải 9-10 năm trước đây, khi mới bắt đầu làm các nền tảng với mong muốn xây dựng “một phút huy hoàng rồi vụt tắt”, tôi hay thấy các nhà phát triển lựa chọn cùng lúc phát triển 3 phiên bản: Web, mobile (Android/iOS) và một bản có thể desktop.
Đó là những năm 2012 và việc đó chủ yếu để tăng độ phủ của dịch vụ.
Nhưng năm nay là năm 2021, và chúng ta không thể hướng dẫn các em trẻ bằng bộ não của những “ông già” mà thời huy hoàng từ những năm 2012.
Năm 2021, chúng ta cũng cần cập nhật và nhìn lại những ứng dụng thành công trong 2 năm qua của kỷ nguyên COVID, tôi chợt nhận ra:
ứng dụng ClubHouse thành công gọi vốn vòng C tương đương 100 triệu đô lẻ nhưng không hề cung cấp giao diện web, chỉ toàn ứng dụng mobile.
Ứng dụng na ná thế của Việt Nam là onMic cũng không thèm chơi với web luôn!
Ồ, chúng ta đã già rồi với giới trẻ có lẽ đã không còn mặn mà với việc xây một phiên bản cho desktop browser nữa.
&lt;strong&gt;Năm 2021 phải là thời đại của mobile&lt;/strong&gt;.
Chúng ta có lẽ đã sai, và cũng nên nhìn nhận lại khả năng của mobile apps (native chứ không phải nhúng mấy cái Javascript vớ vẩn)!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;responsive-web-apps-và-mobile-apps&quot;&gt;Responsive web apps và mobile apps&lt;/h1&gt;

&lt;h2 id=&quot;tổng-quan&quot;&gt;Tổng quan&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn0.tnwcdn.com/wp-content/blogs.dir/1/files/2014/11/Smartphone_subs_ericsson.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;By 2020, 90% dân số thế giới trên 6 tuổi (6,1 tỷ người) có sử dụng điện thoại di động. Nguồn: &lt;a href=&quot;http://thenextweb.com/insider/2014/11/18/2020-90-worlds-population-aged-6-will-mobile-phone-report/&quot;&gt;TheNextWeb&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chúng ta luôn tự hỏi tại sao ngày nay lại phải học làm những thứ có thể hiển thị và hoạt động được trên mobile?
Câu trả lời là vì chỉ trong vài năm, số lượng thuê bao di động trên thế giới đã phủ khắp đến 90% dân số thế giới, tính tới 2020.
Điện thoại di động không phải quá khứ hay tương lai mà là hiện tại ngay trước mắt.
Giải pháp để khiến dịch vụ của bạn phủ rộng tới tất cả người dùng di động hiện tại chỉ có hai nhánh chính: &lt;strong&gt;responsive web apps và mobile apps&lt;/strong&gt;.
Những năm 2012, chúng ta, những “ông già” phải phát triển song song 3 phiên bản vì lúc đó tỷ lệ mobile chỉ tầm 1.3 tỷ/6 tỷ dân, tức là khoảng 23% hơn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive web apps&lt;/strong&gt; thì chủ yếu là HTML5/CSS3 có những tinh chỉnh để vừa vặn vào màn hình mobile.
Lợi thế cũng khả rõ ràng:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Một phiên bản cho tất cả người dùng&lt;/strong&gt;. cách làm web apps thì chỉ cần browser và quan trọng nhất là kết nối Internet.
Ngắt mạng là … giải tán!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vận hành và bảo trì đơn giản hơn vì trang web dễ nâng cấp, bảo trì và fix lỗi&lt;/strong&gt;. Người dùng thậm chí còn không nhận được thông báo khi xảy ra nâng cấp.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Phiên bản web rẻ hơn&lt;/strong&gt;. SEO cũng dễ dàng hơn, và bảo trì cũng sẽ rẻ hơn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mobile apps&lt;/strong&gt; là những ứng dụng có thể &lt;strong&gt;cài đặt&lt;/strong&gt; lên điện thoại di động và máy tính bảng.
Ứng dụng di động ưu thế nổi trội sẽ là &lt;strong&gt;trải nghiệm người dùng tốt hơn&lt;/strong&gt;.
Nếu như trang web nhắm tới tìm kiếm người dùng mới (vì vậy không tạo barrier trong cài đặt nâng cấp), thì ứng dụng mobile tập trung vào &lt;strong&gt;người dùng trung thành&lt;/strong&gt;.
Thường không nên nghĩ ứng dụng mobile chỉ là bản clone của web app, nó sẽ là một suy nghĩ sai lầm!
Và cuối cùng cái quan trọng là &lt;strong&gt;push notification&lt;/strong&gt;, đó là ưu thế không thể từ chối của mobile apps.
Ưu thế của mobile apps tập trung vào:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tập trung vào tính năng đặc biệt của nền tảng mobile&lt;/strong&gt;. Ví dụ người dùng Instagram có thể xem ảnh trên web vô tư nhưng để upload họ phải dùng mobile apps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile apps hoạt động trực tiếp với nền tảng, đòi hỏi cài đặt và nhận được những hỗ trợ tốt hơn về security cũng như tình năng nền tảng OS&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile apps có thể hoạt động offline&lt;/strong&gt;. Còn nói thực, tôi cũng làm nhiều với đủ kiểu web apps, web socket, mà nói chung cứ ngắt net là phiền! Không có Internet, đám webapps chỉ để nhìn.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tối ưu hóa trải nghiệm người dùng&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cung cấp các component native của mobile phone như network, voice, …&lt;/strong&gt;. Lập trình web hiện đại với Vue.JS hay reactJS có khá nhiều web component, nhưng nhìn chung cũng có giới hạn và hoạt động cũng không tốt ví dụ khi ngắt net!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Tạo tạm một bảng so sánh tính năng giữ hai sự lựa chọn để bạn đọc tham khảo.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Perspective&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Responsive website&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Mobile app&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Compatibility&lt;/td&gt;
      &lt;td&gt;Mobile version of the site is equally displayed in all browsers, despite the device model.&lt;/td&gt;
      &lt;td&gt;Requires development of several applications for various platforms.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Audience&lt;/td&gt;
      &lt;td&gt;All devices that have access to the Internet.&lt;/td&gt;
      &lt;td&gt;Only smartphones and tablets.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost of entering the market&lt;/td&gt;
      &lt;td&gt;Payments for domain and hosting.&lt;/td&gt;
      &lt;td&gt;Developer licenses in the app stores.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ease of use&lt;/td&gt;
      &lt;td&gt;Doesn’t require download and installation.&lt;/td&gt;
      &lt;td&gt;Requires downloading and installation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working offline&lt;/td&gt;
      &lt;td&gt;Not all devices support.&lt;/td&gt;
      &lt;td&gt;Possible.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Support, updates and bug fixing&lt;/td&gt;
      &lt;td&gt;Easy to update, maintain and fix bugs.&lt;/td&gt;
      &lt;td&gt;Difficult to update and monitor the application after it’s downloaded. Bugs will be fixed only in the next version.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Convenience of regular using&lt;/td&gt;
      &lt;td&gt;Average.&lt;/td&gt;
      &lt;td&gt;Good for regular using.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Personalization&lt;/td&gt;
      &lt;td&gt;Average. Mobile site is more focused on the service.&lt;/td&gt;
      &lt;td&gt;Good. App is more aimed at the individual user.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;giới-thiệu-ứng-dụng-voice-chat-room-clubhouse&quot;&gt;Giới thiệu ứng dụng voice chat room ClubHouse&lt;/h1&gt;

&lt;p&gt;Thế giới đang chuyển dần từ service-centric sang user-centric, từ web-based sang mobile-based.
Hiện tượng ClubHouse nổi lên từ thàng 4/2020, tức là mới hơn 1 năm.
Chúng ta sẽ nhìn nhận lại giá trị của ClubHouse trong ngành dọc: tức là các mạng xã hội âm thanh.&lt;/p&gt;

&lt;h2 id=&quot;mạng-xã-hội-âm-thanh&quot;&gt;Mạng xã hội âm thanh&lt;/h2&gt;

&lt;p&gt;Mạng xã hội âm thanh là mạng xã hội dựa trên việc chia sẻ âm thanh chứ không phải hình ảnh hay video.
Các mạng xã hội chia sẻ âm nhạc như Zing MP3, hay Spotify đã tồn tại từ lâu và với hình thức &lt;strong&gt;chia sẻ file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Một đặc điểm của ClubHouse chính là việc chia sẻ thông qua nói chuyện tức là âm thanh cuộc nói chuyện được chia sẻ.
Người tham gia không nhìn thấy mặt nhau là đặc điểm khiến cho người dùng có thể tập trung vào nội dung nói chuyện hơn là nhìn sắc mặt nhau.&lt;/p&gt;

&lt;h2 id=&quot;hiện-tượng-clubhouse&quot;&gt;Hiện tượng ClubHouse&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tại sao ClubHouse lại thành hiện tượng như vậy?&lt;/strong&gt;
Bạn nên nhớ khi đạt giá trị 100 triệu đô, Facebook đã sở hữu 5,5 triệu người dùng vào năm 2005.
Nhưng cùng mức giá ấy, ClubHouse chỉ có vỏn vẹn &lt;strong&gt;5000 người dùng vào năm 2020&lt;/strong&gt;.
Thời cổ đại nếu một đội quân 5000 người dù dũng mãnh thế nào mà được xếp ngang hàng với đội quân 5,5 triệu người thì đó cũng là chuyện khá hiếm.
Twitter khi đạt giá trị 100 triệu đô cũng có 1,2 triệu người dùng, và Instagram cũng có 1,7 triệu MAU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/fomo.png&quot; alt=&quot;FOMO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vậy cái gì làm nên giá trị của ClubHouse?&lt;/strong&gt;
ClubHouse đã thiết kế UX tức là trải nghiệm người dùng theo nguyên lý FOMO (Fear of missing out, tức là cảm giác bị lãng quên), khiến cho engagement của người dùng được nâng cao.
Thiết kế này đòi hỏi 3 tính năng nhất quyết bị loại bỏ (không được implement) là: chức năng mời, chức năng lưu trữ archive, và chức năng nhận xét comment.
Việc thiếu 3 chức năng, cùng với việc thiết kế room chat để chỉ có thể nghe người mình muốn nói chuyện vào lúc nửa đêm khiến người dùng càng gắn bó với app.
Bởi vì họ luôn ở trạng thái cảm thấy bị miss mất cái gì đó nên sẽ không dám đóng app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vậy tiềm năng của ClubHouse có thực sự đáng giá?&lt;/strong&gt;
Cái này có lẽ phải để thời gian trả lời.
Cá nhân tôi khi dùng thử phát hiện ra một điểm tuyệt vời là thiết kế UX rất đơn giả và ưu việt.
Họ không thiết kế kiểu ôm đồm mọi tính năng, mà tất cả đều tuân theo một thiết kế UX có trọng tâm.
FOMO là một ví dụ về việc: không phải cứ implement hết mọi tính năng thì sẽ tốt mà đôi khi bỏ đi không thèm implement một số tính năng lại đem lại trải nghiệm tuyệt vời.
Thế nên cũng không cần làm hết đâu!
Ví dụ họ cũng không cần web vì đúng là với chiến thuật của họ thì mấy cái Vue với React cũng chả để làm gì cả (90% dân số thế giới đã có mobile trên tay và native app thì còn lo gì ngắt mạng) :yum:&lt;/p&gt;

&lt;p&gt;Tại thời điểm ClubHouse gọi được 100 triệu đô vốn đầu tư thì cũng có nhiều ý kiến phản hồi là tại sao lại giá cao thể trong khi chỉ có 5000 users?
Hãy để thời gian minh chứng cho kết cục của startup này.
Tuy nhiên, cái chúng ta học được ở đây đó là &lt;strong&gt;tối ưu trải nghiệm người dùng trên mobile đang là xu hướng&lt;/strong&gt;, và web sẽ không làm được việc đó.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Aug 2021 00:00:00 +0900</pubDate>
        <link>https://wanted2.github.io/mobile-and-web/</link>
        <guid isPermaLink="true">https://wanted2.github.io/mobile-and-web/</guid>
        
        <category>business</category>
        
        <category>mobile apps</category>
        
        <category>web apps</category>
        
        <category>single page app</category>
        
        
        <category>Tiếng Việt, 日本語</category>
        
      </item>
    
  </channel>
</rss>
