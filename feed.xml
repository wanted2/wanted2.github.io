<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://wanted2.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://wanted2.github.io/" rel="alternate" type="text/html" /><updated>2021-11-28T13:53:12+09:00</updated><id>https://wanted2.github.io/feed.xml</id><title type="html">AiFi</title><subtitle>The official AiFi</subtitle><author><name>Tuan Nguyen-Anh</name></author><entry><title type="html">Why lean startups love fullstack engineers?</title><link href="https://wanted2.github.io/non-english/se/pm/2021/11/27/fullstask-engineer-and-lean-startup.html" rel="alternate" type="text/html" title="Why lean startups love fullstack engineers?" /><published>2021-11-27T00:00:00+09:00</published><updated>2021-11-27T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/pm/2021/11/27/fullstask-engineer-and-lean-startup</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/pm/2021/11/27/fullstask-engineer-and-lean-startup.html">&lt;p&gt;&lt;img src=&quot;https://vertical-innovation.com/wp-content/uploads/2020/05/Lean-startup-VerticalInnovation.jpg&quot; alt=&quot;lean&quot; /&gt;
&lt;em&gt;Source &lt;a href=&quot;https://vertical-innovation.com&quot;&gt;Vertical Innovation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lean&lt;/strong&gt; is the most widespread management philosophy of our time and is currently present in every industry, yet the concept is still vaguely defined and widely misunderstood.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Efficiency paradox&lt;/strong&gt; … the idea of the efficiency paradox, which claims that organisations’ understanding of “true efficiency” is incorrect. It suggests that when organisations focus too much on utilising resources efficiently – the traditional and most common form of efficiency – it tends to lead to an increase in the amount of work there is to do. Consequently, the more organisations try to be efficient (being busy), the more inefficient they will actually become (taking care of non-value adding but necessary work). This is Lean addresses how to resolve this paradox.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bắt đầu từ gần 10 năm trước, năm 2011, bởi Eric Ries, Lean đã trở thành một phương pháp luận để cải tiến hiệu suất công việc và số lượng startups là Lean startups ngày càng gia tăng cho thấy sự yêu chuộng dành cho Lean từ cộng đồng khởi nghiệp.
Nếu bạn đã từng có một giai đoạn khủng hoảng: ngày nào cũng bận bịu và phải làm tăng ca (OT) đến tận khuya, hoặc thậm chí phải mang việc về nhà làm, bạn đã rơi vào &lt;strong&gt;efficiency paradox&lt;/strong&gt;: &lt;em&gt;bạn luôn bận rộn, nhưng chả hoàn thành (release) cái gì cả&lt;/em&gt;.
Thực ra vế sau chính là dấu hiệu (triệu chứng bệnh) của efficiency paradox, và khi có triệu chứng bận bịu nhưng chả done cái gì, đó chính là lúc &lt;strong&gt;Lean phải thể hiện value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nếu cải tiến hiệu suất là mục tiêu của Lean, thì cách thức thực hiện lại vô vùng đòi hỏi sự tỷ mỷ chi tiết.
Một trong số những tiêu chí quan trọng để build 1 team khởi nghiệp Lean, chính là sự tồn tại của &lt;strong&gt;cross-functional team&lt;/strong&gt; hay tức là &lt;strong&gt;fullstack engineers&lt;/strong&gt;.
Lý do tại sao là bởi vì như bạn có cái kìm và cái búa, khi cần đóng đinh thì búa sẽ dùng nhiều hơn và kìm hầu như không có việc, nhưng khi cần vặn ốc thì kìm bận bịu nhưng búa chả có việc gì: vậy tại sao không kiếm một cái vừa là kìm vừa là búa?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Trong khởi nghiệp Lean, khi nói đến từ FE mà bạn hiểu là Frontend Engineer thì không có value mấy, phải hiểu là &lt;strong&gt;Fullstack Engineer&lt;/strong&gt; thì mới có nhiều value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;efficiency-paradox-triệu-chứng-bệnh&quot;&gt;Efficiency Paradox: Triệu chứng bệnh&lt;/h1&gt;

&lt;p&gt;Triệu chứng bệnh của efficiency paradox thì không chỉ có mỗi triệu chứng bận mà chả làm ra cái gì như đã nói ở trên.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Triệu chứng 1&lt;/strong&gt;: &lt;strong&gt;Bận mà chả release được cái gì?&lt;/strong&gt; Tức là hiệu suất resource cao gần 100% nhưng lead time (thời gian từ ideas tới release) lại dài mà đôi khi là infinite! Tức là có thể có release nhưng nhìn chung là lead time rất lớn.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Triệu chứng 2&lt;/strong&gt;: &lt;strong&gt;Release nhanh nhưng có nhiều người không có việc.&lt;/strong&gt; Tức là team chia việc và hoàn thiện nhanh, nhưng có nhiều ムダ (tiếng Nhật nghĩa là lãng phí) tức là nhiều bạn chả có việc gì làm, mà nếu cho các bạn ấy làm việc khác thì lại phải ngồi điều tra lại từ đầu, nó lưng chừng dở dang.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dù là triệu chứng 1 hay 2 thì chắc chắn khởi nghiệp đang ở chỗ loay hoay giải quyết bài toán cân bằng hiệu suất sử dụng (tăng hiệu suất sử dụng nhân lực) và tỷ lệ hoàn thiện (rút ngắn thời gian release).&lt;/p&gt;

&lt;h1 id=&quot;lean-startups&quot;&gt;Lean startups&lt;/h1&gt;

&lt;p&gt;Và để giải quyết bài toán hiệu suất, phương pháp cải tiến của Eric Ries bắt đầu từ những năm 2011 mang tên &lt;strong&gt;Lean startups&lt;/strong&gt; là một phương pháp được ưa chuộng gần đây.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ưu điểm lớn nhất của Lean chính là vòng tuần hoàn liên tục &lt;strong&gt;Build-Measure-Learn&lt;/strong&gt; khiến cho team dần trưởng thành và hiệu suất gia tăng.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Teams có thể chưa hoàn chỉnh trong vòng thứ nhất nhưng sẽ &lt;em&gt;learn&lt;/em&gt; và lặp lại quá trình &lt;em&gt;build&lt;/em&gt;, &lt;em&gt;measure&lt;/em&gt; đển khi hoàn thiện.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nhược điểm lớn nhất là việc phụ thuộc quá lớn vào skill của mỗi members: thợ học việc cỡ sinh viên, những nhân viên chỉ biết làm đúng 1 việc frontend hoặc backend, hoặc chỉ biết code mà không làm những quy trình báo cáo, tuyển dụng, … sẽ là chướng ngại mà sớm muộn cũng bị đào thải.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Thiếu tập trung&lt;/strong&gt; là tử địa của Lean. Nếu 1 members trong Lean startups không toàn tâm toàn ý 100% cho startup mà lại phân tâm sang 1 dự án khác 50-50 hoặc 1 cty khác 50-50, Lean chắc chắn fail!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tại sao? Bởi vì vòng quay của Lean đòi hỏi mọi members trong teams phải toàn tâm toàn ý cho việc cải tiến, theo dõi, và đối ứng.
&lt;strong&gt;Chính việc phải toàn tâm toàn ý khiến cho việc cùng lúc chạy 2 dự án là vô vùng khó khăn nếu 1 trong 2 cái là Lean.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;fullstack-engineers-và-cross-functional-teams&quot;&gt;Fullstack engineers và cross-functional teams&lt;/h1&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;ThisisLe25:online&quot;&gt;&lt;i&gt;This is Lean |&lt;/i&gt;. https://thisislean.com/&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="pm" /><category term="project management" /><category term="project lifecycle" /><category term="software development" /><category term="lean stratup" /><category term="this is lean" /><category term="fullstack engineer" /><summary type="html">Source Vertical Innovation Lean is the most widespread management philosophy of our time and is currently present in every industry, yet the concept is still vaguely defined and widely misunderstood. Efficiency paradox … the idea of the efficiency paradox, which claims that organisations’ understanding of “true efficiency” is incorrect. It suggests that when organisations focus too much on utilising resources efficiently – the traditional and most common form of efficiency – it tends to lead to an increase in the amount of work there is to do. Consequently, the more organisations try to be efficient (being busy), the more inefficient they will actually become (taking care of non-value adding but necessary work). This is Lean addresses how to resolve this paradox. Bắt đầu từ gần 10 năm trước, năm 2011, bởi Eric Ries, Lean đã trở thành một phương pháp luận để cải tiến hiệu suất công việc và số lượng startups là Lean startups ngày càng gia tăng cho thấy sự yêu chuộng dành cho Lean từ cộng đồng khởi nghiệp. Nếu bạn đã từng có một giai đoạn khủng hoảng: ngày nào cũng bận bịu và phải làm tăng ca (OT) đến tận khuya, hoặc thậm chí phải mang việc về nhà làm, bạn đã rơi vào efficiency paradox: bạn luôn bận rộn, nhưng chả hoàn thành (release) cái gì cả. Thực ra vế sau chính là dấu hiệu (triệu chứng bệnh) của efficiency paradox, và khi có triệu chứng bận bịu nhưng chả done cái gì, đó chính là lúc Lean phải thể hiện value. Nếu cải tiến hiệu suất là mục tiêu của Lean, thì cách thức thực hiện lại vô vùng đòi hỏi sự tỷ mỷ chi tiết. Một trong số những tiêu chí quan trọng để build 1 team khởi nghiệp Lean, chính là sự tồn tại của cross-functional team hay tức là fullstack engineers. Lý do tại sao là bởi vì như bạn có cái kìm và cái búa, khi cần đóng đinh thì búa sẽ dùng nhiều hơn và kìm hầu như không có việc, nhưng khi cần vặn ốc thì kìm bận bịu nhưng búa chả có việc gì: vậy tại sao không kiếm một cái vừa là kìm vừa là búa? Trong khởi nghiệp Lean, khi nói đến từ FE mà bạn hiểu là Frontend Engineer thì không có value mấy, phải hiểu là Fullstack Engineer thì mới có nhiều value.</summary></entry><entry><title type="html">Quả trứng và con gà: cái nào có trước? - Bất bình đẳng về lương và sản lượng lao động</title><link href="https://wanted2.github.io/non-english/se/pm/ai/2021/11/20/chicken-and-egg-problem.html" rel="alternate" type="text/html" title="Quả trứng và con gà: cái nào có trước? - Bất bình đẳng về lương và sản lượng lao động" /><published>2021-11-20T00:00:00+09:00</published><updated>2021-11-20T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/pm/ai/2021/11/20/chicken-and-egg-problem</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/pm/ai/2021/11/20/chicken-and-egg-problem.html">&lt;iframe width=&quot;100%&quot; height=&quot;680&quot; src=&quot;https://www.epi.org?p=235212&amp;amp;view=embed&amp;amp;embed_template=charts_v2013_08_21&amp;amp;embed_date=20211121&amp;amp;onp=91701&amp;amp;utm_source=epi_press&amp;amp;utm_medium=chart_embed&amp;amp;utm_campaign=charts_v2&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Con gà và quả trứng&lt;/strong&gt; là một bài toán kinh điển trong thống kê học cổ điển liên quan tới &lt;strong&gt;nhân quả (causality)&lt;/strong&gt; và &lt;strong&gt;luân hồi (feedback)&lt;/strong&gt; của các chuỗi thời gian (time series).
Năm 1969, Granger (Nobel kinh tế 2003) xuất bản một seminar paper [1] định tính hóa nhân quả và luân hồi giữa các chuỗi sự kiện thời gian (temporal time series).
Việc kiểm tra nhân quả và luân hồi giữa các chuỗi thời gian được định tính và định lượng thông qua &lt;strong&gt;Granger verification&lt;/strong&gt;.
Năm 1979, Feige và Pearce [2] nghiên cứu về mối quan hệ luân hồi giữa tiền tệ và thu nhập, có sử dụng Granger verification.
Năm 1988, Thurman và Fisher [3] nghiên cứu chuỗi thời gian về sản lượng trứng cũng như chuỗi dữ liệu về số lượng gà trên toàn nước Mỹ để tìm ra quan hệ nhân quả giữa trứng và gà.
Họ sử dụng công thức của Granger và lần đầu tiên kết luận mang tính thống kê rằng &lt;strong&gt;trứng có trước và là nguyên nhân sinh ra gà&lt;/strong&gt;.
Phân tích các chuỗi sự kiện thời gian (time series analysis) và nhân quả/luân hồi giữa các chuỗi là một chủ đề truyền thống của thống kê và kinh tế học.
Gần đây, những nghiên cứu cũng cho thấy sự tồn tại nhân quả giữa &lt;strong&gt;sản lượng lao động và bất bình đăng thu nhập&lt;/strong&gt; hay bài toán &lt;strong&gt;Productivity-Pay Gap&lt;/strong&gt; [4].
Thật thú vị rằng trong 40 năm qua, mặc dù sản lượng lao động bình quân năm tăng 61.8%, nhưng lương của người lao động không hề tăng cao, dẫn tới bất bình đẳng thu nhập gia tăng (giá trị tạo ra thay vì đi vào túi người lao động lại tập trung vào túi của tầng lớp chóp bu trong xã hội Mỹ).
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;granger-verification&quot;&gt;Granger verification&lt;/h1&gt;

&lt;p&gt;Con gà và quả trứng [3], cũng như Productivity-Pay gap [4] là hai ứng dụng cơ bản của Granger method [1].
Giả sử ta có chuỗi thời gian $\mathbf{X}=\{X_t\}_{t=-\infty}^{+\infty}$ với thời điểm $t=0$ là thời điểm bắt đầu quan sát.&lt;/p&gt;

&lt;p&gt;Ta kí hiệu chuỗi tín hiệu quá khứ của thời điểm $t$ là $\overline{\mathbf{X_t}}=\{X_{t-i}\}_{i=1}^{+\infty}$.&lt;/p&gt;

&lt;p&gt;Ngoài ra, chuỗi tín hiệu quá khứ và hiện tại của thời điểm $t$ là $\overline{\overline{\mathbf{X_t}}}=\{X_{t-i}\}_{i=0}^{+\infty}$.&lt;/p&gt;

&lt;p&gt;Ta cũng ký hiệu giá trị ước đoán điều kiện của $A_t$ trong một chuỗi $\mathbf{A}$ theo least-square errors khi có quan sát là chuỗi $\mathbf{B}$ là $P_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Chuỗi giá trị lỗi của một dự đoán là $\epsilon_t(\mathbf{A}\mid\mathbf{B})=A_t-P_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Ta hãy gọi $\sigma^2_t(\mathbf{A}\mid\mathbf{B})$ là phương sai của chuỗi giá trị lỗi $\epsilon_t(\mathbf{A}\mid\mathbf{B})$.&lt;/p&gt;

&lt;p&gt;Trong trường hợp này ta hãy giả sử tất cả các chuỗi đều là &lt;strong&gt;sóng dừng&lt;/strong&gt;.
Bây giờ, ta có thể thêm ký hiệu $\mathbf{U}$ là chuỗi thông tin vũ trụ (universe time series) mô tả mọi trạng thái trong quá khứ, hiện tại và tương lai của thế giới.
Thì ứng với một chuỗi sự kiện cụ thể $\mathbf{Y}$ thì $\mathbf{U}-\mathbf{Y}$ là chuỗi thông tin toàn cầu mà bỏ đi thông tin của $\mathbf{Y}$.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Định nghĩa nhân quả&lt;/strong&gt;: Nếu $\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}-\mathbf{Y}})$ thì $\mathbf{Y}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; gây ra $\mathbf{X}$.
Định nghĩa này của Granger khá là trực quan, nói nôm na là nếu xóa thông tin của $\mathbf{Y}$ khỏi hệ thống thông tin toàn cầu thì dự đoán sẽ có sai lệch lớn hơn, thì rõ ràng $\mathbf{Y}$ là 1 trong các &lt;em&gt;nguyên nhân&lt;/em&gt; gây ra $\mathbf{X}$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Định nghĩa luân hồi&lt;/strong&gt;: Nếu đồng thời $\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{X}\mid\overline{\mathbf{U}-\mathbf{Y}})$ và $\sigma^2(\mathbf{Y}\mid\overline{\mathbf{U}})\leq\sigma^2(\mathbf{Y}\mid\overline{\mathbf{U}-\mathbf{X}})$ thì $\mathbf{Y}$ là &lt;em&gt;luân hồi&lt;/em&gt; $\mathbf{X}$.
Định nghĩa này của Granger cũng khá là trực quan, nói nôm na là nếu $\mathbf{Y}$ là nguyên nhân của $\mathbf{X}$ mà $\mathbf{X}$ cũng là nguyên nhân của $\mathbf{Y}$, thì hai chuỗi có luân hồi nghiệp quả.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nghiệp quả xa&lt;/strong&gt;: ta nói $\mathbf{Y}$ là &lt;em&gt;nghiệp quả xa&lt;/em&gt; của $\mathbf{X}$ nếu có thêm thông tin quá khứ và hiện tại của $\mathbf{Y}$ thì kết quả dự đoán trở nên chính xác hơn: $P(\mathbf{X}\mid\overline{\mathbf{U}},\overline{\overline{\mathbf{Y}}})\leq P(\mathbf{X}\mid\overline{\mathbf{U}})$.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Độ lệch của nghiệp quả&lt;/strong&gt;: là giá trị số nguyên dương nhỏ nhất thỏa mãn&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$m={\arg\min}_k\{\sigma^2(\mathbf{X}\mid\mathbf{U}-\mathbf{Y}(k))\leq\sigma^2(\mathbf{X}\mid\mathbf{U}-\mathbf{Y}(k+1))\}$,&lt;/p&gt;

&lt;p&gt;tức là chỉ cần biết tối đa $m$ giá trị gần nhất trong chuỗi quá khứ và hiện tại là đủ để dự đoán.&lt;/p&gt;

&lt;p&gt;Xem xét hai chuỗi theo mô hình white-noise như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^ma_jX_{t-j}+\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^mc_jY_{t-j}+\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Theo định nghĩa của &lt;strong&gt;nhân quả&lt;/strong&gt;, nếu $\exists j~\mbox{s.t.}~b_j\neq 0$ thì $\mathbf{Y}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; của $\mathbf{X}$.
Và ngược lại $\exists j~\mbox{s.t.}~d_j\neq 0$ thì $\mathbf{X}$ là &lt;em&gt;nguyên nhân&lt;/em&gt; của $\mathbf{Y}$.
Nếu đồng thời hai điều kiện trên xảy ra thì chúng là &lt;em&gt;luân hồi&lt;/em&gt; của nhau.
Kiểm tra giả thuyết $H_0: b_j=0\forall j$ chính là &lt;strong&gt;Granger verification&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;trứng-và-gà&quot;&gt;Trứng và Gà&lt;/h1&gt;

&lt;p&gt;Năm 1988, Thurman và Fisher [3] đã thực hiện Granger verification trên bộ dữ liệu chứa hai chuỗi dữ liệu: sản lượng trứng hàng năm $\mathbf{X}$và số lượng gà hàng năm $\mathbf{Y}$ trên nước Mỹ từ 1930–1983.&lt;/p&gt;

&lt;p&gt;Vì cả 2 chuỗi trên đều có thể giả định là iid, nên ta có thể viết lại mô hình nhân quả như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Chúng ta kiểm định hai giả thiết null như sau:&lt;/p&gt;

&lt;p&gt;$H_{0x}: b_j=0\forall j$&lt;/p&gt;

&lt;p&gt;$H_{0y}: d_j=0\forall j$&lt;/p&gt;

&lt;p&gt;Giả thiết $H_{0x}$ chính là &lt;em&gt;trứng không là nguyên nhân của gà&lt;/em&gt;.
Giả thiết $H_{0y}$ chính là &lt;em&gt;gà không là nguyên nhân của trứng&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Trên bộ dữ liệu trứng Mỹ và gà Mỹ, có thể bác bỏ giả thuyết đầu, nhưng không thể bác bỏ giả thuyết sau.
Tựu chung lại là &lt;em&gt;trứng Mỹ có trước và sinh ra gà Mỹ&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;productivity-pay-gap&quot;&gt;Productivity-Pay Gap&lt;/h1&gt;

&lt;p&gt;Hầu hết người Mỹ đều tin rằng &lt;strong&gt;kinh tế phát triển thì người lao động sẽ nhận được reward&lt;/strong&gt;.
Nhưng theo 1 nghiên cứu gần đây [4] thì có vẻ tình hình thu nhập của người lao động Mỹ không phải như vậy.
Từ năm 1979, nước Mỹ đã có những thay đổi lớn về chính sách kinh tế, trong đó có nhiều chính sách phục vụ cho người giàu:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Starting in the late 1970s, policymakers began dismantling all the policy bulwarks helping to ensure that typical workers’ wages grew with productivity. Excess unemployment was tolerated to keep any chance of inflation in check. Raises in the federal minimum wage became smaller and rarer. Labor law failed to keep pace with growing employer hostility toward unions. Tax rates on top incomes were lowered. And anti-worker deregulatory pushes—from the deregulation of the trucking and airline industries to the retreat of anti-trust policy to the dismantling of financial regulations and more—succeeded again and again.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Những chính sách như giảm thuế cho những người thu nhập cao, … đã khoét sâu “hố ngăn” thu nhập giữa tầng lớp giàu và nghèo.
Lấy mốc 1979 là 100% cho cả tổng sản lượng quốc nội $\mathbf{X}$ lẫn thu nhập bình quân của tầng lớp lao động $\mathbf{Y}$.
Tức là $X_{1979}=Y_{1979}=1$.
Thì rõ ràng là từ năm 1948 tới 1979, lương và sản lượng quốc nội đều cùng chiều tăng.
Nhưng từ mốc 1979 với sự thay đổi về chính sách, tổng sản lượng quốc nội vẫn tăng tuyến tính nhưng lương của tầng lớp lao động đã chững lại.
Nên nhớ tầng lớp lao động nói đến trong nghiên cứu này chiếm tới 80% dân số lao động của Mỹ (production and unsupervisory workers).
Cũng nhưu ví dụ trứng và gà, cả 2 chuỗi trên đều có thể giả định là iid, nên ta có thể viết lại mô hình nhân quả như sau:&lt;/p&gt;

&lt;p&gt;$X_t=\sum_{j=1}^mb_jY_{t-j}+\epsilon_t,$&lt;/p&gt;

&lt;p&gt;$Y_t=\sum_{j=1}^md_jX_{t-j}+\eta_t,$&lt;/p&gt;

&lt;p&gt;Tuy nhiên, &lt;strong&gt;điểm mốc 1979&lt;/strong&gt; gần như là mốc thay đổi tất cả.
Trước 1979, hai chuỗi song song tuyến tính phát triển và quan hệ nhân quả theo phép thử Granger sẽ cho kết quả chấp nhận (không bác bỏ).
Từ 1979, chuỗi thu nhập của người lao động chững lại, do đó quan hệ nhân quả luân hồi giảm đi.
Đây là một ví dụ cho thấy chính sách đủ mạnh có thể thay đổi quan hệ giữa hai chuỗi, khiến cho nhân quả luân hồi biến mất.
Hai bên đi theo hai hướng độc lập riêng biệt, một bên tiếp tục phát triển lên cao, còn một bên chững lại và phát triển chậm.&lt;/p&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;p&gt;Granger verification là một câu chuyện thú vị.
Hai ứng dụng cơ bản là trứng và gà đã được các nhà khoa học Mỹ phát kiến ra trong thế kỷ 20: &lt;em&gt;trứng Mỹ sinh ra gà Mỹ&lt;/em&gt; (chứ không phải ngược lại).
Và hầu như không có luân hồi trong quan hệ giữa trứng và gà trên đất Mỹ.
Câu chuyện thứ hai là về sự thay đổi của chính sách đủ mạnh để làm mất nhân quả: năm 1979 là năm cột mốc với những người lao động Mỹ, khi bắt đầu từ đó, sản lượng quốc nội vẫn tăng tuyến tính nhưng tiền lương của người lao động tăng chậm.
Một điểm lưu ý là các chuỗi thời gian trong giả thiết của Granger đều là sóng dừng nhưng gần đây có những nghiên cứu tổng quát cho mọi loại sóng.&lt;/p&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;granger1969investigating&quot;&gt;Granger, C. W. J. (1969). Investigating causal relations by econometric models and cross-spectral methods. &lt;i&gt;Econometrica: Journal of the Econometric Society&lt;/i&gt;, 424–438.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;feige1979casual&quot;&gt;Feige, E. L., &amp;amp; Pearce, D. K. (1979). The casual causal relationship between money and income: Some caveats for time series analysis. &lt;i&gt;The Review of Economics and Statistics&lt;/i&gt;, 521–533.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;thurman1988chickens&quot;&gt;Thurman, W. N., Fisher, M. E., &amp;amp; others. (1988). Chickens, eggs, and causality, or which came first. &lt;i&gt;American Journal of Agricultural Economics&lt;/i&gt;, &lt;i&gt;70&lt;/i&gt;(2), 237–238.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;TheProdu24:online&quot;&gt;&lt;i&gt;The Productivity–Pay Gap | Economic Policy Institute&lt;/i&gt;. https://www.epi.org/productivity-pay-gap/&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="pm" /><category term="ai" /><category term="project management" /><category term="project lifecycle" /><category term="software development" /><category term="chicken and egg" /><category term="causal relations" /><category term="Granger model" /><summary type="html">Con gà và quả trứng là một bài toán kinh điển trong thống kê học cổ điển liên quan tới nhân quả (causality) và luân hồi (feedback) của các chuỗi thời gian (time series). Năm 1969, Granger (Nobel kinh tế 2003) xuất bản một seminar paper [1] định tính hóa nhân quả và luân hồi giữa các chuỗi sự kiện thời gian (temporal time series). Việc kiểm tra nhân quả và luân hồi giữa các chuỗi thời gian được định tính và định lượng thông qua Granger verification. Năm 1979, Feige và Pearce [2] nghiên cứu về mối quan hệ luân hồi giữa tiền tệ và thu nhập, có sử dụng Granger verification. Năm 1988, Thurman và Fisher [3] nghiên cứu chuỗi thời gian về sản lượng trứng cũng như chuỗi dữ liệu về số lượng gà trên toàn nước Mỹ để tìm ra quan hệ nhân quả giữa trứng và gà. Họ sử dụng công thức của Granger và lần đầu tiên kết luận mang tính thống kê rằng trứng có trước và là nguyên nhân sinh ra gà. Phân tích các chuỗi sự kiện thời gian (time series analysis) và nhân quả/luân hồi giữa các chuỗi là một chủ đề truyền thống của thống kê và kinh tế học. Gần đây, những nghiên cứu cũng cho thấy sự tồn tại nhân quả giữa sản lượng lao động và bất bình đăng thu nhập hay bài toán Productivity-Pay Gap [4]. Thật thú vị rằng trong 40 năm qua, mặc dù sản lượng lao động bình quân năm tăng 61.8%, nhưng lương của người lao động không hề tăng cao, dẫn tới bất bình đẳng thu nhập gia tăng (giá trị tạo ra thay vì đi vào túi người lao động lại tập trung vào túi của tầng lớp chóp bu trong xã hội Mỹ).</summary></entry><entry><title type="html">A Tutorial on Amazon OpenSearch Service and Kibana</title><link href="https://wanted2.github.io/sre/se/ai/2021/11/13/opensearch-kibana-tuts-1.html" rel="alternate" type="text/html" title="A Tutorial on Amazon OpenSearch Service and Kibana" /><published>2021-11-13T00:00:00+09:00</published><updated>2021-11-13T00:00:00+09:00</updated><id>https://wanted2.github.io/sre/se/ai/2021/11/13/opensearch-kibana-tuts-1</id><content type="html" xml:base="https://wanted2.github.io/sre/se/ai/2021/11/13/opensearch-kibana-tuts-1.html">&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana.svg&quot; alt=&quot;os&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our problem at hand is quite predictable!
A client has their staff submitting reports by CSV files every single day.
One hundred files per day, but one file may have more than $10,000$ rows.
The managers want to have an analytical solution for their administrators and technical specialists to view and explore the submitted reports.
Data’s growing day by day, and they want a scalable and automated solution.
In other words, when CPUUtilization rate goes above 80%, it must automatically add more nodes to the cluster.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Auto scale-out&lt;/strong&gt; operations are easy because we can use some sorts of Python code like the following to update a cluster (OpenSearch service):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;boto3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;opensearch&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_domain_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DomainName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domainName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ClusterConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&apos;InstanceCount&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the number of instances in the cluster will be 10.
However, to know when to perform this operation, the executors must be notified by a &lt;strong&gt;trigger&lt;/strong&gt;.
The triggers are continuously watching the cluster by metrics such as CPU Utilization rate.
About scaling up, a material &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/sizing-domains.html&quot;&gt;here&lt;/a&gt; is useful!&lt;/p&gt;

&lt;p&gt;The analytical solution in this time does not only enable &lt;strong&gt;indexing and searching of massive CSV files&lt;/strong&gt; but also allows &lt;strong&gt;interactive exploring&lt;/strong&gt; of data by dashboards and visualizations.
Many features such as Anomaly Detection and Trace Analytics are desirable.
To this end, we choose the ELK stack for this problem.
We chose the Amazon OpenSearch that bases on Elasticsearch with Kibana dashboards.&lt;/p&gt;

&lt;p&gt;Another notable point in the specifications is the &lt;strong&gt;privilege&lt;/strong&gt; problem.
Here there are different user groups: administrators, specialists, and normal users.
Admins and users are different poles of the permission spectrum, but the specialists are not.
There are specific contents that specialists can view and not others.&lt;/p&gt;

&lt;p&gt;Finally, note the size of the dataset: $200$ files (each with more than 10,000 rows) or $2,000,000$ headlines are coming to our database every single day.
For such a size, we may experience about &lt;strong&gt;$600–800$ million news&lt;/strong&gt; in our database for one year.
Note, the news is from different sources, so there will be no in-source duplicates (news in the same CSV are mostly unique).
There might be some cross-sources duplicates (different CSV have the same news) because different newspapers are copying news from others.
However, although different headlines share the same topic, they should include &lt;strong&gt;different personal opinions of writers&lt;/strong&gt;.
Therefore, they are different, and the portion of duplicates is quite small in this assumption.
And the order of this problem is no smaller than $600$ million news per year.&lt;/p&gt;

&lt;p&gt;However, although we have many records in the database, the client will have only $10–50$ administrators and specialists.
For such a scale, we will have at max $50\times 1000=50,000$ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; queries per day.
Their office hour is from 8 AM to 5 PM in Pacific Time.
Indexing operations can be done over the night (from 6 PM to 6 AM of the next day) or during the weekends.
But it should not be done during the day.
These end-users are non-tech.
Ideally, they should experience less than a few seconds of waiting time for the execution of a query.
They won’t care about the news that was over one year normally.
However, sometimes, they will search for news in the previous ten years from now.
So you should not rotate the news from 10 years ago, which keeps the size of the database at a regular rate of &lt;strong&gt;$6–8$ billion news&lt;/strong&gt; (after ten years of deployment).&lt;/p&gt;

&lt;h1 id=&quot;solution-and-design&quot;&gt;Solution and design&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;What we are going to build is a &lt;strong&gt;search engine&lt;/strong&gt; which should handle a scale of billion records in a database.
Data start from 0 but grow at a speed of million news per day.
Although the client only requires us to handle 8 billion news at max, we should handle 125% of the requirements to avoid overhead problems.
Therefore, our solution should be able to handle at least &lt;strong&gt;$10$ billion news&lt;/strong&gt; when it is used in production.
As data is growing, we can set the solution to grow with data, but finally, for the first year, it should not be less than 1 billion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;First draft of the system should be posted after a month, then we can think about CICD and more interesting stories with the service.&lt;/li&gt;
  &lt;li&gt;First draft should be operational, so it is able to be deployed and managed with less effort from end-users.&lt;/li&gt;
  &lt;li&gt;If the system can handle the rate limit of $50,000$ queries per day, the customer may think to make it to a B2C service for millions of end-users.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scratch or pre-defined solutions?&lt;/strong&gt;: With such a short span to release of the first draft (one month), then we shouldn’t think about implementing from scratch with this client.
We should rely on pre-defined solutions like the ELK stack or AWS OpenSearch service.&lt;/li&gt;
  &lt;li&gt;Since we want to start as data growing, we should move to a solution that is not so tedious to &lt;strong&gt;scale up and scale out&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;We should implement a &lt;strong&gt;dashboard&lt;/strong&gt; feature with &lt;strong&gt;notebooks&lt;/strong&gt; like in Kibana.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Privilege&lt;/strong&gt; problem should be able to be implemented easily, but it is &lt;strong&gt;not important&lt;/strong&gt; at first draft.
Then we move it to our backlog and will implement it in a later story.
In fact, the configuration is quite simple: &lt;a href=&quot;https://www.eksworkshop.com/intermediate/230_logging/config_es/#mapping-roles-to-users&quot;&gt;https://www.eksworkshop.com/intermediate/230_logging/config_es/#mapping-roles-to-users&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; is required if you implement from &lt;strong&gt;scratch&lt;/strong&gt; (a less confident solution). 
But if you test a &lt;strong&gt;pre-defined solution&lt;/strong&gt;, then you are &lt;strong&gt;wasting your time&lt;/strong&gt;! 
Official benchmark results are already somewhere on the Internet! 
So another reason to use a pre-defined solution.
Just google, and you will have the test results.
You can find some of such benchmarks below.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/blogs/containers/introducing-cis-amazon-eks-benchmark/&quot;&gt;https://aws.amazon.com/blogs/containers/introducing-cis-amazon-eks-benchmark/&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://logz.io/blog/benchmark-elasticsearch/&quot;&gt;https://logz.io/blog/benchmark-elasticsearch/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;So we don’t want to waste our time on implementing from scratch or testing a &lt;strong&gt;lack-of-confident&lt;/strong&gt; solution, then we choose AWS for sure.&lt;/p&gt;

&lt;p&gt;The source code can be found at &lt;a href=&quot;https://github.com/wanted2/aws-sample-opensearch-kibana&quot;&gt;my repo&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;/h1&gt;

&lt;p&gt;Performance Testing what Amazon engineers have spent from hundreds to thousands of hours for verification is &lt;strong&gt;waste of time&lt;/strong&gt;.
What we might do is experiments to find the best start configuration (number of nodes).
But it is not important with an auto-scaling solution because when there is some need to scale up or out, it should be done automatically.&lt;/p&gt;

&lt;p&gt;What we should test is simply checking whether if we can access the dashboard, or users can use the UI normally, or the cluster is running normally or not.
Let’s explore the manual for end-users:&lt;/p&gt;

&lt;h2 id=&quot;login-and-create-index-patterns&quot;&gt;Login and create index patterns&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;After you create an OpenSearch cluster, you can explore the data in the OpenSearch Dashboards, which was previously known as Kibana.&lt;/li&gt;
  &lt;li&gt;Go to the provided URL, for example, &lt;a href=&quot;https://search-x0053-a2ej7mr6xtirqhk36utyra65c4.us-east-1.es.amazonaws.com/_dashboards/app/home&quot;&gt;https://search-x0053-a2ej7mr6xtirqhk36utyra65c4.us-east-1.es.amazonaws.com/_dashboards/app/home&lt;/a&gt; to login into the boards.
    &lt;ul&gt;
      &lt;li&gt;Remember to create a new user in your Cognito User Pool and use the username and password to log in.
  For the first time, users will need to change the password.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For the first time, you will be prompted to a confirmation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-02.png&quot; alt=&quot;confirm&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To explore the dashboards and visualizations, you need to index data first and then go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stack Management &amp;gt; Index Patterns&lt;/code&gt; to select the index.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-03.png&quot; alt=&quot;confirm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To put a new document into the indices from your local, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pybuilder&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pyb index_document &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x0053
PyBuilder version 0.13.3
Build started at 2021-11-14 16:44:26
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
Amazon OpenSearch Service has finished processing changes &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;your domain.
Domain description:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Found &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt;: search-x0053-a2ej7mr6xtirqhk36utyra65c4.us-east-1.es.amazonaws.com
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Building x0053 version 1.0.1a
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Executing build &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;c:&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;uan&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ource&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;epos&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0053
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Going to execute task index_document
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;_index&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;x0053&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_type&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;_doc&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_id&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_version&apos;&lt;/span&gt;: 1, &lt;span class=&quot;s1&quot;&gt;&apos;result&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;created&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;forced_refresh&apos;&lt;/span&gt;: True, &lt;span class=&quot;s1&quot;&gt;&apos;_shards&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;total&apos;&lt;/span&gt;: 2, &lt;span class=&quot;s1&quot;&gt;&apos;successful&apos;&lt;/span&gt;: 1, &lt;span class=&quot;s1&quot;&gt;&apos;failed&apos;&lt;/span&gt;: 0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_seq_no&apos;&lt;/span&gt;: 0, &lt;span class=&quot;s1&quot;&gt;&apos;_primary_term&apos;&lt;/span&gt;: 1&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
BUILD SUCCESSFUL
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
Build Summary
             Project: x0053
             Version: 1.0.1a
      Base directory: c:&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;uan&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ource&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;epos&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0053
        Environments:
               Tasks: index_document &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2056 ms]
Build finished at 2021-11-14 16:44:37
Build took 10 seconds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10963 ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check if the document is already:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pyb search &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x0053         
PyBuilder version 0.13.3
Build started at 2021-11-14 16:45:30
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
Amazon OpenSearch Service has finished processing changes &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;your domain.
Domain description:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Found &lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt;: search-x0053-a2ej7mr6xtirqhk36utyra65c4.us-east-1.es.amazonaws.com
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Building x0053 version 1.0.1a
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Executing build &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;c:&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;uan&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ource&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;epos&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0053
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  Going to execute task search
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO]  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;took&apos;&lt;/span&gt;: 180, &lt;span class=&quot;s1&quot;&gt;&apos;timed_out&apos;&lt;/span&gt;: False, &lt;span class=&quot;s1&quot;&gt;&apos;_shards&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;total&apos;&lt;/span&gt;: 5, &lt;span class=&quot;s1&quot;&gt;&apos;successful&apos;&lt;/span&gt;: 5, &lt;span class=&quot;s1&quot;&gt;&apos;skipped&apos;&lt;/span&gt;: 0, &lt;span class=&quot;s1&quot;&gt;&apos;failed&apos;&lt;/span&gt;: 0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;hits&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;total&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;value&apos;&lt;/span&gt;: 1, &lt;span class=&quot;s1&quot;&gt;&apos;relation&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;eq&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;max_score&apos;&lt;/span&gt;: 0.56026673, &lt;span class=&quot;s1&quot;&gt;&apos;hits&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;_index&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;x0053&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_type&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;_doc&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_id&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;1&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;_score&apos;&lt;/span&gt;: 0.56026673, &lt;span class=&quot;s1&quot;&gt;&apos;_source&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;title&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;9 F1 ở Hà Nội được cách ly tại nhà&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;description&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;UBND phường Trung Văn, quận Nam Từ Liêm, cho 9 F1 đủ điều kiện cách ly tại nhà theo hướng dẫn của Bộ Y tế.&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;body&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;UBND phường Trung Văn, quận Nam Từ Liêm, cho 9 F1 đủ điều kiện cách ly tại nhà theo hướng dẫn của Bộ Y tế.\nÔng Nguyễn Đắc Long, Chủ tịch UBND phường Trung Văn, quận Nam Từ Liêm, tối 13/11 cho biết 9 F1, là người già có bệnh nền, trẻ em, thuộc hai gia đình, tiếp xúc với một F0 ngày 6/11 và một F0 khác vào ngày 8/11. Họ được cách ly ngay sau khi xác định F0, theo Hướng dẫn tạm thời giám sát và phòng, chống Covid-19, Bộ Y tế ban hành vào tháng 7.\n&quot;Quy định chung của Bộ Y tế là trường hợp người già bệnh nền, trẻ em, gia đình có đủ điều kiện phòng ốc... thì sẽ cách ly y tế tại nhà. Vì vậy, chúng tôi cách ly 9 F1 này theo đúng quy định&quot;, ông Long giải thích và nói rõ rằng &quot;đây không phải là trường hợp thí điểm cách ly tại nhà của Sở Y tế Hà Nội&quot;. Tuy nhiên, 9 F1 là những người đầu tiên tại Hà Nội được áp dụng hình thức cách ly này.\nHiện, Hà Nội chưa có kế hoạch cách ly F0, F1 tại nhà. Trả lời VnExpress vài ngày trước, lãnh đạo Trung tâm Kiểm soát Bệnh tật (CDC) Hà Nội và đại diện Sở Y tế Hà Nội cho biết thành phố có đủ nguồn lực để cách ly, điều trị tập trung F1 và F0. Chỉ khi nào số lượng F0, F1 tăng vượt quá khả năng, thành phố mới tính đến phương án cách ly người không triệu chứng tại nhà.\nNhiều chuyên gia đề nghị thành phố nên tính tới phương án này sớm. Phó giáo sư, tiến sĩ Trần Đắc Phu, Cố vấn cao cấp Trung tâm đáp ứng khẩn cấp sự kiện y tế công cộng Việt Nam, Bộ Y tế, cho rằng Hà Nội không nên kiên trì cách ly tập trung, rút kinh nghiệm các tỉnh có dịch bùng phát mạnh thời gian vừa qua. Nguyên nhân là thành phố liên tiếp xuất hiện các ổ dịch mới, số ca nhiễm gia tăng trong một tuần trở lại đây khi thực hiện thích ứng an toàn, linh hoạt, kiểm soát hiệu quả dịch Covid-19. F1 tăng nhiều khi số F0 cao, dẫn tới cơ sở cách ly tập trung hết chỗ. Thêm vào đó, duy trì cách ly tập trung sẽ khiến các cơ sở bị quá tải, có nguy cơ lây nhiễm chéo.\n&quot;Cách ly F1 tại nhà giúp người bị cách ly đỡ tốn kém, người cách ly không bị ảnh hưởng nặng nề về tâm lý&quot;, ông Phu nói. Nhiều nhà dân Hà Nội đủ điều kiện, đủ cơ sở vật chất để cách ly ở nhà. Hệ thống y tế cơ sở và chính quyền từ thôn, xóm, tổ dân phố đủ năng lực, có thể giám sát, theo dõi người cách ly.\nHiện, phường Trung Văn, quận Nam Từ Liêm, đang ở cấp độ 2 (nguy cơ trung bình, màu vàng). Cả thành phố chỉ có phường Phú Đô, quận Nam Từ Liêm, dịch ở cấp độ 4 (nguy cơ rất cao, màu đỏ - cấp độ dịch cao nhất). Lần gần đây nhất chỉ có tổ dân phố Ngô Sài, thị trấn Quốc Oai, huyện Quốc Oai, được đánh giá cấp 4.\nTổng số ca nhiễm tại Hà Nội từ ngày 27/4 đến tối 13/11 là 5.924, trong đó số cộng đồng 2.229, số nhiễm sau khi được cách ly 3.695 ca.\nLực lượng y tế căng mình xét nghiệm cho người dân phường Thanh Xuân Trung, quận Thanh Xuân. Ảnh: Giang Huy&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}}]}}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
BUILD SUCCESSFUL
&lt;span class=&quot;nt&quot;&gt;------------------------------------------------------------&lt;/span&gt;
Build Summary
             Project: x0053
             Version: 1.0.1a
      Base directory: c:&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;sers&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;uan&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;ource&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;epos&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0053
        Environments: 
               Tasks: search &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1355 ms]
Build finished at 2021-11-14 16:45:38
Build took 7 seconds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7631 ms&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now you have indexed 1 document into OpenSearch, we can be back to Kibana to create an index pattern.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-04.png&quot; alt=&quot;confirm&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Click into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next step&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create index pattern&lt;/code&gt; to go to the field lists screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-05.png&quot; alt=&quot;confirm&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-query-workbench&quot;&gt;SQL Query Workbench&lt;/h2&gt;

&lt;p&gt;We can use SQL syntax in Query Workbench.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the left sidebar, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenSearch Plugins &amp;gt; Query Workbench&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-06.png&quot; alt=&quot;workbench&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Document for SQL in OpenSearch can be found &lt;a href=&quot;https://opensearch.org/docs/latest/search-plugins/sql/index/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;notebooks&quot;&gt;Notebooks&lt;/h2&gt;

&lt;p&gt;This is also a valuable feature in OpenSearch dashboard.
You can add visualization blocks or code blocks (SQL/PPL).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-07.png&quot; alt=&quot;notebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, we used the following SQL query for full-text search:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sql&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0053&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;f1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;anomaly-detection&quot;&gt;Anomaly Detection&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-08.png&quot; alt=&quot;notebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this view, we can create an Anomaly Detector with a specific rule like&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;title contains f1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Other features like Dashboards, Visualizations, Trace Analytics are also worth exploring.&lt;/p&gt;

&lt;h1 id=&quot;operation-and-maintenance&quot;&gt;Operation and maintenance&lt;/h1&gt;

&lt;p&gt;Installing OpenSearch maybe easy but managing a cluster requires more work.&lt;/p&gt;

&lt;h2 id=&quot;configurations&quot;&gt;Configurations&lt;/h2&gt;

&lt;h3 id=&quot;multi-region-service&quot;&gt;Multi-region service&lt;/h3&gt;

&lt;p&gt;To prevent data loss and minimize Amazon OpenSearch Service cluster downtime in the event of a service disruption, you can distribute nodes across two or three Availability Zones in the same Region, a configuration known as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Multi-AZ&lt;/code&gt;. 
Availability Zones are isolated locations within each AWS Region.&lt;/p&gt;

&lt;p&gt;For domains that run production workloads, we recommend the following configuration:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Choose a Region that supports three Availability Zones with OpenSearch Service.&lt;/li&gt;
  &lt;li&gt;Deploy the domain across three zones.&lt;/li&gt;
  &lt;li&gt;Choose current-generation instance types for dedicated master nodes and data nodes.&lt;/li&gt;
  &lt;li&gt;Use three dedicated master nodes and at least three data nodes.&lt;/li&gt;
  &lt;li&gt;Create at least one replica for each index in your cluster.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/replication.html&quot;&gt;Cross-cluster replication&lt;/a&gt; in Amazon OpenSearch Service lets you replicate indices, mappings, and metadata from one OpenSearch Service domain to another.
It follows an active-passive replication model where the follower index (where the data is replicated) pulls data from the leader index.
Cross-cluster replication ensures high availability in the event of an outage, and allows you to replicate data across geographically distant data centers to reduce latency.&lt;/p&gt;

&lt;h3 id=&quot;indices&quot;&gt;Indices&lt;/h3&gt;

&lt;p&gt;If you need to migrate indices from a cluster to another, you can use &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/remote-reindex.html&quot;&gt;remote reindex&lt;/a&gt;.
Whereas &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/rollup.html&quot;&gt;index rollup jobs&lt;/a&gt; let you reduce data granularity by rolling up old data into condensed indices, &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/transforms.html&quot;&gt;transform jobs&lt;/a&gt; let you create a different, summarized view of your data centered around certain fields, so you can visualize or analyze the data in different ways.&lt;/p&gt;

&lt;p&gt;One thing that is amazing about indices management is &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ism.html&quot;&gt;Index State Management (ISM)&lt;/a&gt; in Amazon OpenSearch Service.
It lets you define custom management policies to automate routine tasks and apply them to indices and index patterns. You no longer need to set up and manage external processes to run your index operations.
For example, you can setup a policy that moves an index from hot storage to &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ultrawarm.html&quot;&gt;UltraWarm&lt;/a&gt;, and eventually to &lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cold-storage.html&quot;&gt;cold storage&lt;/a&gt;, then deletes the index.&lt;/p&gt;

&lt;h2 id=&quot;auditing&quot;&gt;Auditing&lt;/h2&gt;

&lt;h3 id=&quot;monitoring&quot;&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;Monitoring is an important part of maintaining the reliability, availability, and performance of Amazon OpenSearch Service and your other AWS solutions. AWS provides the following tools to monitor your OpenSearch Service resources, report issues, and take automatic actions when appropriate:&lt;/p&gt;

&lt;h4 id=&quot;amazon-cloudwatch&quot;&gt;Amazon CloudWatch&lt;/h4&gt;
&lt;p&gt;Amazon CloudWatch monitors your OpenSearch Service resources in real time.
You can collect and track metrics, create customized dashboards, and set alarms that notify you or take actions when a metric reaches a certain threshold.&lt;/p&gt;

&lt;h4 id=&quot;amazon-cloudwatch-logs&quot;&gt;Amazon CloudWatch Logs&lt;/h4&gt;
&lt;p&gt;Amazon CloudWatch Logs lets you monitor, store, and access your OpenSearch log files.
CloudWatch Logs monitors the information in log files and can notify you when certain thresholds are met.&lt;/p&gt;

&lt;h4 id=&quot;amazon-eventbridge&quot;&gt;Amazon EventBridge&lt;/h4&gt;
&lt;p&gt;Amazon EventBridge delivers a near real-time stream of system events that describe changes in your OpenSearch Service domains.
You can create rules that watch for certain events, and trigger automated actions in other AWS services when these events occur.&lt;/p&gt;

&lt;h4 id=&quot;aws-cloudtrail&quot;&gt;AWS CloudTrail&lt;/h4&gt;
&lt;p&gt;AWS CloudTrail captures configuration API calls made to OpenSearch Service as events.
It can deliver these events to an Amazon S3 bucket that you specify.
Using this information, you can identify which users and accounts made requests, the source IP address from which the requests were made, and when the requests occurred.&lt;/p&gt;

&lt;h3 id=&quot;notifications&quot;&gt;Notifications&lt;/h3&gt;

&lt;p&gt;Notifications in Amazon OpenSearch Service currently contain information about available software updates and Auto-Tune events for your domains.
In the future, they might also include performance optimization recommendations such as moving to the correct instance type for a domain or rebalancing shards to reduce performance bottlenecks.&lt;/p&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;p&gt;Security is a shared responsibility between AWS and you. The shared responsibility model describes this as security of the cloud and security in the cloud:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security of the cloud&lt;/strong&gt; – AWS is responsible for protecting the infrastructure that runs AWS services in the AWS Cloud.
AWS also provides you with services that you can use securely.
Third-party auditors regularly test and verify the effectiveness of our security as part of the AWS compliance programs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security in the cloud&lt;/strong&gt; – Your responsibility is determined by the AWS service that you use.
You are also responsible for other factors including the sensitivity of your data, your company’s requirements, and applicable laws and regulations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html&quot;&gt;Fine-grained access control&lt;/a&gt; helps you to define roles, access level at indices, documents and domain levels.
You can restrict the access to your dashboard by using multi-tenancy.
&lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/data-protection.html&quot;&gt;Data protection&lt;/a&gt; is enhanced with encryption at rest and node-to-node encryption.
Data integrity comply with many standards: Third-party auditors assess the security and compliance of Amazon OpenSearch Service as part of multiple AWS compliance programs.
These programs include SOC, PCI, and HIPAA.
SAML based authentication and Amazon Cognito are all supported.&lt;/p&gt;

&lt;h2 id=&quot;management&quot;&gt;Management&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html&quot;&gt;Auto-Tune&lt;/a&gt; in Amazon OpenSearch Service uses performance and usage metrics from your OpenSearch cluster to suggest memory-related configuration changes, including queue and cache sizes and Java virtual machine (JVM) settings on your nodes. These optional changes improve cluster speed and stability.&lt;/p&gt;

&lt;p&gt;To enable auto-tune,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST https://es.us-east-1.amazonaws.com/2021-01-01/opensearch/domain/domain-name/config
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;AutoTuneOptions&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;DesiredState&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ENABLED&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;MaintenanceSchedules&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;StartAt&quot;&lt;/span&gt;: 4104152288000,
      &lt;span class=&quot;s2&quot;&gt;&quot;Duration&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Value&quot;&lt;/span&gt;: 2,
        &lt;span class=&quot;s2&quot;&gt;&quot;Unit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;HOURS&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;CronExpressionForRecurrence&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cron(0 12 * * ? *)&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We have walked through a tutorial on configurations of an OpenSearch cluster with logging options, encryption at rest, .etc.
In the next steps, we will implement the following two stories:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/os-kibana-stories.svg&quot; alt=&quot;next stories&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;story-1-csv-upload-to-s3-for-streaming&quot;&gt;Story 1: CSV upload to S3 for streaming&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Users need to upload CSV files with three fields: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;title, body&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
      &lt;th&gt;body&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;9 F1 ở Hà Nội được cách ly tại nhà&lt;/td&gt;
      &lt;td&gt;UBND phường Trung Văn, quận Nam Từ Liêm, cho 9 F1 đủ điều kiện cách ly tại nhà theo hướng dẫn của Bộ Y tế.&lt;/td&gt;
      &lt;td&gt;UBND phường Trung Văn, quận Nam Từ Liêm, cho 9 F1 đủ điều kiện cách ly tại nhà theo hướng dẫn của Bộ Y tế.\nÔng Nguyễn Đắc Long, Chủ tịch UBND phường Trung Văn, quận Nam Từ Liêm, tối 13/11 cho biết 9 F1, là người già có bệnh nền, trẻ em, thuộc hai gia đình, tiếp xúc với một F0 ngày 6/11 và một F0 khác vào ngày 8/11. Họ được cách ly ngay sau khi xác định F0, theo Hướng dẫn tạm thời giám sát và phòng, chống Covid-19, Bộ Y tế ban hành vào tháng 7.\n&quot;Quy định chung của Bộ Y tế là trường hợp người già bệnh nền, trẻ em, gia đình có đủ điều kiện phòng ốc… thì sẽ cách ly y tế tại nhà. Vì vậy, chúng tôi cách ly 9 F1 này theo đúng quy định&quot;, ông Long giải thích và nói rõ rằng &quot;đây không phải là trường hợp thí điểm cách ly tại nhà của Sở Y tế Hà Nội&quot;. Tuy nhiên, 9 F1 là những người đầu tiên tại Hà Nội được áp dụng hình thức cách ly này.\nHiện, Hà Nội chưa có kế hoạch cách ly F0, F1 tại nhà. Trả lời VnExpress vài ngày trước, lãnh đạo Trung tâm Kiểm soát Bệnh tật (CDC) Hà Nội và đại diện Sở Y tế Hà Nội cho biết thành phố có đủ nguồn lực để cách ly, điều trị tập trung F1 và F0. Chỉ khi nào số lượng F0, F1 tăng vượt quá khả năng, thành phố mới tính đến phương án cách ly người không triệu chứng tại nhà.\nNhiều chuyên gia đề nghị thành phố nên tính tới phương án này sớm. Phó giáo sư, tiến sĩ Trần Đắc Phu, Cố vấn cao cấp Trung tâm đáp ứng khẩn cấp sự kiện y tế công cộng Việt Nam, Bộ Y tế, cho rằng Hà Nội không nên kiên trì cách ly tập trung, rút kinh nghiệm các tỉnh có dịch bùng phát mạnh thời gian vừa qua. Nguyên nhân là thành phố liên tiếp xuất hiện các ổ dịch mới, số ca nhiễm gia tăng trong một tuần trở lại đây khi thực hiện thích ứng an toàn, linh hoạt, kiểm soát hiệu quả dịch Covid-19. F1 tăng nhiều khi số F0 cao, dẫn tới cơ sở cách ly tập trung hết chỗ. Thêm vào đó, duy trì cách ly tập trung sẽ khiến các cơ sở bị quá tải, có nguy cơ lây nhiễm chéo.\n&quot;Cách ly F1 tại nhà giúp người bị cách ly đỡ tốn kém, người cách ly không bị ảnh hưởng nặng nề về tâm lý&quot;, ông Phu nói. Nhiều nhà dân Hà Nội đủ điều kiện, đủ cơ sở vật chất để cách ly ở nhà. Hệ thống y tế cơ sở và chính quyền từ thôn, xóm, tổ dân phố đủ năng lực, có thể giám sát, theo dõi người cách ly.\nHiện, phường Trung Văn, quận Nam Từ Liêm, đang ở cấp độ 2 (nguy cơ trung bình, màu vàng). Cả thành phố chỉ có phường Phú Đô, quận Nam Từ Liêm, dịch ở cấp độ 4 (nguy cơ rất cao, màu đỏ - cấp độ dịch cao nhất). Lần gần đây nhất chỉ có tổ dân phố Ngô Sài, thị trấn Quốc Oai, huyện Quốc Oai, được đánh giá cấp 4.\nTổng số ca nhiễm tại Hà Nội từ ngày 27/4 đến tối 13/11 là 5.924, trong đó số cộng đồng 2.229, số nhiễm sau khi được cách ly 3.695 ca.\nLực lượng y tế căng mình xét nghiệm cho người dân phường Thanh Xuân Trung, quận Thanh Xuân. Ảnh: Giang Huy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Source: &lt;a href=&quot;https://vnexpress.net/nhieu-f1-o-ha-noi-duoc-cach-ly-tai-nha-4385406.html&quot;&gt;https://vnexpress.net/nhieu-f1-o-ha-noi-duoc-cach-ly-tai-nha-4385406.html&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSV is then streamed into OpenSearch for &lt;strong&gt;indexing&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;End-user will query through Kibana (OpenSearch Dashboards) for investigations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following tasks will be done:&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li&gt;CSV upload
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Setup S3 bucket with triggering.&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Setup indexing Lambda to handle streaming CSV.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Setup Kibana for end-users&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;story-2-fine-grained-privilege-control-with-admins-specialists-and-normal-users&quot;&gt;Story 2: Fine-grained privilege control with Admins, Specialists, and Normal Users&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;There are three user groups in our application:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Administrators group&lt;/strong&gt; who have the highest privilege, members in this group can view/edit/delete anything in the dashboard.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Specialists group&lt;/strong&gt; who need to view the dashboard but not everything. They cannot edit/delete anything in the dashboard.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Normal users group&lt;/strong&gt; who are forbidden from viewing the dashboard.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We need to filter out before Cognito log users in to find the type of users:
    &lt;ul&gt;
      &lt;li&gt;if users are admins, let them in.&lt;/li&gt;
      &lt;li&gt;if users are specialists, let them in but restrict their view. &lt;strong&gt;Please check whether if this is doable or not?&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;if users are normal, don’t log in.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html&quot;&gt;Tutorial about lambda triggers in Cognito&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-userpool-lambdaconfig.html&quot;&gt;Triggers&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;CreateAuthChallenge&lt;/li&gt;
      &lt;li&gt;CustomMessage&lt;/li&gt;
      &lt;li&gt;DefineAuthChallenge&lt;/li&gt;
      &lt;li&gt;PostAuthentication&lt;/li&gt;
      &lt;li&gt;PostConfirmation&lt;/li&gt;
      &lt;li&gt;PreAuthentication&lt;/li&gt;
      &lt;li&gt;PreSignUp&lt;/li&gt;
      &lt;li&gt;PreTokenGeneration&lt;/li&gt;
      &lt;li&gt;UserMigration&lt;/li&gt;
      &lt;li&gt;VerifyAuthChallengeResponse&lt;/li&gt;
      &lt;li&gt;Not need to configure all above Lambdas!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Admins/Specialists restriction problem
    &lt;ul class=&quot;task-list&quot;&gt;
      &lt;li&gt;Create two groups for admins and specialists, no need of a group for normal users.
        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreSignup&lt;/code&gt; logic, if the email is from a normal user then deny sign up.&lt;/li&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;strong&gt;it is important here that there must be a Lambda connecting to user table to check the type of users&lt;/strong&gt;!&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreLogin&lt;/code&gt; function, log the groups of their login behaviors for later diagnosis.&lt;/li&gt;
      &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Configure the role/policies to ensure that specialists can only view.
        &lt;ul class=&quot;task-list&quot;&gt;
          &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;If there are specific resources specialists cannot view, then can Cognito handle?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we need two Lambda functions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;One &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreSignup&lt;/code&gt; Lambda that connects and verifies user types (admins/specialists or normal) before signing up a user.&lt;/li&gt;
  &lt;li&gt;Another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PreLogin&lt;/code&gt; Lambda that logs user behaviors.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pricing-estimation&quot;&gt;Pricing estimation&lt;/h2&gt;
&lt;p&gt;The pricing estimation of these two stories with the original story can be found &lt;a href=&quot;https://calculator.aws/#/estimate?id=e6fb0a2e9b0d46b7b876fec8e8da02c8c1e4be60&quot;&gt;here (152.20$ per month)&lt;/a&gt;.&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="sre" /><category term="se" /><category term="ai" /><category term="aws" /><category term="amazon web services" /><category term="opensearch" /><category term="elasticsearch" /><category term="kibana" /><summary type="html">Our problem at hand is quite predictable! A client has their staff submitting reports by CSV files every single day. One hundred files per day, but one file may have more than $10,000$ rows. The managers want to have an analytical solution for their administrators and technical specialists to view and explore the submitted reports. Data’s growing day by day, and they want a scalable and automated solution. In other words, when CPUUtilization rate goes above 80%, it must automatically add more nodes to the cluster.</summary></entry><entry><title type="html">Three extensions for a better Azure Boards: Define-of-Done, Product Vision and Backlog Essentials</title><link href="https://wanted2.github.io/pm/2021/11/07/azure-boards-pm-extensions.html" rel="alternate" type="text/html" title="Three extensions for a better Azure Boards: Define-of-Done, Product Vision and Backlog Essentials" /><published>2021-11-07T00:00:00+09:00</published><updated>2021-11-07T00:00:00+09:00</updated><id>https://wanted2.github.io/pm/2021/11/07/azure-boards-pm-extensions</id><content type="html" xml:base="https://wanted2.github.io/pm/2021/11/07/azure-boards-pm-extensions.html">&lt;p&gt;&lt;img src=&quot;https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/d3560903-f638-4528-b9ba-8cbf6a015a8d.png&quot; alt=&quot;Azure Boards&quot; /&gt;
&lt;em&gt;Source: &lt;a href=&quot;http://ilikesqldata.com/deep-dive-into-azure-boards/&quot;&gt;ILikeSQLData&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Azure Boards (AB)&lt;/strong&gt; [1] is an essential tool for Project Management [2] in software development projects.
It provides enough capabilities to the PM to manage the software projects with work items, agile boards, and backlog/sprints for each agile team.
Linking commits and PRs to working items in Azure Repos [3], Azure Pipelines [4], and Azure Artifacts [5], Azure Boards also supports enhanced code analytics.
By integrating with Azure Test Plans [6] (however, it is not free [7], 52$ per user per month for all above with test plans) to track the whole quality assurance processes, it provides an excellent user experience for development teams.
Some recent features like Analytics views also give the PM more confidence in making decisions.
However, the Azure Boards also lacks several important features of a perfect backlog:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, there is no &lt;strong&gt;Define-of-Done (DoD)&lt;/strong&gt; checklist in AB by default.&lt;/li&gt;
  &lt;li&gt;Second, there is not a clear feature to demonstrate the &lt;strong&gt;Product Vision&lt;/strong&gt; to teams. (There is a Delivery Plan to show the roadmap towards a specific release goal).&lt;/li&gt;
  &lt;li&gt;Finally, if users are already familiar with other tools like JIRA, then AB has a poor backlog view.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post introduces several extensions to solve these problems: &lt;strong&gt;Define-of-Done&lt;/strong&gt; [8], &lt;strong&gt;Product Vision&lt;/strong&gt; [9], and &lt;strong&gt;Backlog Essentials&lt;/strong&gt; [10].
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;define-of-done-extension-the-perfectionist-for-software&quot;&gt;Define-of-Done extension: The perfectionist for software&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://agile-extensions.gallerycdn.vsassets.io/extensions/agile-extensions/dod/3.0.40/1599210825590/dist/images/screenshot-dod.png&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;are-you-really-understanding-the-role-of-managers-in-a-software-project&quot;&gt;Are you really understanding the role of managers in a software project?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Define-of-Done (DoD)&lt;/strong&gt; perfects software!
Development teams will not acknowledge a bug if there is no feedback or tests.
Testers and QA helps to ensure technical bugs don’t happen.
However, logical bugs (wrong business flows, unfriendly or difficult-to-use UX, …) can be found only by users and product owners (PO).
PO must feedback development teams about logical bugs, and customer support (CS) teams must feedback development teams about claims from end-users.&lt;/p&gt;

&lt;p&gt;Many wrong perceptions that PO, SM, and Product Managers (PdM) are close to testers and QA!
It is completely wrong!
Testers and QAs are bug finders, although they only find and report technical bugs.
PO/SM/PM don’t find bugs (please remember this).
What they actually do are &lt;strong&gt;APPROVE GOOD PRODUCTS&lt;/strong&gt; and &lt;strong&gt;DENY DEFECTIVE PRODUCTS&lt;/strong&gt;.
They don’t find bugs because they already have a &lt;strong&gt;checklist&lt;/strong&gt; to classify what is a good product and what is a defective product!&lt;/p&gt;

&lt;p&gt;So the right actions in a perfect development team are like Testers/QA &lt;strong&gt;report&lt;/strong&gt; bugs, Developers &lt;strong&gt;develop products and fix bugs&lt;/strong&gt;, but the product won’t launch without &lt;strong&gt;approval&lt;/strong&gt; from PO/SM/PM.
If PO/SM/PM &lt;strong&gt;deny&lt;/strong&gt; a thing, don’t even think about launching!&lt;/p&gt;

&lt;p&gt;Then the checklist PO/SM/PdM needs to consult when deciding the launching is a part of DoD.
Perhaps it contains a list of features that must be completed, a check of flow, UI/UX, …&lt;/p&gt;

&lt;p&gt;But remember that this is only one of the missions that PO/SM/PdM must complete.
There are many other things to make the development smoothly that they need to do.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In many software projects, developers and testers miss the task of reporting and obtaining approvals from managers, and &lt;strong&gt;such incidents often lead to serious consequences&lt;/strong&gt;!&lt;/em&gt;
&lt;em&gt;I observed several young developers in my experience: they were overconfident about their code and sometimes skipped the approval processes when deploying and launching.&lt;/em&gt;
&lt;em&gt;These behaviors are classified as &lt;strong&gt;bad behaviors (thái độ kém)&lt;/strong&gt; in all software projects!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;dod-and-acceptance-criteria-ac&quot;&gt;DoD and Acceptance Criteria (AC)&lt;/h2&gt;

&lt;p&gt;If you’re beginning to wonder why this is a product management issue and not a quality control topic for the technical team, that’s in part due to the difference between a general Definition of Done and the specific acceptance criteria for a particular user story.&lt;/p&gt;

&lt;p&gt;DoD is universally applied (with a few exceptions) to everything the engineering organization is attempting to ship.
While a product management &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OK&lt;/code&gt; might be one of the items on the checklist, it’s a fairly generic definition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acceptance criteria&lt;/strong&gt;, however, are unique to the user story or feature in question. 
These criteria should be defined by product management, with input from the technical team on any specific use cases or parameters that must be met to green light this item before it’s considered done.&lt;/p&gt;

&lt;p&gt;Since DoD is considered for everything, product management should review the definition and make sure they agree that it is comprehensive enough. 
However, the ownership and management of the definition doesn’t necessarily need to be the responsibility of product management. 
As long as product is satisfied that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;done&lt;/code&gt; items pass the tests spelled out in the DoD, they can largely leave it be.&lt;/p&gt;

&lt;p&gt;But a shipped product or feature can hardly be considered done in the eyes of product, either.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;For a product manager, you&apos;re not done with a product (or feature) until you&apos;ve put it out to pasture,&lt;/code&gt; says Adam Sigel of Hometap [11]. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Once it&apos;s launched, you begin the long tail of customer support, price changes, bug fixes, and compatibility updates. Once you&apos;re done supporting it, it&apos;s time to sunset it. Then, and only then, are you done with a product.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dod-extension-in-ab&quot;&gt;DoD extension in AB&lt;/h2&gt;

&lt;p&gt;So for a specific user story, testers, developers and QA must ensure that specific AC are implemented.
But managers need to ensure that members DONE the AC correcly, at least in terms of workflow.
A typical DoD checklist is as follows:&lt;/p&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code is peer-reviewed&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code is checked in&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code is deployed to test environment&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code/feature passes regression testing&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code/feature passes smoke testing&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Code is documented&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Help documentation is updated&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Feature is OK’d by stakeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without a fulfilled DoD, then the product was launch without a correct workflow and there might be bugs inside.
A perfect DoD is ensured and a continuous delivery is possible!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AB&lt;/strong&gt; by default doesn’t provide a checklist feature, however, user can use a items list like &lt;strong&gt;Define-of-Done&lt;/strong&gt; [8].
It helps a lot in ensuring the quality of a product.&lt;/p&gt;

&lt;h1 id=&quot;product-vision-to-know-what-you-are-working-for-in-long-term&quot;&gt;Product Vision: To know what you are working for in long-term&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://agile-extensions.gallerycdn.vsassets.io/extensions/agile-extensions/product-vision/2.0.26/1588400179018/assets/images/screenshot-product-vision-workhub.png&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product Vision (PV)&lt;/strong&gt; is a slogan or motto of a product which describes the value that the product will give to end-users.
In Agile development, for a short-term, you will hear sprint goals, task descriptions, acceptance criteria, .etc.
All of them are for short durations, and you will see a part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;big picture&lt;/code&gt;.
Such a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;big picture&lt;/code&gt; can be huge, and the owner may need to survey for a long time to give.
However, once the vision is clear, the owner can describe it in a short sentence, or a photo, a video, or anything which can represents the vision compactly.&lt;/p&gt;

&lt;p&gt;The Product Vision sheds light on the direction the development will working towards.
Let’s see the PV of SpaceX:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SpaceX was founded under the belief that a future where humanity is out exploring the stars is fundamentally more exciting than one where we are not.
&lt;a href=&quot;https://www.spacex.com/careers/index.html?department=Food%2520Services&quot;&gt;Elon Musk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;backlog-essentials-bringing-jira-back-to-azure-devops&quot;&gt;Backlog essentials: Bringing JIRA back to Azure DevOps&lt;/h1&gt;

&lt;iframe style=&quot;float: right; margin: 10px; width: 50%;&quot; src=&quot;https://www.youtube-nocookie.com/embed/q6n6nb7w3kU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;If you are familiar with JIRA, some of the following features may comfort you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Quick editting in backlog&lt;/li&gt;
  &lt;li&gt;Progressbar in issue views&lt;/li&gt;
  &lt;li&gt;Dynamic backlog charts (Insights)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And when you switch to AB, you find that those features are not there.
&lt;strong&gt;Backlog essentials (BE, [10])&lt;/strong&gt; add them back to AB.
One downside is that it is not free, with a price of €288 per year!&lt;/p&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;AzureBoa68:online&quot;&gt;&lt;i&gt;Azure Boards | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/devops/boards/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;meredith2017project&quot;&gt;Meredith, J. R., Shafer, S. M., &amp;amp; Mantel Jr, S. J. (2017). &lt;i&gt;Project management: a strategic managerial approach&lt;/i&gt;. John Wiley &amp;amp; Sons.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;AzureRep87:online&quot;&gt;&lt;i&gt;Azure Repos – Git Repositories | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/devops/repos/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;AzurePip74:online&quot;&gt;&lt;i&gt;Azure Pipelines | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/devops/pipelines/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;AzureArt12:online&quot;&gt;&lt;i&gt;Azure Artifacts | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/devops/artifacts/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;AzureTes7:online&quot;&gt;&lt;i&gt;Azure Test Plans | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/devops/test-plans/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;AzureDev1:online&quot;&gt;&lt;i&gt;Azure DevOps Services Pricing | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Definiti31:online&quot;&gt;&lt;i&gt;Definition of Done - Visual Studio Marketplace&lt;/i&gt;. https://marketplace.visualstudio.com/items?itemName=agile-extensions.dod&amp;amp;ssr=false#overview&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;ProductV55:online&quot;&gt;&lt;i&gt;Product Vision - Visual Studio Marketplace&lt;/i&gt;. https://marketplace.visualstudio.com/items?itemName=agile-extensions.product-vision&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;BacklogE28:online&quot;&gt;&lt;i&gt;Backlog Essentials - Visual Studio Marketplace&lt;/i&gt;. https://marketplace.visualstudio.com/items?itemName=agile-extensions.backlog-essentials&amp;amp;ssr=false#overview&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;mediumco31:online&quot;&gt;&lt;i&gt;medium.com&lt;/i&gt;. https://medium.com/boston-product/the-true-definition-of-done-c6c254a0ff3e&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="programming" /><category term="project management" /><category term="dod" /><category term="define-of-done" /><category term="backlog" /><summary type="html">Source: ILikeSQLData Azure Boards (AB) [1] is an essential tool for Project Management [2] in software development projects. It provides enough capabilities to the PM to manage the software projects with work items, agile boards, and backlog/sprints for each agile team. Linking commits and PRs to working items in Azure Repos [3], Azure Pipelines [4], and Azure Artifacts [5], Azure Boards also supports enhanced code analytics. By integrating with Azure Test Plans [6] (however, it is not free [7], 52$ per user per month for all above with test plans) to track the whole quality assurance processes, it provides an excellent user experience for development teams. Some recent features like Analytics views also give the PM more confidence in making decisions. However, the Azure Boards also lacks several important features of a perfect backlog: First, there is no Define-of-Done (DoD) checklist in AB by default. Second, there is not a clear feature to demonstrate the Product Vision to teams. (There is a Delivery Plan to show the roadmap towards a specific release goal). Finally, if users are already familiar with other tools like JIRA, then AB has a poor backlog view. This post introduces several extensions to solve these problems: Define-of-Done [8], Product Vision [9], and Backlog Essentials [10].</summary></entry><entry><title type="html">Integromat: An integration platform for workflow automation</title><link href="https://wanted2.github.io/pm/non-english/2021/11/01/integromat.html" rel="alternate" type="text/html" title="Integromat: An integration platform for workflow automation" /><published>2021-11-01T00:00:00+09:00</published><updated>2021-11-01T00:00:00+09:00</updated><id>https://wanted2.github.io/pm/non-english/2021/11/01/integromat</id><content type="html" xml:base="https://wanted2.github.io/pm/non-english/2021/11/01/integromat.html">&lt;p&gt;&lt;img src=&quot;/assets/img/integromat01.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cách đây gần chục năm, có 1 câu chuyện tôi từng chứng kiến như sau: có 1 anh sếp bạn tôi giao nhiệm vụ cho nhân viên mới vào làm.
Cậu nhân viên cũng mới vào ngành, nên nhiệm vụ cũng kiểu như các bài tập nhỏ để dần dần nắm bắt.
Hôm ấy, có giao cho 1 nhiệm vụ như thế này:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Sếp (S)&lt;/strong&gt;: Anh giao cho em một nhiệm vụ là thu thập dữ liệu từ nguồn cấp RSS (hiện tại có vài nghìn nguồn mở, bọn anh sẽ lên danh sách sau). Nhưng giờ anh có 1 nguồn là &lt;a href=&quot;https://vnexpress.net/rss/so-hoa.rss&quot;&gt;https://vnexpress.net/rss/so-hoa.rss&lt;/a&gt; mà bọn anh muốn thực hiện 1 workflow như sau:&lt;/p&gt;
  &lt;ul class=&quot;task-list&quot;&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Đầu tiên lấy dữ liệu từ &lt;a href=&quot;https://vnexpress.net/rss/so-hoa.rss&quot;&gt;https://vnexpress.net/rss/so-hoa.rss&lt;/a&gt; và parse thành 1 list các bài báo.
      &lt;ul class=&quot;task-list&quot;&gt;
        &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;yêu cầu ở đây là filter chỉ lấy ra những bài báo nào mà phần giới thiệu có nói về &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AI&lt;/code&gt;.&lt;/li&gt;
        &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Sau đó convert list của em lấy về thành CSV với tất cả các trường có thể lấy được.&lt;/li&gt;
        &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Upload file CSV lên OneDrive của team.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Song song với luồng CSV là luồng post bài đăng lên room chat của team trên Gitter.im&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;: &lt;strong&gt;Em lên stack công nghệ và estimate làm trong bao lâu hộ anh trước được không?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;đề-xuất-của-nhân-viên-em-xin-làm-2-tuần-ạ&quot;&gt;Đề xuất của nhân viên: Em xin làm 2 tuần ạ!&lt;/h1&gt;

&lt;p&gt;Bài toán này thực ra không có gì mới mẻ cả, mà là một dạng task mà trong đó có các thành phần của xây dựng một data warehouse cơ bản: luồng ETL cơ bản, lưu trữ dữ liệu dạng bảng (mà thực ra bảng cũng như SQL, về sau có thể thay thế bằng CSDL dạng quan hệ), rồi luồng thông báo cảnh báo lên chat hoặc SNS.
Vì hai luồng CSV và hook vào Gitter.im là song song nên có thể dính thêm tối ưu hóa đa nhiệm đa luồng.
Nói chung là 1 bài tập vừa sức và không quá hóc búa, một bài tập cơ bản cho kỹ sư data mới vào nghề.&lt;/p&gt;

&lt;p&gt;Trên đây là bản chất của bài toán, còn mục tiêu của đưa bài tập này với kỹ sư data lâu năm như anh bạn tôi thì là muốn xem mindset làm việc của nhân viên để còn bồi dưỡng dần dần.&lt;/p&gt;

&lt;p&gt;Dưới đây là bản đề xuất của cậu nhân viên:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nhân viên K&lt;/strong&gt;: Em xin đề xuất làm việc như sau ạ:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Với luồng CSV như anh giao, em sẽ dùng stack là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Python&lt;/code&gt; để lấy nguồn cấp RSS, dùng các thư viện như sau: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt; để parse RSS tree, và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pandas&lt;/code&gt; để tạo nội dung CSV, sau đó em dùng &lt;a href=&quot;https://docs.microsoft.com/en-us/onedrive/developer/rest-api/getting-started/?view=odsp-graph-online&quot;&gt;API&lt;/a&gt; của M$ để upload file lên OneDrive. Luồng này em estimate mất 7 ngày (4 ngày tạo file CSV và 3 ngày để upload lên OneDrive).&lt;/li&gt;
    &lt;li&gt;Với luồng post bài lên chat thì em phải đọc hiểu &lt;a href=&quot;https://developer.gitter.im/docs/welcome&quot;&gt;tài liệu&lt;/a&gt; của API của Gitter để post bài lên room, mất tầm 3 ngày nữa ạ.&lt;/li&gt;
    &lt;li&gt;Về kiến trúc để song song hóa hai luồng, em dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiprocessing&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threading&lt;/code&gt; ạ.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nhìn chung làm thế nào thì cũng được thôi.
&lt;strong&gt;Kết quả&lt;/strong&gt; mà ok thì cũng không vấn đề gì nếu quá trình có sai sót.
Có vấn đề sai sót ở quá trình thì cứ fix rồi commit lên mà đảm bảo kết quả cuối cùng ok thì không sao.
Tuy vậy kết quả kỳ vọng ở đây là gì?
CÓ 3 mặt:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;tốc độ làm việc&lt;/em&gt;: phải nhanh, 2 tuần là đề xuất của K.&lt;/li&gt;
  &lt;li&gt;sản phẩm có tính &lt;em&gt;khả dụng&lt;/em&gt; cao:
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;ít bugs ở sản phẩm đầu ra&lt;/em&gt;, còn các sản phẩm trung gian, các quá trình thì chả ai quan tâm. Code cũng được mà no-code, low-code cũng được.&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;triển khai và vận hành được luôn và ít sự cố&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Danh sách chi tiết liệt kê ra thì còn dài nhưng mà tạm thời với bài tập về nhà kiểu này thì tôi nghĩ anh bạn tôi có tiêu chí đánh giá thế là ổn thỏa rồi.&lt;/p&gt;

&lt;p&gt;Nhìn chung, tôi và anh bạn tôi cũng không phải kiểu dò xét từng chi tiết khiến nhân viên cảm thấy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bị soi&lt;/code&gt; khi làm việc, nên những chi tiết thì cứ giao các em làm, nhưng quản lý output và chất lượng.
Tuy nhiên, là bản đề xuất này coi như 1 output trung gian thì quả thực là hơi khiến anh em &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lăn tăn&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thứ nhất, là estimate 10 man-days tức là 2 man-weeks, 2 tuần làm việc.&lt;/li&gt;
  &lt;li&gt;Thứ hai là cách làm có vẻ hơi đòi hỏi anh em quản lý phải monitor và theo dõi từng khâu trong quy trình để đảm bảo ít bugs. Như vậy là tăng tải cho anh em quản lý.&lt;/li&gt;
  &lt;li&gt;Thứ ba là khâu triển khai và vận hành hầu như ko có ý kiến gì trong đề xuất.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Với người mới thì cũng cứ tạm cho làm rồi anh em mình uốn nắn dần Tuấn ạ.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Đây là lời tâm huyết của anh bạn tôi lúc bắt đầu cho cậu nhân viên K làm việc này.
Tôi lúc đó cũng không biết nói thế nào nên cứ để nó chạy thử xem.&lt;/p&gt;

&lt;h1 id=&quot;đánh-giá-thực-ra-bọn-anh-làm-tầm-5-10-phút-là-xong-em-ạ-&quot;&gt;Đánh giá: Thực ra bọn anh làm tầm 5-10 phút là xong em ạ …&lt;/h1&gt;

&lt;p&gt;Nhưng bây giờ nghĩ lại, tôi thấy đáng ra nên đánh chặn ngay từ đầu!
Làm quản lý chả ai muốn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;soi&lt;/code&gt; nhân viên cả, nhưng đề xuất làm như K là anh em phải chuẩn hóa quy trình, lên kế hoạch theo dõi, lên cảnh báo, …
trăm thứ bà rằn mà nói chung là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tăng tải&lt;/code&gt; cho quản lý.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Kết cục là không chỉ 2 tuần mà quá trình “uốn nắn” kéo dài 6 tháng luôn mà lúc triển khai và vận hành cũng vẫn không yên tâm về sự cố bất thình lình.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tại sao không nên đánh chặn ngay thì vì lý do giáo dục để hướng dẫn nhân viên cho lên dần dần.
Mình mà đánh chặn đôi khi lại gặp câu nói bất hủ:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Thế các anh làm đi?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ừ thì các anh làm thì chỉ mất tầm 5-10 phút thôi em ạ!
Và bọn anh lấy ví dụ mẫu là nền tảng tích hợp dịch vụ &lt;a href=&quot;https://www.integromat.com/en&quot;&gt;integromat.com&lt;/a&gt; cho nó nhanh nhé.&lt;/p&gt;

&lt;h1 id=&quot;cấu-hình-integromat&quot;&gt;Cấu hình integromat&lt;/h1&gt;

&lt;h2 id=&quot;đăng-ký-tài-khoản&quot;&gt;Đăng ký tài khoản&lt;/h2&gt;

&lt;p&gt;Đầu tiên là cũng nên có điều tra về nền tảng integration xem có gói nào phù hợp nhất.
Tuy nhiên, theo tôi tìm hiểu thì mảng tích hợp này cũng khá bão hòa và nhiều nền tảng rồi.
Tính năng cũng same same nhau.
Thôi thì tạm chọn integromat nhé.&lt;/p&gt;

&lt;p&gt;Thì integromat cũng offer nhiều gói: &lt;a href=&quot;https://www.integromat.com/en/pricing&quot;&gt;https://www.integromat.com/en/pricing&lt;/a&gt;.
Gói Free để demo thử thì bạn sẽ chỉ tạo được tối đa 2 scenarios.
Scenario timeout chỉ được 5 phút, minimum interval giữa hai lần chạy của scenario chỉ tối thiểu 15 phút.
Webhook queue size (số lượng webhook được lên queue thực hiện) cũng nhỏ hơn, storage ngoài cũng chỉ được 1MB.&lt;/p&gt;

&lt;p&gt;Thì quay lại đầu bài thì thực ra cũng chỉ cần update ở tầm 60 phút một lần.
Các chỉ số khác là đủ cho bản demo, và quan trọng hơn là triển khai vận hành cũng đủ để dùng trong thực tế.&lt;/p&gt;

&lt;p&gt;Ngoài ra gói có phí cơ bản cũng chỉ 9$/tháng.&lt;/p&gt;

&lt;p&gt;Đầu tiên vào trang &lt;a href=&quot;https://www.integromat.com/en/register&quot;&gt;Sign up&lt;/a&gt; dịch vụ, điền thông tin và đăng ký free thôi.
Integormat sẽ gửi link verify vào email đăng ký, và bạn phải click vào link trong email đăng ký ấy để kích hoạt tài khoản.&lt;/p&gt;

&lt;p&gt;Nhìn chung quá trình này mất 1-2 phút.&lt;/p&gt;

&lt;p&gt;Khi bắt đầu thì sẽ có một nút bấm trong trang MyPage để guide bạn onboarding nhanh chóng:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat02.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;thiết-kế-hệ-thống&quot;&gt;Thiết kế hệ thống&lt;/h2&gt;

&lt;p&gt;Bạn sẽ cần 1 trigger để theo dõi nguồn cấp RSS, một module để chuyển XML sang CSV, và một module để upload lên OneDrive.
Song song với đó, bạn cần 1 module để tích hợp với Gitter.im.
Bạn không nên quên &lt;strong&gt;xử lý lỗi&lt;/strong&gt; vì mọi module đều có thể có lỗi khi fetch data.&lt;/p&gt;

&lt;h2 id=&quot;cấu-hình-các-modules&quot;&gt;Cấu hình các modules&lt;/h2&gt;
&lt;h3 id=&quot;triggers&quot;&gt;Triggers&lt;/h3&gt;

&lt;p&gt;Đầu tiên bạn cần ấn nút &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Creat a scenario&lt;/code&gt; để tạo ra một kịch bản thực thi cho nhiệm vụ.
Mọi xử lý sẽ bắt đầu từ 1 &lt;strong&gt;trigger&lt;/strong&gt; mà bạn sẽ dùng RSS để bắt đầu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat03.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hãy chọn &lt;strong&gt;Watch RSS feed items&lt;/strong&gt;.
Trong cửa sổ tiếp theo hãy chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show advanced settings&lt;/code&gt;, nhập nguồn RSS và click OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat04.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trong cửa sổ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Choose where to start&lt;/code&gt; thì cứ chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;From now on&lt;/code&gt; cũng ok.
Thế là bạn đã có 1 trigger mà cứ mỗi khi có thay đổi trên nguồn cấp đã cho (tần suất kiểm tra sẽ cấu hình sau), thì lập tức trigger sẽ chạy luồng mà bạn sẽ cấu hình tiếp theo.&lt;/p&gt;

&lt;h3 id=&quot;xml-to-csv&quot;&gt;XML to CSV&lt;/h3&gt;

&lt;p&gt;Nhấn vào nút &lt;strong&gt;Add a module&lt;/strong&gt; như hình dưới:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat05.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó chọn module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CSV&lt;/code&gt; từ danh sách:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat06.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó bạn có thể nhập chọn những trường sẽ lấy từ nguồn RSS để tạo ra file CSV:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat07.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bạn có thể chọn GROUP BY bằng trường tùy thích.
Trên đây tôi chọn theo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;updated_at&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;upload-to-onedrive&quot;&gt;Upload to OneDrive&lt;/h3&gt;

&lt;p&gt;Để upload CSV lên OneDrive, bạn cần add thêm module OneDrive:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integormat08.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hãy chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Upload file&lt;/code&gt; ở cửa sổ chọn chức năng:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat09.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; để authenticate vào OneDrive:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat10.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó một pop-up sẽ mở ra để bạn xác nhận quyền truy cập của ứng dụng integromat vào OneDrive.
Khi xong bước này bạn sẽ quay lại thiết lập &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Folder&lt;/code&gt; thành &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, tên file thành &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xml&lt;/code&gt; và dữ liệu là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat11.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Để tránh lỗi bạn nên chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rename existing files&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;routing&quot;&gt;Routing&lt;/h3&gt;

&lt;p&gt;Vậy là bạn đã xong luồng thứ nhất mà chưa mất đến 5 phút đâu.
Trước khi add luồng thứ 2, chúng ta cần có 1 module để song song hóa, kiểu như &lt;strong&gt;Router&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat12.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau khi thêm router thì thiết kế của bạn sẽ như sau:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat13.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;post-news-to-chat-room&quot;&gt;Post news to Chat room&lt;/h3&gt;

&lt;p&gt;Từ Router hãy tạo thêm 1 luồng mới và tìm module Gitter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat14.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hãy chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Send a mesage to a room&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat15.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bạn sẽ phải đăng nhập và cấp quyền truy cập cho integromat vào Gitter.im.
Một cửa sổ popup sẽ mửo ra sau khi bạn nhấn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt;.
&lt;img src=&quot;/assets/img/integromat16.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chú ý là Gitter chỉ chấp nhận đăng nhập qua Gitlab, Github và Twitter.
Đây là kênh chat dành riêng cho developer.
Tôi chọn twitter thôi.&lt;/p&gt;

&lt;p&gt;Sau khi cấp quyền thành công, bạn sẽ quay lại integromat, và cấu hình tin nhắn sẽ lên Gitter.
Bạn có thể dùng định dạng mẫu markdown để post bài.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat17.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vậy đấy luồng số 2 đã xong trong chưa đầy 1 phút.&lt;/p&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;Error handling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat18.png&quot; style=&quot;width:50%; margin: 10px; float: right;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Xử lý lỗi luôn là một phần quan trọng của lập trình phần mềm.
Lỗi luôn xảy ra và cách handle lỗi rất quan trọng.
Bạn click chuột phải vào module cần xử lý lỗi và chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add error handlers&lt;/code&gt;.
Đó là tất cả việc bạn sẽ cần làm để bắt đầu xử lý lỗi trên integromat.
&lt;strong&gt;Tiện quá đúng không?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat19.png&quot; style=&quot;width:50%; margin: 10px; float: left;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vậy nội dung hàm xử lý lỗi sẽ như thế nào?&lt;/strong&gt;
Bạn có thể dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;directives (điều hướng)&lt;/code&gt; hoặc chạy một module nào đó.
Có vài điều hướng cơ bản:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rollback&lt;/code&gt;: revert lại mọi thay đổi.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Break&lt;/code&gt;: dừng tại đó.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resume&lt;/code&gt; một xử lý nào đó đang bị gián đoạn.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Commit&lt;/code&gt; một thay đổi hiện có.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ignore&lt;/code&gt; luôn!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trong ví dụ hiện tại, tôi tạm thời cho &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next&lt;/code&gt; luôn, tức là dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ignore&lt;/code&gt; cho upload file.&lt;/p&gt;

&lt;p&gt;Làm tương tự với các module khác, bạn có thể đảm bảo có xử lý lỗi trong từng trường hợp cụ thể.
Với module CSV convert thì tôi chọn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Break&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mô hình thực thi cuối cùng như sau:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat20.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;filters&quot;&gt;Filters&lt;/h3&gt;

&lt;p&gt;Để thực hiện điều kiện filter những tin có liên quan tới &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AI&lt;/code&gt;, bạn có thể dùng chức năng filter của integromat như sau.
Click vào link giữa trigger và router:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat21.png&quot; alt=&quot;integromat&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat22.png&quot; style=&quot;width:30%; margin: 10px; float: right;&quot; /&gt;
Testing là phần cần thiết trong phát triển phần mềm.
Các module đã được phát triển có SLA khá cao và unit testing cẩn thận nên ta sẽ skip UT lần này.
API testing cũng không cần vì các module đã được test cẩn thận và có SLA rồi.
Vậy ta cần test tích hợp (IT) thì sẽ có nút bấm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run once&lt;/code&gt;.
Tuy nhiên, bạn sẽ phải cần cấu hình Scenario như bên dưới:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat23.png&quot; style=&quot;width:50%; margin: 10px; float: left;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sau đó thì bạn sẽ thực hiện testing nhiều lần, cứ có bugs thì lại fix cho đến khi thấy mỹ mãn thì chuyển tới mục tiếp theo để vận hành thôi.&lt;/p&gt;

&lt;h2 id=&quot;vận-hành&quot;&gt;Vận hành&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/integromat24.png&quot; style=&quot;width:30%; margin: 10px; float: right;&quot; /&gt;
Trước khi triển khai vận hành, bạn phải cấu hình một chút về tần suất fetch news.
Như đã nói tần suất tầm 60 phút cũng ổn.&lt;/p&gt;

&lt;p&gt;Sau đó bạn ấn vào cái Switch button để chuyển sang ON/OFF là xong.&lt;/p&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;p&gt;Chúng ta đã điểm lại cách implement một dịch vụ fetch news và parse XML-to-CSV và post bài lên OneDrive cũng như Gitter.
Có áp dụng cả filter, router, …
Có đủ cả testing, vận hành, xử lý lỗi, … nên nhìn chung là một luồng ổn định để chiến lâu dài.&lt;/p&gt;

&lt;p&gt;Nhìn chung cách làm nào cũng được, nhưng dùng nền tảng có SLA cao thì anh em yên tâm hơn về xử lý sự cố, xử lý lỗi, …
Khi có vấn đề gì thì cứ theo luồng mà chạy thôi nên độ tự tin nó cao.&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="non-english" /><category term="programming" /><category term="project management" /><category term="workflow automation" /><category term="cicd" /><category term="notifications" /><summary type="html">Cách đây gần chục năm, có 1 câu chuyện tôi từng chứng kiến như sau: có 1 anh sếp bạn tôi giao nhiệm vụ cho nhân viên mới vào làm. Cậu nhân viên cũng mới vào ngành, nên nhiệm vụ cũng kiểu như các bài tập nhỏ để dần dần nắm bắt. Hôm ấy, có giao cho 1 nhiệm vụ như thế này: Sếp (S): Anh giao cho em một nhiệm vụ là thu thập dữ liệu từ nguồn cấp RSS (hiện tại có vài nghìn nguồn mở, bọn anh sẽ lên danh sách sau). Nhưng giờ anh có 1 nguồn là https://vnexpress.net/rss/so-hoa.rss mà bọn anh muốn thực hiện 1 workflow như sau: Đầu tiên lấy dữ liệu từ https://vnexpress.net/rss/so-hoa.rss và parse thành 1 list các bài báo. yêu cầu ở đây là filter chỉ lấy ra những bài báo nào mà phần giới thiệu có nói về AI. Sau đó convert list của em lấy về thành CSV với tất cả các trường có thể lấy được. Upload file CSV lên OneDrive của team. Song song với luồng CSV là luồng post bài đăng lên room chat của team trên Gitter.im S: Em lên stack công nghệ và estimate làm trong bao lâu hộ anh trước được không?</summary></entry><entry><title type="html">日本流【幹事】について</title><link href="https://wanted2.github.io/non-english/pm/2021/10/23/kanji.html" rel="alternate" type="text/html" title="日本流【幹事】について" /><published>2021-10-23T00:00:00+09:00</published><updated>2021-10-23T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/pm/2021/10/23/kanji</id><content type="html" xml:base="https://wanted2.github.io/non-english/pm/2021/10/23/kanji.html">&lt;p&gt;&lt;img src=&quot;https://www.insource.co.jp/common/img/column/column_project-management-top.jpg&quot; alt=&quot;幹事さん&quot; /&gt;
&lt;em&gt;出典： &lt;a href=&quot;https://www.insource.co.jp/contents/column_project-management.html&quot;&gt;insource.jp&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;昔数回「幹事をしろう」と言われたことがあるけど、よく幹事のお仕事について少し知識不足でした。
ホッとするともう2012年2013年ごろだったので、今だと8年か9年前の話でした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.insource.co.jp/contents/column_project-management.html&quot;&gt;プロジェクト・マネージャーには幹事力があった方がいい。&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;月日が経ってPM職にはなぜ【幹事力】が必要か少し理解できるようになりました。
日本語の中に【カンジ】というと【漢字】と書けるし、【幹事】と【監事】とも書けます。
もちろん、PMには字を読めないといけないので、【漢字力】が必要ですし、
日々でプロジェクトの品質や正常な状態を保つためには、監査作業を行うのも重要で、その監査を行うには【監事力】も必要になりますが、
総合的にPJをちゃんと稼働させるためには、【幹事力】は大事だなと思っています。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;幹事とは&quot;&gt;幹事とは&lt;/h1&gt;

&lt;p&gt;日本語にはよくある現象ですが、読み方が同じものでも、書き方が違って意味が違うものがちらほらあります。
【カンジ】もそのシャドウ現象の一例です。
日本語学校に通った時で、2千文字以上の漢字を学んだことがあるけど、日本語能力試験には【漢字力】が必要なためです。
プロジェクトマネジメントの側面に近いけれども、PJはちゃんとしているか監査作業が必要になり、監査を行った後には、監査報告書を書くことになり、【監事力】が必要な場合も珍しくありません。
しかし、この二つのカンジと重なって、【幹事】というものもあります。
主に飲み会の幹事などよく見られています。
飲み会だろうから、PMには関係ないじゃないか。
業務外の話じゃないかと思うかもしれませんが、実際にはよくPMの話と重なっています。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;「自分がプロジェクトリーダーになる際不安なことはなんですか？」という質問への回答として、以下のようなお悩みをよく伺います。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;目的やゴールの設定が苦手&lt;/li&gt;
    &lt;li&gt;スケジュールや計画の立て方がわからない&lt;/li&gt;
    &lt;li&gt;関係部署と綿密な連携（コミュニケーション）が取れるか不安&lt;/li&gt;
    &lt;li&gt;重視するリスクがわからない&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;これも幹事さんの悩みと良く重なっています。
&lt;strong&gt;幹事力を持っている方はPM力も鍛えます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;幹事をやるとPMの仕組み、【定義】、【計画・事前準備】、【実施】、【終結】などのステップを鍛えることができるメリットがあります。
しかし、それだけではなく、メンバー間の関係を密にさせたり、チームを盛り上げて生産力を向上したりするために、行事を催すことも大事です。
その行事をうまく開催するためには、もちろん幹事さんは必要で監事力もある場面で不可欠な要素です。&lt;/p&gt;

&lt;h1 id=&quot;幹事力を身につく&quot;&gt;幹事力を身につく&lt;/h1&gt;

&lt;h2 id=&quot;ワークフローを稼働する前に&quot;&gt;ワークフローを稼働する前に&lt;/h2&gt;

&lt;p&gt;幹事さんのお仕事、特にチームワークの時のイベントの幹事さんのお仕事は、仕事ですので、決まったフローがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/kanji-workflow.svg&quot; alt=&quot;workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;飲み会を催すことなんだけれども、プロジェクト管理に近いですね。&lt;/p&gt;

&lt;h2 id=&quot;定義&quot;&gt;定義&lt;/h2&gt;

&lt;p&gt;まず、PMの【要件定義】と同様に、幹事職に就く時には、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：なんのためにこの会を行うか
↓&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;主役決め&lt;/strong&gt;: 誰が何を担当するか。諸段階では、数人のPIを読んで構成を作ることもPMではよくあるシナリオで、幹事の場合、幹事さんが連絡担当や注文担当などを決めて進める。
↓&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;工夫&lt;/strong&gt;: 主役メンバーの会議でどの工夫を行って主役も参加メンバーも会を楽しめるか一緒に決めといた方が良い。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目的や開催テーマを決めない場合、話しづらいという会はよくありますので、事前に主役メンバーで決めて、参加メンバーの間の会話を促進すると良いでしょう。
テーマを決めないでそのまま進めてしまうというありがちなミスは若手幹事にはよくあります。&lt;/p&gt;

&lt;h2 id=&quot;事前準備&quot;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;【要件定義】はある程度出来たら、次にようやく計画段階に入れます。
スケジュール管理やリソース管理は先に行い、リスク管理を考えて、上長の承認とメンバーへの通知をするという流れはPM職にはよくあります。
偶然にも幹事のお仕事にも同じワークフローがあります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/kanji-plan.svg&quot; alt=&quot;planning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;まず、決めたテーマはチームのニーズに合うかどうか&lt;strong&gt;ニーズ調査&lt;/strong&gt;を行ってテーマを調整した方がいいです。
チームのニーズにあったテーマが出来上がったら、参加者を絞って、&lt;strong&gt;参加者名簿&lt;/strong&gt;を作ればいいです。
後で連絡やリマインドを送るためにはメーリングリスト（ML）を作ったらいいでしょう。
その次に、平行に行えると思うが、&lt;strong&gt;日程調整&lt;/strong&gt;と&lt;strong&gt;場所調整&lt;/strong&gt;をメンバー間で話せます。
日程調整の際に、メンバーの出欠確認も同時に行えることがあります。
開催時間も事前にチームで合意をとった方がよいでしょう。
長すぎて拘束時間は大幅になると若者が飽きてしまうため、2時間程度で良いと思われます。
場所、つまり、お店を選択する際に、メンバーのこだわりを聞いた方が良いが、事前に可能なお店のリストを作って、皆の投票で決める手段も良いです。
アレルギーがあるメンバーもいるかもしれないため、場所を選択する時、考慮した方が無事です。
また、すべての決断をチームで行うことも第一原則で、チームの中には&lt;strong&gt;透明性&lt;/strong&gt;があげられます。&lt;/p&gt;

&lt;p&gt;メンバーと日程と場所が決まったら、計画はほぼ完了したが、ここで一旦リスクを見直した方がいいです。
&lt;strong&gt;リスク管理&lt;/strong&gt;を行うときに、プロジェクトがうまくいかない原因に、「事前の下調べが足りておらず、プロジェクト進行中や後日トラブルが発生することになった」というものを気づけた方が無難です。
幹事の場合、お店の選定にリスクが潜んでいます。最近は、検索サイトで便利にお店を探すことができますが、リスクマネジメントの観点から下見をおすすめします。
上級者を目指すならお店の責任者と名刺交換し、会の趣旨を伝えておくと万全です。
お店のホスピタリティもわかって安心ですね。
あとは、資金調達もやったらいいです。
支払方法を皆の都合に合わせばいいんで、終了後でも決められます。
あとは、二次会が出て、遅くなるとどうするか、気配ったら良い計画になるであろう。&lt;/p&gt;

&lt;p&gt;リスクをちゃんと管理できれば、次に、予約する前に、一回上長と相談し、経験のある方に意見をもらって&lt;strong&gt;承認&lt;/strong&gt;をいただくと無難でしょう。
&lt;strong&gt;予約&lt;/strong&gt;が出来たら、案内状をチームに告知する必要があります。
これも&lt;strong&gt;進捗報告&lt;/strong&gt;という義務です。
最後に、&lt;strong&gt;出欠確認&lt;/strong&gt;も忘れずに行きましょう。&lt;/p&gt;

&lt;h2 id=&quot;実施&quot;&gt;実施&lt;/h2&gt;

&lt;p&gt;ようやく実施に入ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/kanji-implement.svg&quot; alt=&quot;implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;多忙で忘れてしまうメンバーもいるので、開催当日の朝礼や前日には一回&lt;strong&gt;リマインド&lt;/strong&gt;をした方がよいです。
メールで連絡するとわからない人もいるので、チャットや口頭で確認したらいいです。
会の前にお店へ&lt;strong&gt;移動&lt;/strong&gt;します。
予約時間にするときにアクセスも重要なポイントで、できるだけ皆はすぐにアクセスできるお店を選びます。
予約時間に遅れそうな場合、お店に連絡します。
会計の方法と時間も確認します。
&lt;strong&gt;開始&lt;/strong&gt;の際には、席へメンバーを誘導し、注文を始めます。
&lt;strong&gt;進行中&lt;/strong&gt;には、乾杯や挨拶、遅れたメンバーの追加注文などのイベントも忘れずにやっていきましょう。
&lt;strong&gt;会話を盛り上げる&lt;/strong&gt;ためには、司会役も工夫を行いましょう。
会の&lt;strong&gt;後半&lt;/strong&gt;になると、スピーチなどで会を盛り上げます。
&lt;strong&gt;終了時&lt;/strong&gt;に忘れ物がないように、注意の声をかけ、会計もちゃんとしましょう。&lt;/p&gt;

&lt;h2 id=&quot;事後報告&quot;&gt;事後報告&lt;/h2&gt;

&lt;p&gt;実施終了はPJの終了ではない。
同様に会の実施終了後にも幹事さんがやる仕事があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;安否確認&lt;/strong&gt;でメンバーがちゃんと帰宅できたかやった方が無難です。人というリソースを大事にするためです。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;報告書&lt;/strong&gt;を書いた方がいいです。上長が実施状況がわかるように、メンバーも今後の実施の改善になる要素です。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;振り返り&lt;/strong&gt;は主役メンバーで行い、今後改善する可能性を開けます。参加メンバーを誘っても良いです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ツール&quot;&gt;ツール&lt;/h2&gt;

&lt;p&gt;私は昔幹事さんをサポートするツールの開発にもかかわった経験があったが、それが10年前の話でした。
現在、世の中に幹事さんの業務フロー全体をサポートするツールはたくさんあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定義や計画を書きコミュニケーションを補足するためには、GoogleのMeetやOfficeやSlackなど充実しています。&lt;/li&gt;
  &lt;li&gt;日程調整は、&lt;a href=&quot;https://chouseisan.com/&quot;&gt;調整さん&lt;/a&gt;や&lt;a href=&quot;https://www.polly.ai/&quot;&gt;Polly&lt;/a&gt;などのツールがあります。PollyはチャットツールのSlackやTeamsにも連携できます。&lt;/li&gt;
  &lt;li&gt;場所調整のために、&lt;a href=&quot;https://tabelog.com/&quot;&gt;食べログ&lt;/a&gt;などを使えばいいでしょう。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一つの場所にまとまっていないが、コンボで利用できるので、幹事さんもPMさんもコンボ利用を使っているのであろう。
今後、すべて一つの場所に集中する基盤があるといいかもしれません。&lt;/p&gt;

&lt;h1 id=&quot;なぜそれが重要か幹事に学ぶプロジェクトマネジメント&quot;&gt;なぜそれが重要か：幹事に学ぶプロジェクトマネジメント&lt;/h1&gt;

&lt;h2 id=&quot;チームワークを良くする&quot;&gt;チームワークを良くする&lt;/h2&gt;

&lt;p&gt;行事は飲み会だけではなく、PJ内で情報を共有し、透明性をあげ効率を向上する勉強会などの開催もしばしば必要になります。
これらの会を行うおかげで、チームワークをスムーズに活性化できます。
信頼関係を構築できるし、楽しく働けます。&lt;/p&gt;

&lt;h2 id=&quot;チームワークの効率の改善&quot;&gt;チームワークの効率の改善&lt;/h2&gt;
&lt;p&gt;長時間でコードを書いて、飽きてしまって、効率も悪くなるし、モチベーションも下がってしまうため、さぼることは避けられません。
これは開発現場の実践でした。
もう10年前の話だったが、幹事さんの立場を大事にしなければなりません。
PMも幹事力を身に付きましょう。&lt;/p&gt;

&lt;h1 id=&quot;結論&quot;&gt;結論&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/chouseisan.png&quot; alt=&quot;implementation&quot; /&gt;
&lt;em&gt;出典： &lt;a href=&quot;https://chouseisan.com/&quot;&gt;調整さん&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;偶然にも、幹事さんもPMさんも似ているワークフローでチームワークを向上しています。
行事は飲み会だけではなく、勉強会などでも幹事力を身についた方が良いです。
例えば、↑の図で&lt;a href=&quot;https://chouseisan.com/&quot;&gt;調整さん&lt;/a&gt;の対象行事の一覧を引用しますが、飲み会以外にも同窓会や忘年会なども対象です。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;最後に確かに、PMさんもその幹事力を身につきましょう。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="pm" /><category term="project management" /><category term="kanji" /><summary type="html">出典： insource.jp 昔数回「幹事をしろう」と言われたことがあるけど、よく幹事のお仕事について少し知識不足でした。 ホッとするともう2012年2013年ごろだったので、今だと8年か9年前の話でした。 プロジェクト・マネージャーには幹事力があった方がいい。 月日が経ってPM職にはなぜ【幹事力】が必要か少し理解できるようになりました。 日本語の中に【カンジ】というと【漢字】と書けるし、【幹事】と【監事】とも書けます。 もちろん、PMには字を読めないといけないので、【漢字力】が必要ですし、 日々でプロジェクトの品質や正常な状態を保つためには、監査作業を行うのも重要で、その監査を行うには【監事力】も必要になりますが、 総合的にPJをちゃんと稼働させるためには、【幹事力】は大事だなと思っています。</summary></entry><entry><title type="html">構想フェーズから終了までの研究開発サイクル</title><link href="https://wanted2.github.io/non-english/se/pm/2021/10/23/rd-pj-lifecycle.html" rel="alternate" type="text/html" title="構想フェーズから終了までの研究開発サイクル" /><published>2021-10-23T00:00:00+09:00</published><updated>2021-10-23T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/pm/2021/10/23/rd-pj-lifecycle</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/pm/2021/10/23/rd-pj-lifecycle.html">&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/8/81/Cycle_of_Research_and_Development.svg&quot; alt=&quot;rd&quot; /&gt;
&lt;em&gt;Source: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;研究開発は大別すると基本的な原理や性質を知るための純粋基礎研究、特定の実際的目的のために行われる目的基礎研究、特定の要請に答えるための応用研究、新製品を導入するための研究に分かれる。
Source: wikipedia.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hoạt động nghiên cứu và phát triển (R&amp;amp;D)&lt;/strong&gt; là hoạt động do các công ty tổ chức thực hiện nhằm đổi mới sáng tạo dẫn đến &lt;strong&gt;tri thức, sản phẩm và dịch vụ mới&lt;/strong&gt;.
Phân loại dự án R&amp;amp;D thì tùy vào mục đích có thể phân thành: R&amp;amp;D cơ bản “thuần” (phát hiện định luật, định lý, tính chất mới mang tính &lt;strong&gt;tổng quát&lt;/strong&gt;), R&amp;amp;D cơ bản “có mục đích cụ thể” (phát hiện định luật, định lý và tính chất mới trong 1 ngành hẹp, không cần tổng quát), và R&amp;amp;D ứng dụng (sử dụng kết quả của R&amp;amp;D cơ bản để tạo ra sản phẩm mới, dịch vụ mới).
Dù là cơ bản thuần, cơ bản hẹp hay ứng dụng thì nhìn chung dự án R&amp;amp;D đều là dự án và là đối tượng của ngành Project Management.
Tuy nhiên, vì là đi tìm cái mới nên dù cái mới là mang tính lý thuyết (cơ bản thuần và cơ bản hẹp) hay ứng dụng, thì dự án R&amp;amp;D có những đặc điểm riêng khác với dự án thông thường: outcome của dự án nghiên cứu thường khó định hình ngay từ đầu và đôi khi hơi mơ hồ với những người làm kỹ thuật (&lt;em&gt;bởi vì nếu cái mới mà mình đã biết từ đầu thì nó đâu còn là cái mới nữa đúng không các bạn?&lt;/em&gt;)
Thi thoảng dự án nghiên cứu sẽ không có outcome, nhưng đột nhiên một vài tuần sau lại output ra tới tấp!
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;vòng-đời-dự-án-và-ví-dụ-về-dự-án-nghiên-cứu-thiết-kế-hệ-thống-quản-lý-sân-bay&quot;&gt;Vòng đời dự án và ví dụ về dự án nghiên cứu thiết kế hệ thống quản lý sân bay&lt;/h1&gt;

&lt;h2 id=&quot;vòng-đời-dự-án-rd&quot;&gt;Vòng đời dự án R&amp;amp;D&lt;/h2&gt;
&lt;p&gt;Dự án nghiên cứu thường hình thành từ một quá trình là một nhà đầu tư (cá nhân hoặc tổ chức cung cấp kinh phí như NSF hay DARPA) công bố một lĩnh vực hay chủ đề nghiên cứu và kêu gọi các nhóm nghiên cứu trong toàn quốc hoặc thậm chí trên thế giới gửi proposal lên phê duyệt kinh phí (grant).
Các nhóm nghiên cứu có thể ở trường đại học hay trong công nghiệp đều được.
Các nhóm có thể proposal độc lập hoặc hợp tác nghiên cứu.
Trong trường hợp hợp tác nghiên cứu, yếu tố như việc không để xảy ra conflicts, phân chia công việc, communication để đảm bảo việc collaborate diễn ra trơn chu sẽ được xem xét cẩn thận.
Khi kêu gọi này được công bố, các viện hoặc các trường, tổ chức sẽ nhận thông báo và gửi đến từng nhóm nghiên cứu dưới quyền.
Các nhóm sẽ bắt đầu thực hiện quá trình proposal để nhận grant.
Các Project Investigators (PI) sẽ được bầu lên để thực hiện quá trình này.
Trong quản lý dự án, nó sẽ ứng với quá trình Định nghĩa (要件定義).
Sau khi có bản proposal nêu đầy đủ mục đích và giá trị nghiên cứu, những stakeholders sẽ tham gia và quan trọng nhất là tầm nhìn về cái &lt;strong&gt;mới&lt;/strong&gt; mà dự án sẽ output ra, thì nhóm PIs sẽ trình bày kết quả điều tra lên hội đồng cấp duyệt kinh phí.&lt;/p&gt;

&lt;p&gt;Sau khi được phê duyệt (承認済み) thì các nhóm nghiên cứu được cấp grant sẽ tiến hành thiết kế tỷ mỷ, lên action plan mà sẽ ở dạng WBS, lên kế hoạch tỷ mỷ về cả schedule lần resource (con người và thiết bị), …&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q: Các bạn sẽ thấy lạ là tại sao có thể phê duyệt cấp grant khi mà chỉ có 1 bản proposal sơ khai chứ chưa triển khai gì hết?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Thì thực ra tính bất định của dự án nghiên cứu như đã nói ở trên: nếu cái mới mà đã biết từ đầu thì lại không phải cái mới! Do đó, theo tôi hiểu sẽ chủ yếu dựa vào cái gọi là “uy tín và kình nghiệm” của PIs dự án là chính.
PI có nhiều kinh nghiệm sẽ viết ra 1 bản proposal chi tiết mà qua đó thể hiện hết &lt;strong&gt;khả năng thực thi&lt;/strong&gt; của nhóm.
Thì đúng rồi, có khả năng thực thi thì là điều kiện tiên quyết, chứ không có khả năng thực thi thì out ngay!
Thế nên vị trí PI ở những tổ chức cấp grant danh giá, thường là các giáo sư có bề dày thành tích cả về nghiên cứu lần hướng dẫn sinh viên.
Các thành phần trẻ hơn thì cũng có nhưng hiếm và thường là như các cụ gọi là “con ông cháu cha” (không có ý xấu nhé!).
&lt;strong&gt;Tức là nhìn chung là sẽ ít rủi ro và không biết ra được cái gì nhưng có độ chắc chắn sẽ ra được một cái gì đó cao!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sau khi lên kế hoạch tỷ mỷ thì việc &lt;strong&gt;thực thi&lt;/strong&gt; là bắt buộc. Trong quá trình thực thi việc audit dự án sẽ thường xuyên xảy ra để đảm bảo các giáo sư và nhóm nghiên cứu sử dụng kinh phí và resource hợp lý, đồng thời tiến độ diễn ra chuẩn.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q: Vậy nếu không biết cái mới là gì từ đầu thì dự án có deadline không?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A: Nhìn chung là không, mà sẽ chạy cho đến khi hết tiền hoặc hết hạn (tổ chức có thể cấp dạng hợp đồng 1 triệu đô trong 5 năm) thì thôi.&lt;/strong&gt; Tuy nhiên tùy vào tổ chức cấp grant, việc audit và đòi báo cáo hàng năm hoặc hàng quý là có. Đến quý đến năm mà không có gì thì việc cấp tiếp là có thể sẽ bị xem xét lại.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cuối cùng, là sau một thời gian dài vô cùng áp lực (bởi ngay cả người xin tiền cũng không biết là mình sẽ output ra cái gì, lúc nào cũng nơm nớp bị cắt grant) thì nếu có được thành quả đáng kể đúng hạn báo cáo năm thì dự án sẽ đóng lại với &lt;strong&gt;tổng kết và báo cáo&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q: Tôi thấy có nhiều nhóm nghiên cứu đơn giản là publish xong paper lên hội nghị lớn hoặc tạp chí danh tiếng là kết thúc. Vậy việc thực thi lên sản phẩm thì thế nào?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Nhìn chung thì những nghiên cứu ứng dụng như vậy thì phần publish paper sẽ không output ra sản phẩm mà để có thể lên sản phẩm thì nhóm sẽ phải kết hợp với bên các cty để thực hiện nghiên cứu cộng tác.
Ở dạng này thì sự phân công sẽ là nhóm nghiên cứu của đại học làm những phần điều tra kỹ thuật, pilot study là cùng.
Sau đó thì khi có output ở dạng paper thì chuyển lại cho bên nghiên cứu công nghiệp triển khai sản phẩm.
Tuy nhiên, có nhiều nghiên cứu công nghiệp mang tính tuyệt mật, chuyện publish paper bị chặn luôn mà bên cty công nghiệp có thể yêu cầu chỉ nộp patent thôi chả hạn.
Nhưng nếu grant là của NSF hoặc các tổ chức phi lợi nhuận thì nhóm bạn có thể yên tâm ngồi viết paper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;ví-dụ-về-dự-án-hệ-thống-quản-lý-sân-bay&quot;&gt;Ví dụ về dự án hệ thống quản lý sân bay&lt;/h2&gt;

&lt;p&gt;Để cho gần với thực tiễn ngành trí tuệ nhân tạo, chúng ta cùng nhìn vào 1 dự án thực tế giấu tên.
&lt;strong&gt;Hệ thống quản lý sân bay (Airport Management System, hay viết tắt là AMS)&lt;/strong&gt; là một phần không thể thiếu trong tối ưu hóa hoạt động của sân bay, đặc biệt là các sân bay lớn như JFK airport.
Năm nay tổ chức Foundation X lại tự dưng xuất fund nghiên cứu cho lĩnh vực tự động hóa sân bay, chủ đề tuyệt vời cho các nhóm nghiên cứu trong hầu hết các lĩnh vực của trí tuệ nhân tạo như tối ưu hóa nguồn lực, bảo mật hệ thống, logistic, tính toán song song, …
Grant tạm tính sơ là 1 triệu đô trong 5 năm đi chẳng hạn hoặc tùy vào estimate của các proposals.&lt;/p&gt;

&lt;p&gt;10 nhóm nghiên cứu từ các trường đại học khác nhau trong toàn quốc nhận thấy năng lực thực thi phù hợp và muốn cùng nhau viết grant để giành fund này.
10 giáo sư đứng đầu các nhóm đứng tên làm PI và phân chia mỗi người mỗi mảng ứng với 10 mảng được công bố trong thư mời nộp proposal.
Trong đó có 2 nhóm nghiên cứu của giáo sư A và giáo sư B muốn hợp tác cùng nhau.
Nhóm A làm về tối ưu hóa nhân lực và lên kế hoạch di chuyển trong hệ thống.
Nhóm B làm về hệ thống theo dõi và bảo mật.
Tại sao 2 nhóm này muốn cộng tác bởi vì tiền đề để thực hiện các nghiệp vụ tương ứng trong mảng của họ thì đều dựa trên thu thập observations từ sensors.
Sau khi tracking, classifying, detecting, analysing flows của các observations thì họ aggregate kết quả và output ra những cảnh báo real-time (nghiệp vụ của giáo sư B) hoặc tích lũy vào data warehouse và rồi xử lý analytics dạng batch (nghiệp vụ của giáo sư A).
Với xuất phát điểm chung từ điểm phân tích dữ liệu nên 2 giáo sư và cũng là 2 PIs quyết định hợp tác nghiên cứu.
Đầu tiên là họ sẽ dành ra 6 tháng để làm proposal và họ sẽ thuê 1 postdoc làm trợ tá để làm hộ thí nghiệm pilot study (deadline của proposal là tháng 8, nhưng các giáo sư đã phong phanh nghe tin và rục rịch chuẩn bị từ tháng 2 lúc call for proposals còn đang ở dạng draft).&lt;/p&gt;

&lt;h1 id=&quot;giai-đoạn-1-định-nghĩa&quot;&gt;Giai đoạn 1: Định nghĩa&lt;/h1&gt;

&lt;p&gt;Giai đoạn này, có thể từ vài tháng, nhưng thường khoảng 6 tháng và output là 1 bản proposal có thể giành grant để anh em cùng nhau chiến tiếp.
Thì có khi sản phẩm là cả 1 hệ thống warehouse lớn, nhưng trong giai đoạn này chỉ làm những demo, PoC hoặc pilot study nhỏ.
Hoặc cùng lắm tạo ra bộ khung.
Và người hiểu rõ nhất chỉ có PI.
Còn kể postdoc hay Phd student hay associate thì nhìn chung cũng chỉ nhận task và làm báo cáo cho giáo sư đọc.
Big picture vẫn nằm trong tay PI.&lt;/p&gt;

&lt;p&gt;Nay có 1 postdoc C có background đúng về mảng tracking, analytics như vậy thì đương nhiên 2 giáo sư sẽ phải xâu xé để giành lấy.
Nhưng sẽ tốt hơn về mặt phân chia nguồn lực nếu 2 giáo sư cùng dùng chung postdoc.&lt;/p&gt;

&lt;p&gt;Thì giáo sư A chủ yếu về mảng quản lý dự án dạng big data (xử lý cũng ko cần real-time) mà có thể tích lũy và xử lý theo batch trên server trung tâm.
Giáo sư là PI mảng Resource Allocation and Schedule Planning.
Ví dụ như sân bay JFK thì bên trong phải có một số lượng lớn lao công hoạt động trong ngày.
Nếu phân bổ nguồn tài nguyên này hợp lý có thể tiết kiệm việc sử dụng ngân sách cho việc lau dọn.
Ví dụ như nếu track được 1 nhân viên lao công Y đang gần khu vực hành khách Z thì có thể tính điểm assign Y vào lau dọn Z ngay nếu trạng thái của Z đang là bẩn.
Tuy nhiên khi scale bài toán lên vài trăm khu vực và vài trăm lao công chia thành nhiều ca thì bài toán không còn nhỏ nhưu vậy.&lt;/p&gt;

&lt;p&gt;Giáo sư B thì lại chuyên về Security.
Ví dụ như từ camera mà phát hiện ra người khả nghi và track được người đó trong nhiều frame tiếp theo đang thực hiện hành vi phạm tội thì có thể lên cảnh báo theo ngưỡng.
Ngoài cảnh báo realtime thì giáo sư còn làm early detection và prediction để dự báo những nguy cơ và ngăn chặn chúng khi chưa xảy ra trong thì tương lai gần.&lt;/p&gt;

&lt;p&gt;Các bạn thấy đấy, phần chung thì vẫn là những xử lý như vậy, sau đó thì phần riêng tuy khác nhau nhưng nếu phải thuê 2 postdocs thì hơi lãng phí nên có thể thuê 1 postdoc rồi các giáo sư thay phiên nhau dùng.&lt;/p&gt;

&lt;p&gt;Nhiệm vụ của postdoc C được thuê sẽ là phải thực hiện phân tích pilot trên dữ liệu sân bay đã.
Khi được cả 2 giáo sư thông qua thì move sang phần analytics của giáo sư A trước rồi làm phần real-time của giáo sư B.
Hoặc song song luôn cũng OK.
Tuy nhiên, hàng tuần nên book lịch họp weekly với cả 2 giáo sư và tốt nhất lời khuyên của tôi là sớm nắm bắt cái big picture và cái phần Resource Management and Schedule Management của giáo sư A đã.
Mình có 6 tháng thôi nên chủ động là không thừa!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q: Chủ động book lịch với GS nhưng xong em cũng chả biết nói gì anh ạ.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; (“Đụt” thế thì anh cũng chịu!) Nói chung là communicate với giáo sư cũng như là bắt sóng ăng ten ấy mà. Sóng của PI luôn là sóng tần cao (high frequency signal) mà ăng ten của em hơi kém thì cứ nói thẳng vấn đề ra để giáo sư nâng cấp cho.
Chủ đề nói chuyện em nên quyết định trước khi book. Nhưng trường hợp của dự án này thì chắc chắn là liên quan tới việc xin grant.
Em có thể nói thẳng cảm nghĩ ra vì giáo sư rất là open.
Ví dụ em điều tra thấy độ khả thi thấp em cứ thằng thắn “Tôi thấy cái dự án này như sh&lt;strong&gt;. Tôi nghĩ không xin được grant đâu.” thì giáo sư là người open ông cũng sẽ lắng nghe em thôi.
Không nên để muộn quá vì bản thân PI cũng đang muốn dùng em để kiểm tra xem cái đề tài này có phải sh&lt;/strong&gt; thật không?
nên tốt nhất ngồi điều tra 1-2 hôm thấy bế tắc là phải báo ngay để PI dừng lại hoặc phân bổ em vào dự án khác cho đỡ lãng phí resource.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q: Giai đoạn này có nên nộp paper không?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; ôi tuyệt quá. Em cần hiểu PI cũng đang muốn dùng 6 tháng này để kiểm tra độ khả thi của proposal.
Nếu nộp paper bị reject thì cũng là tín hiệu để họ biết nên dừng lại, đổi đề tài.
Còn accept thì cứ thế thẳng tiến. Vì paper cũng sẽ là luận cứ để tiếp tục nên em nhớ nếu định nộp paper thì nên nộp ngay 1-2 tháng đầu.
Vì chẳng may độ khả thi thấp (dự án đề tài kém) thì người ta sớm điều chỉnh lại resource hoặc revise lại proposal của grant.
Chứ đừng để đến cuối giai đoạn mới nộp là không trở tay kịp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nhìn chung thì các bạn cần hiểu là paper thì với các giáo sư nó chỉ mang tính chất xác nhận một cái grant nào đó và cái grant đó mới là cái đem lại tiền chứ paper thì chả đem lại đồng nào dù là hội nghị danh tiếng như CVPR/ICCV/ECCV/… hay tạp chí Q1 (đã ko đem lại tiền lại còn tiêu tiền đi dự hội nghị, phí đăng bài, …).
Nên cố gắng nộp theo chủ để grant của giáo là tốt nhất, thì giáo còn thấy có &lt;strong&gt;lợi ích&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;giai-đoạn-2-thiết-kế-và-lên-kế-hoạch&quot;&gt;Giai đoạn 2: Thiết kế và lên kế hoạch&lt;/h1&gt;

&lt;p&gt;Sau khi proposal được phê duyệt lần đầu, có thể sẽ phải dành thêm 1 thời gian ngắn để lên kế hoạch tỷ mỷ những việc cần làm.
PI sẽ phải tìm và chỉ định các chức danh dự án như PM, PO, developers, research associates, …
Sau khi có danh sách members, thì việc tiếp theo là mua sắm trang bị, rồi lên action plan.
Lúc này có thể tạo ra Work Breakdown Structure (WBS), nhưng nhìn chung do đi tìm cái mới nên sẽ dừng ở mức assign mỗi member một chủ đề và coi mỗi chủ đề như 1 PJ nhỏ (sub-PJ).
Và giáo sư sẽ như là supervisor trong việc lên kế hoạch cũng như thực thi.
Tuy nhiên khi đã trở thành chủ nhân của 1 sub-PJ thì mỗi bạn sẽ đóng vai trò như 1 leader hoặc sub-PM.
Đây sẽ là các bạn PhD hoặc postdoc có đề tài cụ thể, và tạo sub-WBS cho từng sub-PJ và assign tasks cho các bạn master BS bên dưới.
Các nghiệp vụ dự án như quản lý nhân lực tài nguyên, schedule, tiến độ, communication, setup họp hành sự kiện cũng phải có xác nhận của PI và báo cáo nên đều đặn.&lt;/p&gt;

&lt;h1 id=&quot;giai-đoạn-3-thực-hiện-và-kiểm-chứng&quot;&gt;Giai đoạn 3: Thực hiện và kiểm chứng&lt;/h1&gt;

&lt;p&gt;Giai đoạn này là giai đoạn nóng nhất vì nó sẽ tạo ra output cho các sub-PJ nói riêng và PJ lớn nói chung.
Tại sao phải chia nhỏ ra nhiều mảng thành nhiều sub-PJ bởi vì nếu để cả cục lớn thì nếu cục ấy ko có output là dự án chết luôn.
Nhưng khi chia nhỏ thì sub-PJ này chưa có output “mới” thì sub-PJ khác có output “mới” mà mỗi lần báo cáo chỉ cần có 1 cái mới là đủ OK!
Việc tiến hành vẫn phải đảm bảo tính minh bạch thông qua nghiệp vụ audit từ bên cấp fund.
Ngoài ra các hoạt động báo cáo tiến độ, tố chức xử lý sự cố, vấn đề, họp hành, chia sẻ tri thức trong dự án cũng không nên coi nhẹ.&lt;/p&gt;

&lt;p&gt;Dự án nghiên cứu nên cứ chạy cho tới khi hết tiền hoặc hết hạn.
Do vậy sau mỗi kỳ báo cáo năm, có thể các PI sẽ tổ chức hoạch định lại để nâng cao chất lượng output.
Cũng vì thế việc thay đổi WBS có thể diễn ra theo năm hoặc nửa năm.
Tốt nhất mỗi sub-PJ nên nhận một mảng và thiết lập WBS của công việc đủ chạy trong nửa năm/1 năm hoặc đến kỳ báo cáo kết quả dự án của PI với tổ chức cấp grant.&lt;/p&gt;

&lt;p&gt;Tùy đặc điểm dự án mà quá trình thực hiện và kiểm chứng có những điểm chết riêng.
Ví dụ như dự án sân bay thì phải hợp tác với bên sân bay mới có thể lấy dữ liệu và chạy PoC hiện trường được.
Thế nên lại xuất hiện bài toán phải collaboration mà PI phải nhìn thấu từ giai đoạn định nghĩa.
Nhưng trong giai đoạn này thì việc collaboration cần nên được thực hiện rõ ràng trách nhiệm và phân công.
Tránh việc nhóm nghiên cứu thực hiện task lấn sân của bên khác.
Ví dụ bên sân bay phải thực hiện thu thập dữ liệu nhưng nhóm nghiên cứu sẽ chỉ đóng vai trò tư vấn giám sát trong nghiệp vụ đó.
Hoặc việc lắp đặt thiết bị có phần mềm thì bên nhóm nghiên cứu sẽ làm trên nền tảng sân bay nhưng sẽ có giám sát và hỗ trợ thế nào đó từ bên sân bay.&lt;/p&gt;

&lt;p&gt;Một vấn đề hay xảy ra ở cấp quản lý resource ở đây là các bạn phải resolve conflicts giữa các thành phần công việc trong PJ lẫn sub-PJ.
Các bạn ở cấp postdoc và PhD sẽ phải quản lý các bạn ở cấp dưới.
Các bạn master student và BS thì sẽ tham gia với vai trò dev là chính.
Nhưng đôi khi có conflict ko có tiến độ báo cáo thì cấp trên phải ra tay xử lý.&lt;/p&gt;

&lt;h1 id=&quot;giai-đoạn-4-tổng-kết-và-báo-cáo&quot;&gt;Giai đoạn 4: Tổng kết và báo cáo&lt;/h1&gt;
&lt;p&gt;Cuối cùng thì sau một thời gian vài năm các sub-PJ chạy và mỗi năm có báo cáo output mới, thì cái mới tích lũy lại đủ to thì cũng có thể close.
Nhưng nhìn chung sẽ close khi gần hết hạn hoặc hết tiền. Chứ còn tiền còn hạn thì nghĩ thêm bài toán mà chạy chứ close làm gì vội cho mất công đi xin lại.
Lúc kết thúc thì cũng lại có những buổi họp đúc kết kinh nghiệm, báo cáo đề tài, chia tay và allocate/assign lại tài nguyên sang đâu đó.
Nói chuyện tương lai công việc của các postdoc, PhD ai giữ lại ai cho đi, …&lt;/p&gt;

&lt;h1 id=&quot;kết-luận&quot;&gt;Kết luận&lt;/h1&gt;

&lt;p&gt;Trên đây là khái lược big picture của dự án nghiên cứu theo mô hình lab mà chắc là nhắm vào đối tượng từ PhD student trở lên.
Với các bạn master và BS thì có thể các vẫn tham gia ở mức DEV, tức là nhận task cụ thể rồi các bạn làm, chứ chưa nhìn ở tầm người làm quản lý.
Từ PhD Student (chưa phải PhD nhé) thì đã bắt đầu nắm trọng trách trong 1 sub-PJ nhỏ của giáo mà sẽ phải làm từ định nghĩa.
Giáo sẵn sàng bỏ sức ra giúp các bạn làm cho xong đề tài, nhưng về phía các bạn làm PhD là cũng phải chủ động giữ tư thế owner thường xuyên tạo ra cái mới cho giáo.
Còn postdoc thì bắt đầu thành thục hơn ở cấp trợ tá cho giáo trong quản lý dự án rồi.&lt;/p&gt;

&lt;p&gt;Nói chung một lợi thế khi làm ở các lab đẳng cấp thế giới là các bạn dù làm nghiên cứu cơ bản thuần, cơ bản hẹp hay ứng dụng thì cũng sẽ được hướng dẫn để làm chỉn chu từ bước định nghĩa.
Đó là một điều đáng quý và nếu có cơ hội nên chú ý học hỏi!&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="pm" /><category term="R&amp;D" /><category term="research and development" /><category term="project lifecycle" /><summary type="html">Source: Wikipedia 研究開発は大別すると基本的な原理や性質を知るための純粋基礎研究、特定の実際的目的のために行われる目的基礎研究、特定の要請に答えるための応用研究、新製品を導入するための研究に分かれる。 Source: wikipedia.com Hoạt động nghiên cứu và phát triển (R&amp;amp;D) là hoạt động do các công ty tổ chức thực hiện nhằm đổi mới sáng tạo dẫn đến tri thức, sản phẩm và dịch vụ mới. Phân loại dự án R&amp;amp;D thì tùy vào mục đích có thể phân thành: R&amp;amp;D cơ bản “thuần” (phát hiện định luật, định lý, tính chất mới mang tính tổng quát), R&amp;amp;D cơ bản “có mục đích cụ thể” (phát hiện định luật, định lý và tính chất mới trong 1 ngành hẹp, không cần tổng quát), và R&amp;amp;D ứng dụng (sử dụng kết quả của R&amp;amp;D cơ bản để tạo ra sản phẩm mới, dịch vụ mới). Dù là cơ bản thuần, cơ bản hẹp hay ứng dụng thì nhìn chung dự án R&amp;amp;D đều là dự án và là đối tượng của ngành Project Management. Tuy nhiên, vì là đi tìm cái mới nên dù cái mới là mang tính lý thuyết (cơ bản thuần và cơ bản hẹp) hay ứng dụng, thì dự án R&amp;amp;D có những đặc điểm riêng khác với dự án thông thường: outcome của dự án nghiên cứu thường khó định hình ngay từ đầu và đôi khi hơi mơ hồ với những người làm kỹ thuật (bởi vì nếu cái mới mà mình đã biết từ đầu thì nó đâu còn là cái mới nữa đúng không các bạn?) Thi thoảng dự án nghiên cứu sẽ không có outcome, nhưng đột nhiên một vài tuần sau lại output ra tới tấp!</summary></entry><entry><title type="html">Lập trình song song với đối ứng khách hàng: khách hàng business và khách hàng developer</title><link href="https://wanted2.github.io/non-english/se/2021/10/10/parallelism-clients-developer-business.html" rel="alternate" type="text/html" title="Lập trình song song với đối ứng khách hàng: khách hàng business và khách hàng developer" /><published>2021-10-10T00:00:00+09:00</published><updated>2021-10-10T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/2021/10/10/parallelism-clients-developer-business</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/2021/10/10/parallelism-clients-developer-business.html">&lt;p&gt;&lt;img src=&quot;https://cdn.stocksnap.io/img-thumbs/960w/meeting-booth_7FLAARLMPI.jpg&quot; alt=&quot;b2d&quot; /&gt;
&lt;em&gt;Source: StockSnap.io&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Khách hàng business (non-dev)&lt;/strong&gt; là những người không có chức năng tham gia trực tiếp vào quy trình phát triển.
Bản thân họ có thể thuê thêm tư vấn/QA bên ngoài hoặc bên trong công ty họ để đảm bảo khâu chất lượng sản phẩm.
Tuy nhiên, nhìn chung cái họ quan tâm là kết quả sản phẩm (bao gồm cả deadline, resources) hơn là quy trình.
Cũng có một số khách hàng business cũng sẽ đòi hỏi về mặt quy trình, nhưng đó thường là để đảm bảo chất lượng.
Vì mối quan tâm lớn nhất của họ là sản phẩm nên việc QA đảm bảo chất lượng cao là việc không thể tránh khỏi (bởi bản thân có biết dev đâu thì đương nhiên phải quan tâm QA).
Bên cạnh đó, &lt;strong&gt;khách hàng developer&lt;/strong&gt; là những khách hàng mà bản thân họ cũng sẽ là dev trong sản phẩm.
Khác với khách hàng business là những người sẽ không trực tiếp tham gia vào quy trình tạo ra sản phẩm, khách hàng dev lại là những người tham gia cùng đội dev vào quá trình đó.
Họ sẽ quan tâm việc &lt;strong&gt;có cùng code được với nhau (quy trình) không&lt;/strong&gt; hơn là sản phẩm cuối cùng.
Vì sao? Vì họ cũng chịu trách nhiệm làm ra sản phẩm, và họ hiểu là kết quả là do cả team cùng làm ra nên kết quả do team quyết định.
Vì vậy để ra một kết quả tốt thì yếu tố quan trọng nhất chính là &lt;strong&gt;có làm việc được với nhau không&lt;/strong&gt; và làm việc $=$ code đấy nhé!
Chỉ cần code thôi với những khách hàng này! Nên phần lớn những vị trí không tham gia trực tiếp vào code là đa phần biến thành “người thừa” trong mắt họ.
Khách hàng business (không thể dev) thì trong mắt họ quan trọng nhất là quản lý để đảm bảo tiến độ cho họ và các vị trí bảo đảm chất lượng cho họ như PM, tester, QA.
Còn với khách hàng developer (có thể dev và là dev xịn) thì trong mắt họ lại chỉ quan trọng những vị trí tạo ra code (và phải là code xịn), QA, tester, quản lý có khi họ đảm nhiệm hết vì họ cũng là dev lâu năm trong nghề (&lt;em&gt;có lần tôi bị phân vào dự án mà khách phủ đầu ngay là mọi việc liên quan tới những mảng kia họ sẽ làm hết, chúng tôi chỉ được phép &lt;strong&gt;code&lt;/strong&gt; thôi&lt;/em&gt;).
Cách đối đãi thì có nhiều góc nhìn, tôi thì cũng chủ yếu làm kỹ thuật nên sẽ cung cấp cách nhìn về định hướng quy trình từ đầu với từng loại khách theo hệ quy chiếu của lập trình đa luồng.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;khách-hàng-developer-quan-trọng-là-anh-em-có-cùng-code-được-với-nhau-không&quot;&gt;Khách hàng developer: Quan trọng là anh em có cùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; được với nhau không?&lt;/h2&gt;

&lt;h3 id=&quot;code-là-tất-cả&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; là tất cả?&lt;/h3&gt;

&lt;p&gt;Nhưng đầu tiên cần hiểu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; không chỉ là đâm đầu vào viết code như trâu bò.
Code một cách chuyên nghiệp, chân chính thì có hàng tá sách vở như Clean Code, Clean Architecture mà nội dung nằm ngoài scope bài viết này.
Anh em chủ động tìm đọc và contribute nhé!
Code một cách có não, để được gọi là programmer (LTV) là phải đảm đương mọi khâu trong quá trình sản sinh ra code: hiểu requirements (chủ động tìm hiểu), tự thiết kế solution để giải quyết requirements, tự tay mà code lấy, tự tay test lấy ở cấp unit, và chủ động nhờ anh em code cùng test chéo ở các cấp cao hơn, nộp hàng/delivery, viết documents, tối ưu, fix bugs, …
Ở cấp lãnh đạo thì sẽ phải thêm những nghiệp vụ khác như phân nhỏ nhiệm vụ, phân công, quản lý tiến trình/tài nguyên và truyền đạt cho anh em, định hướng cho anh em cách làm tốt nhất, kiểm tra và đôn đốc công việc của anh em thông qua feedback, …&lt;/p&gt;

&lt;h3 id=&quot;nhưng-còn-song-song-hóa&quot;&gt;Nhưng còn song song hóa?&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Code&lt;/code&gt; tốt không chỉ có việc làm đúng quy trình và vai trò (roles) mà còn phải đảm bảo hiệu suất.
Bây giờ tôi đưa ra một tình huống:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tình huống&lt;/strong&gt;: &lt;em&gt;Một nhóm khách hàng dev A gồm $M$ dev, và giờ đặt hàng cùng làm việc với $N$ dev bên bạn.&lt;/em&gt;
&lt;em&gt;Họ không quan tâm kết quả ngay từ đầu vì làm agile trong quá trình làm kế hoạch sẽ thay đổi thường xuyên.&lt;/em&gt;
&lt;em&gt;Họ chỉ quan tâm anh em 2 nhóm có làm việc trôi chảy với nhau không?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Họ sẽ coi quy trình làm việc là một hệ thống đa luồng (multi-threading) mà về nguyên tắc nếu thêm $N$ dev vào mà tốc độ không tăng lên $\frac{M+N}{M}$ lần thì có vẻ là một mối hợp tác kém!
Còn về tài nguyên thì là &lt;strong&gt;không được có “người thừa, việc thừa”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yêu cầu là gì? Thì đấy, yêu cầu chính là&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Nhanh lên tối thiểu $\frac{M+N}{M}$ lần.&lt;/li&gt;
  &lt;li&gt;Tài nguyên không phát sinh “người thừa, việc thừa”.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;đầu-tiên-là-không-có-người-thừa-việc-thừa&quot;&gt;Đầu tiên là không có “người thừa, việc thừa”&lt;/h4&gt;

&lt;p&gt;Một việc mà lặp lại 2 lần 3 lần là không được trong hệ thống song song hóa tối ưu.
Một nhân viên mà phải cấp phát nhiều tài khoản khác nhau là cũng tiêu tốn tài nguyên hệ thống.
Có thể dùng cách nghĩ về các hệ thống federated authentication, single sign-on để suy nghĩ ra cách làm tối ưu.
Và tất nhiên phải có bàn bạc đồng thuận từ phía khách để tiến hành.
Hiện tại mọi người dùng nhiều những nền tảng như Atlassian hay Backlog trong quản lý rồi, nên tự làm thêm nhiều tài liệu trùng lặp với cái có sẵn là dưới góc nhìn của khách là dev chuyên nghiệp, họ sẽ chỉ có đánh giá là … kém!&lt;/p&gt;

&lt;p&gt;Còn chuyện máy móc để làm việc thì không vấn đề gì, vì thêm người thêm máy là chuyện bình thường nên thêm máy không phải việc thừa, mà thậm chí còn là việc cần thiết vì không máy thì không làm việc được!&lt;/p&gt;

&lt;h4 id=&quot;cuối-cùng-vẫn-là-phải-nhanh-lên&quot;&gt;Cuối cùng vẫn là phải nhanh lên&lt;/h4&gt;

&lt;p&gt;Khi $M+N$ dev cùng chạy song song thì vấn đề là gì? Chính là conflict khi tiến hành merge các branches.
Nên merge theo order nào để tối ưu hóa thời gian resolve conflict?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tình huống&lt;/strong&gt;: &lt;em&gt;Tôi thuê 1 nhóm dev làm chức năng X.&lt;/em&gt;
&lt;em&gt;Sáng nay, vì tôi cũng là dev nên tôi nhận làm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt;, nhóm dev làm chức năng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/2&lt;/code&gt; và cần merge vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; trong tuần này nhánh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt;&lt;/em&gt;.
&lt;em&gt;Nhưng vì sao đó, đội kia phát triển &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/2&lt;/code&gt; nhưng cần lock &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; lại đến khi họ làm xong mới cho các nhánh khác merge vào&lt;/em&gt;.
&lt;em&gt;Họ lock lại &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; đến hết tuần này mới unlock, dẫn đến tôi phải OT cuối tuần để kịp release&lt;/em&gt;.
&lt;em&gt;Và tôi là khách hàng, vậy ở vị trí của tôi, tôi có thể nghĩ là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anh em có làm việc được với nhau không?&lt;/code&gt; (làm việc là code nhé)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vậy đây là lỗi của ai? Đầu tiên là người nhận lead hai feature 1 và 2 đã ôm một cục quá lớn không chịu chia nhỏ ra, kết cục là xuất hiện một nhiệm vụ mất đến 5 ngày mới xong.&lt;/p&gt;

&lt;p&gt;Các bạn cần hiểu phát triển agile đề cao tính song song, thì nếu bạn mà dev một feature nào mất nhiều công số thì có hai khả năng:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Các bạn không lock target branch&lt;/em&gt; thì vì thời gian estimate quá dài thì trong khi đó sẽ có rất nhiều branch khác phát triển song song và nếu họ merge trước và có conflict thì bạn phải resolve.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Các bạn lock cho đến khi xong&lt;/em&gt; thì người khác lại không merge được phải chờ. Kết cục là chờ lâu quá là có người phải OT mà hiệu suất song song hóa lại … kém!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lock/unlock để mutual exclusive thì là khái niệm quá cơ bản trong lập trình song song hóa.
Vấn đề ở đây là đưa ra một cục estimate những 5 ngày ($=$ 1 tuần làm việc) thì là chưa tốt.
Phài &lt;strong&gt;chi tiết hóa&lt;/strong&gt; và chia nhỏ thành những task ở đơn vị vài tiếng/task: &lt;strong&gt;Phải nhanh nếu không là conflict hoặc bắt người khác chờ&lt;/strong&gt;!
Và tốt nhất là nên commit/merge sớm ngay từ những step nhỏ, chứ đừng có tích cả cục 5 ngày rồi merge một thể là thời gian quá dài.
Schedule merge là phải rõ ràng, và tránh conflict sau khi review kỹ codebase.&lt;/p&gt;

&lt;p&gt;Tại sao phải tránh conflict? Là vì nếu để conflict là lại phải ngồi resolve dẫn đến tốn thêm công cho khách.&lt;/p&gt;

&lt;p&gt;Về tổng thể nhanh lên $\frac{M+N}{M}$ lần, nhưng về chi tiết là nên có thêm chỉ số về thời gian idle của từng member trong từng task và tổng thể.&lt;/p&gt;

&lt;h3 id=&quot;anh-em&quot;&gt;Anh em&lt;/h3&gt;

&lt;p&gt;Cuối cùng thì với kiểu khách hàng developer thì chúng ta đều hiểu: vì họ cũng commit code như dev bình thường nên họ sẽ nhìn $N$ dev bên bạn như những “chiến hữu, anh em”.
Và chiến hữu anh em là phải hỗ trợ nhau, cùng nhau nếm ngọt trải bùi, ngậm đắng nuốt cay, và đặc biệt là không cản trở lẫn nhau.
Vì vậy, trong quá trình làm ngoài việc chuyên môn code, thì có thể tập hợp những anh em cùng là code để nâng cao motivation cho anh em.
Thế nên nếu có gì mà khó làm việc là sẽ dẫn đến sự đánh giá không cao.
Họ không cần kết quả hay nouhinbutu gì đâu, họ chỉ cần chiến binh tốt làm việc trong vòng quay của họ thôi.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Thành tích không quan trọng, chỉ quan trọng chiến hữu!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Và đương nhiên chiến hữu giỏi thì xác xuất có sản phẩm xịn sẽ cao.&lt;/p&gt;

&lt;h2 id=&quot;khách-hàng-business-khoán-trọn-gói-thì-các-anhchị-làm-sao-thì-làm-đến-lúc-nộp-hàng-xịn-là-ok&quot;&gt;Khách hàng business: Khoán trọn gói thì các anh/chị làm sao thì làm, đến lúc nộp hàng xịn là ok.&lt;/h2&gt;

&lt;p&gt;Khách hàng business thì thường là quan hệ đối tác làm ăn, chứ không có chuyện chia ngọt sẻ bùi cùng anh em như khách developer.
Họ không có trách nhiệm dev và cũng thường là không thể dev được, vì vậy họ thường chọn vị thế &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;người dùng&lt;/code&gt; và khoán thẳng cho các bên vendor: ví dụ khoán cho bên A làm dev sản phẩm, bên B test và QA, bên C quản lý dự án.&lt;/p&gt;

&lt;p&gt;Trung tâm của cung cách làm việc này chính là &lt;strong&gt;sản phẩm&lt;/strong&gt;.
Các bên vendor muốn thắng thầu thường phải có thực tích và quy trình nghiệp vụ ổn.
Khác với bên khách developer (vì là cùng nhau làm và cùng nhau chịu trách nhiệm) nên thường có sự thông cảm và thậm chí bên vendor nghiệp vụ kém, khách có thể sẵn sàng hỗ trợ training.
Thì bên business, đã khoán thì chỉ có chiếu theo hợp đồng và quan hệ làm ăn để giải quyết là chính khi xảy ra vấn đề.
Vì vậy, quản lý và bảo đảm chất lượng là những quy trình không thể không chuẩn chỉnh khi làm việc với kiểu khách này.
Tất nhiên, khách developer cũng có đòi hỏi nhưng dẫu sao đã là anh em cùng nhau dev dự án thì vẫn có sự chia sẻ nhất định.&lt;/p&gt;

&lt;p&gt;Còn với khách business, thì liệu bạn có thể bắt &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;người dùng cuối&lt;/code&gt; tự mổ xẻ phần mềm để tự chữa không?
Trường hợp ấy thì với họ thà mua cái mới còn hơn và sản phẩm lỗi thì bị đánh giá là kém.&lt;/p&gt;

&lt;h3 id=&quot;vậy-còn-song-song-hóa&quot;&gt;Vậy còn song song hóa?&lt;/h3&gt;

&lt;p&gt;Với kiểu khách hàng này, thường là khoán thì đội dev thường sẽ tự mình đảm trách hết và chỉ communication với khách qua kênh sales.
Sự can thiệp của khách là nhỏ, gánh nặng communication cũng trở nên định kỳ hơn.
Vì vậy đội dev sẽ khá tập trung và có khi có thời gian chỉn chu testing/QA cẩn thận trước khi nộp hàng.
Do đó, thường sẽ là &lt;strong&gt;quy trình tuần tự&lt;/strong&gt; xong cái này mới đi đến bước tiếp theo trong quy trình.
Chứ không có chuyện nhảy cóc hay song song và resolve conflict với khách.
Kể cả có resolve thì đó là nghiệp vụ của bên comtor/BrSE/PM/PO/Sales, …&lt;/p&gt;

&lt;p&gt;Với khách developer thì nhìn chung khi chạy trong môi trường song song hóa tối ưu thì dù có làm chuẩn quy trình kiểu tuần tự thì cũng vẫn xảy ra conflict là chuyện có thể.&lt;/p&gt;

&lt;h2 id=&quot;kết-chung&quot;&gt;Kết chung&lt;/h2&gt;

&lt;p&gt;Nhìn chung, nắm bắt tâm lý khách hàng, biết rõ loại khách hàng nào và nên làm gì với họ cho đúng và khéo léo là kỹ năng mà mọi thành viên trong team đều nên có.
Biết khách của mình là ai (biz hay dev), biết rõ môi trường đang đứng là gì (song song hay tuần tự), biết rõ mình đóng vai trò gì (dev, quản lý, QA, …) luôn là những điểm quan trọng trong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thực chiến&lt;/code&gt; dự án.&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="git" /><category term="threading" /><category term="parallelism" /><category term="business clients" /><category term="developer clients" /><summary type="html">Source: StockSnap.io Khách hàng business (non-dev) là những người không có chức năng tham gia trực tiếp vào quy trình phát triển. Bản thân họ có thể thuê thêm tư vấn/QA bên ngoài hoặc bên trong công ty họ để đảm bảo khâu chất lượng sản phẩm. Tuy nhiên, nhìn chung cái họ quan tâm là kết quả sản phẩm (bao gồm cả deadline, resources) hơn là quy trình. Cũng có một số khách hàng business cũng sẽ đòi hỏi về mặt quy trình, nhưng đó thường là để đảm bảo chất lượng. Vì mối quan tâm lớn nhất của họ là sản phẩm nên việc QA đảm bảo chất lượng cao là việc không thể tránh khỏi (bởi bản thân có biết dev đâu thì đương nhiên phải quan tâm QA). Bên cạnh đó, khách hàng developer là những khách hàng mà bản thân họ cũng sẽ là dev trong sản phẩm. Khác với khách hàng business là những người sẽ không trực tiếp tham gia vào quy trình tạo ra sản phẩm, khách hàng dev lại là những người tham gia cùng đội dev vào quá trình đó. Họ sẽ quan tâm việc có cùng code được với nhau (quy trình) không hơn là sản phẩm cuối cùng. Vì sao? Vì họ cũng chịu trách nhiệm làm ra sản phẩm, và họ hiểu là kết quả là do cả team cùng làm ra nên kết quả do team quyết định. Vì vậy để ra một kết quả tốt thì yếu tố quan trọng nhất chính là có làm việc được với nhau không và làm việc $=$ code đấy nhé! Chỉ cần code thôi với những khách hàng này! Nên phần lớn những vị trí không tham gia trực tiếp vào code là đa phần biến thành “người thừa” trong mắt họ. Khách hàng business (không thể dev) thì trong mắt họ quan trọng nhất là quản lý để đảm bảo tiến độ cho họ và các vị trí bảo đảm chất lượng cho họ như PM, tester, QA. Còn với khách hàng developer (có thể dev và là dev xịn) thì trong mắt họ lại chỉ quan trọng những vị trí tạo ra code (và phải là code xịn), QA, tester, quản lý có khi họ đảm nhiệm hết vì họ cũng là dev lâu năm trong nghề (có lần tôi bị phân vào dự án mà khách phủ đầu ngay là mọi việc liên quan tới những mảng kia họ sẽ làm hết, chúng tôi chỉ được phép code thôi). Cách đối đãi thì có nhiều góc nhìn, tôi thì cũng chủ yếu làm kỹ thuật nên sẽ cung cấp cách nhìn về định hướng quy trình từ đầu với từng loại khách theo hệ quy chiếu của lập trình đa luồng.</summary></entry><entry><title type="html">So sánh git merge và git rebase</title><link href="https://wanted2.github.io/non-english/se/2021/10/08/git-merge-rebase.html" rel="alternate" type="text/html" title="So sánh git merge và git rebase" /><published>2021-10-08T00:00:00+09:00</published><updated>2021-10-08T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/2021/10/08/git-merge-rebase</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/2021/10/08/git-merge-rebase.html">&lt;p&gt;&lt;img src=&quot;/assets/img/git.svg&quot; alt=&quot;git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; là 2 câu lệnh quen thuộc với lập trình viên chỉ để giải quyết cùng 1 bài toán: với 2 branches được phát triển song song, nay cần migrate các tính năng của branch feature vào branch chính (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).
Vấn đề là làm thế nào? Một cách chi tiết thì chỉ có 2 cách tương ứng với 2 câu lệnh ở trên tiêu đề bài viết mà chúng ta sẽ đi sâu trong bài này.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;đôi-lời-mở&quot;&gt;Đôi lời mở&lt;/h1&gt;

&lt;p&gt;Có khá nhiều hướng dẫn về cách tích hợp 2 nhánh công việc khác nhau, với nhiều cái tên “mỹ miều” như migration, integration và những tài liệu dài hàng trang chỉ để giải thích các cách làm.
Nhưng nếu là LTV lâu năm đều nhìn ra “tư duy” đằng sau và biết câu lệnh đơn thuần nhất để giải quyết: người mới có khi phải làm “bằng tay” cả khối công việc đó trong một vài tháng để chỉ hiểu được “tư duy” ẩn giấu, nhưng người đã biết thì chỉ cần 1 câu lệnh như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; là giải quyết xong công việc.&lt;/p&gt;

&lt;p&gt;Bạn thử nghĩ xem, nếu chỉ cần 1 vài giây là chạy xong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhưng nếu bạn không biết và phải làm theo nguyên tắc: tức là chi tiết hóa và làm toàn bộ chi tiết của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bằng tay thì liệu 1 tháng có đủ không?&lt;/p&gt;

&lt;p&gt;Vì vậy cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;. Chi tiết hóa giúp nhận ra vấn đề là gì, sau khi nắm rõ vấn đề, trừu tượng hóa giúp nhận ra “à với công việc này, thì sử dụng công cụ này sẽ chỉ cần 1 vài dòng lệnh là giải quyết vấn đề”.&lt;/p&gt;

&lt;p&gt;Chỉ chi tiết hóa thôi thì sẽ bị sa đà vào tiểu tiết, lãng phí công số.
Chỉ trừu tượng hóa thôi thì sẽ có rủi ro là bị sai hướng vì không nắm rõ chi tiết.
Trừu tượng hóa trước thì sẽ bị sai hướng dẫn đến chi tiết hóa hoàn toàn sai lệch.&lt;/p&gt;

&lt;p&gt;Vì vậy chỉ có cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-devil-is-in-the-details&quot;&gt;The devil is in the details&lt;/h1&gt;

&lt;p&gt;Tại sao trừu tượng hóa trước thì không tốt? Đơn giản thôi: bởi để migrate tính năng, ngoài &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì còn có &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt;, nếu không chi tiết bài toán cũng như sự khác biệt giữa 2 câu lệnh thì có thể đi sai hướng và dùng sai công cụ.&lt;/p&gt;

&lt;h2 id=&quot;git-merge&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git-merge.svg&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;
Đầu tiên chúng ta sẽ tìm hiểu cách thông dụng nhất và hay được khuyến khích dùng nhất để giải bài toán của chúng ta.
Bản chất của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì cũng như hình vẽ bên: tạo 1 commit mới hẳn và chuyển tất cả tính năng của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào đó.
Đây là lựa chọn mặc định của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;, bạn có thể thay đổi bằng thêm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--squash&lt;/code&gt;.
Chi tiết câu lệnh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì như bên dưới có 2 options mặc định là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ff&lt;/code&gt; cho fast-forward và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--commit&lt;/code&gt; (tức là tạo commit mới hay là merge commit).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git merge &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;...]
   or: git merge &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
   or: git merge &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show a diffstat at the end of the merge
    &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;                show a diffstat at the end of the merge       
    &lt;span class=&quot;nt&quot;&gt;--summary&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;synonym to &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;n&amp;gt;]           add &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at most &amp;lt;n&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; entries from shortlog to merge commit message
    &lt;span class=&quot;nt&quot;&gt;--squash&lt;/span&gt;              create a single commit instead of doing a merge
    &lt;span class=&quot;nt&quot;&gt;--commit&lt;/span&gt;              perform a commit &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;the merge succeeds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--edit&lt;/span&gt;            edit message before committing
    &lt;span class=&quot;nt&quot;&gt;--cleanup&lt;/span&gt; &amp;lt;mode&amp;gt;      how to strip spaces and &lt;span class=&quot;c&quot;&gt;#comments from message&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff&lt;/span&gt;                  allow fast-forward &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff-only&lt;/span&gt;             abort &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fast-forward is not possible
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--verify-signatures&lt;/span&gt;   verify that the named commit has a valid GPG signature
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          merge strategy to use
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;&lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value&amp;gt;
                          option &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;selected merge strategy
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--message&lt;/span&gt; &amp;lt;message&amp;gt;
                          merge commit message &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a non-fast-forward merge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &amp;lt;path&amp;gt;     &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;message from file
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         be more verbose
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be more quiet
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; but leave index and working tree alone
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue &lt;/span&gt;the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--allow-unrelated-histories&lt;/span&gt;
                          allow merging unrelated histories
    &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt;            force progress reporting
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG sign commit
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;--overwrite-ignore&lt;/span&gt;    update ignored files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           bypass pre-merge-commit and commit-msg hooks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vậy quá trình sẽ xảy ra suôn sẻ? Đương nhiên conflict có thể xảy ra và dev sẽ phải resolve bằng tay, sau đó thì dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --continue&lt;/code&gt; để tiếp tục merge.
Trong trường hợp đang merge mà gặp phải tình huống conflict không thể giải quyết được thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --abort&lt;/code&gt; sẽ đưa bạn về thời điểm trước khi merge.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; đương nhiên là điều không mong muốn, mà điều mong muốn là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; đến khi xong.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhìn chung là 1 quy trình an toàn &lt;strong&gt;nếu bạn chịu khó làm đến cùng&lt;/strong&gt;. 
Nếu mới gặp conflict đầu tiên bạn đã sợ hãi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; ngay thì sẽ không bao giờ đi đến cùng được.
Đồng thời quy trình sẽ rất tự động nếu 2 branches không conflict nhiều.
Vì vậy, trước khi quyết định có merge hay không thì tốt nhất nên điều tra sơ xem có nhiều file trùng nhau giữa lịch sử 2 branches với base không?
Nếu nhìn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; sơ mà thấy khác nhau nhiều quá là có lẽ … không nên cho phép merge.
Bởi như vậy không khác gì làm bằng tay (cứ tí lại gặp conflict phải resolve)!&lt;/p&gt;

&lt;p&gt;Tuy nhiên, so với giải pháp tiếp theo mà chúng ta giới thiệu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; có ít rủi ro gặp conflict hơn và nhìn chung số lần resolve chỉ là $\leq 1$, nên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; luôn luôn là giải pháp ưu tiên cho bài toán của chúng ta.&lt;/p&gt;

&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git-rebase.svg&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;
Một lựa chọn khác cho bài toán của chúng ta là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;.
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; sẽ không tạo ra commit mới nào cả mà sẽ sửa lại lịch sử git của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/strong&gt;
Như hình vẽ bên trái, bạn thấy rõ là các commit của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; sẽ được bố trí xen kẽ theo thứ tự thời gian vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bắt đầu từ commit đầu tiên của feature branch thì thực hiện merge và nếu gặp conflict thì dev phải resolve bằng tay rồi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt;.
Cũng như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bạn có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; để quay lại trạng thái ban đầu nếu … sợ!
Bạn cũng có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt;, nhưng nhớ là nếu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; dọn dẹp để đưa branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; về trạng thái ban đầu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt; sẽ để lại mớ hỗn độn nguyên xi đó.&lt;/p&gt;

&lt;p&gt;Trong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì dù 2 branches conflict nhiều thế nào thì cũng chỉ cần 1 merge commit để chứa tất cả.
Nhưng bạn thấy đấy với &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; số lần conflict có thể tỷ lệ thuận với số commit của hai branches.
Và công việc sẽ không khác gì bằng tay nếu hai branches conflict nhiều!
&lt;strong&gt;Nhìn chung đây là cách làm nguy hiểm hơn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; rất nhiều.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bạn có thể dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; để chọn lựa những commit muốn bỏ vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; nếu không phải tất cả mọi commit trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; đều có giá trị với bạn.
Sau khi chỉnh sửa lịch sử thì bạn có thể cập nhật branch bằng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt; | &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;upstream&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]]
   or: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt;] &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]
   or: git rebase &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;revision&amp;gt;     rebase onto given branch instead of upstream
    &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;           use the merge-base of upstream and branch as the current base
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           allow pre-rebase hook to run
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be quiet. implies &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         display a diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer to each commit
    &lt;span class=&quot;nt&quot;&gt;--committer-date-is-author-date&lt;/span&gt;
                          make committer &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;match author &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reset-author-date&lt;/span&gt;   ignore author &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;and use current &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;n&amp;gt;                passed to &lt;span class=&quot;s1&quot;&gt;&apos;git apply&apos;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ignore-whitespace&lt;/span&gt;   ignore changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;whitespace
    &lt;span class=&quot;nt&quot;&gt;--whitespace&lt;/span&gt; &amp;lt;action&amp;gt;
                          passed to &lt;span class=&quot;s1&quot;&gt;&apos;git apply&apos;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--force-rebase&lt;/span&gt;    cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt;               cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt;                skip current patch and &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort and check out the original branch
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                abort but keep HEAD where it is
    &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;           edit the todo list during an interactive rebase
    &lt;span class=&quot;nt&quot;&gt;--show-current-patch&lt;/span&gt;  show the patch file being applied or merged
    &lt;span class=&quot;nt&quot;&gt;--apply&lt;/span&gt;               use apply strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--merge&lt;/span&gt;           use merging strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;the user edit the list of commits to rebase
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--empty&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;drop,keep,ask&lt;span class=&quot;o&quot;&gt;}&amp;gt;&lt;/span&gt;
                          how to handle commits that become empty
    &lt;span class=&quot;nt&quot;&gt;--autosquash&lt;/span&gt;          move commits that begin with squash!/fixup! under &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG-sign commits
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     add &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lines after each commit of the editable list
    &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--rebase-merges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;mode&amp;gt;]
                          try to rebase merges instead of skipping them
    &lt;span class=&quot;nt&quot;&gt;--fork-point&lt;/span&gt;          use &lt;span class=&quot;s1&quot;&gt;&apos;merge-base --fork-point&apos;&lt;/span&gt; to refine upstream
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          use the given merge strategy
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;option&amp;gt;
                          pass the argument through to the merge strategy
    &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt;                rebase all reachable commits up to the root&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reschedule-failed-exec&lt;/span&gt;
                          automatically re-schedule any &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; that fails
    &lt;span class=&quot;nt&quot;&gt;--reapply-cherry-picks&lt;/span&gt;
                          apply all changes, even those already present upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nói chung chỉnh sửa lịch sử là quá trình rất nguy hiểm!
Vì vậy cần chi tiết hóa trước để tránh đi theo những cách bất thường, sau đó trừu tượng hóa để tìm ra công cụ tối ưu.&lt;/p&gt;

&lt;h1 id=&quot;lời-kết&quot;&gt;Lời kết&lt;/h1&gt;

&lt;p&gt;Bài viết lấy ví dụ về bài toán migrate tính năng từ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bạn nên nhớ những Gitflow thực tế sẽ còn phức tạp hơn với những quy tắc như chỉ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; mới được merge vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, tuy nhiên đó là chủ đề khác.
Ngoài ra, nếu bài toán của bạn là bất thường, đòi hỏi phải edit history thì có thể bạn phải dùng rebase.
Nhưng nhìn chung trong các trường hợp &lt;strong&gt;bình thường&lt;/strong&gt;, tôi thấy hầu như đều dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; tức là tạo ra merge &lt;strong&gt;commit mới hẳn&lt;/strong&gt; và chuyển hết tính năng cần thiết vào.
Thêm nữa, đây là migrate &lt;strong&gt;tính năng&lt;/strong&gt; chứ không chỉ là files hay tài nguyên, tức là các tính năng được implement trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; phải tái hiện như thế trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nói chung tạo cái mới thì tốt hơn!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="git" /><category term="gitflow" /><summary type="html">git merge và git rebase là 2 câu lệnh quen thuộc với lập trình viên chỉ để giải quyết cùng 1 bài toán: với 2 branches được phát triển song song, nay cần migrate các tính năng của branch feature vào branch chính (main). Vấn đề là làm thế nào? Một cách chi tiết thì chỉ có 2 cách tương ứng với 2 câu lệnh ở trên tiêu đề bài viết mà chúng ta sẽ đi sâu trong bài này.</summary></entry><entry><title type="html">アジャイル開発でタスクにアサインされる場合、直ぐにやるかどうかどうやって判定するか？</title><link href="https://wanted2.github.io/non-english/se/2021/09/27/agile-feature.html" rel="alternate" type="text/html" title="アジャイル開発でタスクにアサインされる場合、直ぐにやるかどうかどうやって判定するか？" /><published>2021-09-27T00:00:00+09:00</published><updated>2021-09-27T00:00:00+09:00</updated><id>https://wanted2.github.io/non-english/se/2021/09/27/agile-feature</id><content type="html" xml:base="https://wanted2.github.io/non-english/se/2021/09/27/agile-feature.html">&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/learn/azure-devops/get-started-with-devops/media/2-vsm-whiteboard1.png&quot; alt=&quot;Agile&quot; /&gt;
&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;アジャイル開発現場では、看板に乗っているタスクをメンバーに割り当てる際に、そのメンバーは直ぐにそのタスクをやるかどうか見てみます。
時々、&lt;strong&gt;どうやってやるかどうかを決める方法について教えてください&lt;/strong&gt;とよく言われています。
まずは、&lt;strong&gt;優先順位&lt;/strong&gt;を決めて、一番優先の高いタスクを取ってやるから、依頼したタスクはその優先順位トップに入らない場合、断ります。
トップに入るとやります。
しかし、ここで微妙にどうやってその優先順位を早く決めるか方法論を考えたいですが、やはり&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue&lt;/code&gt;を使いたいです。
第一優先のタスクを$O(1)$時間量で計算できます。
次に、&lt;strong&gt;決定木&lt;/strong&gt;を使うべきです。
優先順位がつかない場合、いくつかの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yes/No&lt;/code&gt;質疑でやるかどうかを決めることもできます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;優先順位でアジャイルタスクの受託を決定する&quot;&gt;優先順位でアジャイルタスクの受託を決定する&lt;/h1&gt;

&lt;p&gt;日々でストーリーは新たに定められ、サブタスクに分けられます。
バグがある場合、バグ報告でチケットを新規起票し、バックログに登録されます。
同時に複数の複数のサブタスクとバグが発生する場合、&lt;strong&gt;先に何をやるべきか&lt;/strong&gt;決定しないとまずいです。
必要な作業をさぼって、不要なことをやってしまうと&lt;strong&gt;無駄（顧客価値に繋がらない作業）&lt;/strong&gt;をやっちゃってダメです。&lt;/p&gt;

&lt;p&gt;ストーリー、サブタスクとバグチケットにはポイント数が決まっており、主に&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;緊急性&lt;/li&gt;
  &lt;li&gt;重要性&lt;/li&gt;
  &lt;li&gt;コスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などでポイントが定められ、優先順位は総合的に評価されます。
その&lt;strong&gt;ポイント関数&lt;/strong&gt;は非常に重要なものです。
しかし、例えば、$N=1000$タスクが看板に登録された時に、新規タスクの依頼が来ると$O(log(N))$時間量ぐらいで先にやるものを決めれないと重要なタスクに遅延が発生します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;どんなデータ構造で優先順位を列挙したり、けんさくしたりするのでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue&lt;/code&gt;を使いたいですね。キューでFirst-In-First-Out (FIFO)が実装されるが、優先付きキューだと優先度で並んでいます。
冒頭には必ず一番優先度が高いタスクがありますので、素早く検索できます。&lt;/p&gt;

&lt;p&gt;配列か循環リストを使って実装したいですが、C++でポインターは8バイトのオーバーヘッドが発生するため、配列で実装しましょう。
親は子供より優先されるということなら、2分木でやります。
つまり、ヒープが必要です。
ヒープの挿入は$O(log(N))$時間量で削除は$O(1)$.&lt;/p&gt;

&lt;h1 id=&quot;実装例&quot;&gt;実装例&lt;/h1&gt;

&lt;h2 id=&quot;cの実装&quot;&gt;C++の実装&lt;/h2&gt;

&lt;p&gt;C++11以降では、標準ライブラリSTLには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;というテンプレートクラスが存在します。
それを使ってタスク管理で優先順位を管轄することも可能ですが、なかなかSTLに勝負したいという気持ちで一回実装してみます。&lt;/p&gt;

&lt;p&gt;子会のターゲットのタスクはこのように定義します。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;task&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ヒープはこのように実装します。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;heap&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ::delete q;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;) &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配列は基本的に固定長で長さを変更したい場合、新しい配列を設定し、そこに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;でデータ移行を行う必要です。
その移行の操作は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;の中身になります。
因みに、STLでは動的に長さを変更するためには、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;の実装で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;を使っています。
後で話しますが、STLでも自分の実装でも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;の回数で遅くなることもあります。&lt;/p&gt;

&lt;p&gt;ここから、ヒープの実装に入ります。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_heap&lt;/code&gt;には、こどもは親より優先度が高いなら、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swap&lt;/code&gt;するという話で上下関係を正しくしています。
これはシフト・アップとシフト・ダウンの話です。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;はヒープにデータ挿入を行います。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;はヒープから一番優先度の高いタスクを取って実装します。&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// SHIFT UP&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// SHIFT DOWN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使う利便性で考えるとクラスを作ります。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _PQ_HPP_
#define _PQ_HPP_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;x0050.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cerr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Priority point must be positive!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;実験&quot;&gt;実験&lt;/h2&gt;

&lt;p&gt;計画でやりますが、主に考えたい確認項目は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正確性&lt;/li&gt;
  &lt;li&gt;速度・リソース&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;正確性&quot;&gt;正確性&lt;/h3&gt;

&lt;p&gt;正確性の確認で下記の実験を行います。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pq.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Previous max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10タスクは少ないけど、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue::print_heap&lt;/code&gt;でヒープの内容を確認し、アルゴリズムの正確性が確認できます。
最初のメンバーは優先度が一番高いものであれば、PASSです。&lt;/p&gt;

&lt;p&gt;実験結果&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;ebug&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0050.exe    
Priority point must be positive!
Max priority: 10, 25
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10, 25&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4, 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7, 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Max priority: 4, 20
Previous max priority: 10, 25
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4, 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11, 13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7, 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ヒープの性質としてはPASSです。&lt;/p&gt;

&lt;h3 id=&quot;速度メモリ&quot;&gt;速度・メモリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;に勝ちたいため、$N=1000, 10000, 100000, 1000000$で比較します。&lt;/p&gt;

&lt;p&gt;実験コードは下記になります。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pq.hpp&quot;
#include &amp;lt;string&amp;gt;
#include &amp;lt;chrono&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;queue&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exec time = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; [secs]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority_queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq_stl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq_stl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exec time = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; [secs]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行結果はなんと&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0050_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.31148&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;→自分の実装&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.00065&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;の実装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;おー、勝ちました！&lt;/p&gt;

&lt;p&gt;なぜなら、よく考えると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;は固定長の配列の欠点を克服するために、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;を使っているため、フルになると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;と同じく長さを延長することが必要ですが、自分の実装で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue * pq = new PriorityQueue(1000000);&lt;/code&gt;で最初から十分なメモリを与えて、延長の作業に時間を使っていないため高速です。&lt;/p&gt;

&lt;h1 id=&quot;決定木もう一つの考え方&quot;&gt;決定木：もう一つの考え方&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iUvog.png&quot; alt=&quot;decision tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2分木の形を取っています。
これは、「やるかどうかを決定する」というよりも、「次に何をやるか」を決定するデータ構造です。
いくつかの切口とする質問をおいて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yes/No&lt;/code&gt;で２派に分けて、実装パスを定める方法です。
やはり、優先度で決めた方がいいですね。&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="algorithm" /><category term="agile" /><category term="priority queue" /><summary type="html">Source: Microsoft アジャイル開発現場では、看板に乗っているタスクをメンバーに割り当てる際に、そのメンバーは直ぐにそのタスクをやるかどうか見てみます。 時々、どうやってやるかどうかを決める方法について教えてくださいとよく言われています。 まずは、優先順位を決めて、一番優先の高いタスクを取ってやるから、依頼したタスクはその優先順位トップに入らない場合、断ります。 トップに入るとやります。 しかし、ここで微妙にどうやってその優先順位を早く決めるか方法論を考えたいですが、やはりPriorityQueueを使いたいです。 第一優先のタスクを$O(1)$時間量で計算できます。 次に、決定木を使うべきです。 優先順位がつかない場合、いくつかのYes/No質疑でやるかどうかを決めることもできます。</summary></entry></feed>