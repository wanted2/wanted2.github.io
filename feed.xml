<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.caineng.in/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.caineng.in/" rel="alternate" type="text/html" /><updated>2021-10-10T10:44:14+07:00</updated><id>https://www.caineng.in/feed.xml</id><title type="html">AiFi</title><subtitle>The official AiFi</subtitle><author><name>Tuan Nguyen-Anh</name></author><entry><title type="html">So sánh git merge và git rebase</title><link href="https://www.caineng.in/non-english/se/2021/10/08/git-merge-rebase.html" rel="alternate" type="text/html" title="So sánh git merge và git rebase" /><published>2021-10-08T00:00:00+07:00</published><updated>2021-10-08T00:00:00+07:00</updated><id>https://www.caineng.in/non-english/se/2021/10/08/git-merge-rebase</id><content type="html" xml:base="https://www.caineng.in/non-english/se/2021/10/08/git-merge-rebase.html">&lt;p&gt;&lt;img src=&quot;/assets/img/git.svg&quot; alt=&quot;git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; là 2 câu lệnh quen thuộc với lập trình viên chỉ để giải quyết cùng 1 bài toán: với 2 branches được phát triển song song, nay cần migrate các tính năng của branch feature vào branch chính (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;).
Vấn đề là làm thế nào? Một cách chi tiết thì chỉ có 2 cách tương ứng với 2 câu lệnh ở trên tiêu đề bài viết mà chúng ta sẽ đi sâu trong bài này.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;đôi-lời-mở&quot;&gt;Đôi lời mở&lt;/h1&gt;

&lt;p&gt;Có khá nhiều hướng dẫn về cách tích hợp 2 nhánh công việc khác nhau, với nhiều cái tên “mỹ miều” như migration, integration và những tài liệu dài hàng trang chỉ để giải thích các cách làm.
Nhưng nếu là LTV lâu năm đều nhìn ra “tư duy” đằng sau và biết câu lệnh đơn thuần nhất để giải quyết: người mới có khi phải làm “bằng tay” cả khối công việc đó trong một vài tháng để chỉ hiểu được “tư duy” ẩn giấu, nhưng người đã biết thì chỉ cần 1 câu lệnh như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; là giải quyết xong công việc.&lt;/p&gt;

&lt;p&gt;Bạn thử nghĩ xem, nếu chỉ cần 1 vài giây là chạy xong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhưng nếu bạn không biết và phải làm theo nguyên tắc: tức là chi tiết hóa và làm toàn bộ chi tiết của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bằng tay thì liệu 1 tháng có đủ không?&lt;/p&gt;

&lt;p&gt;Vì vậy cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;. Chi tiết hóa giúp nhận ra vấn đề là gì, sau khi nắm rõ vấn đề, trừu tượng hóa giúp nhận ra “à với công việc này, thì sử dụng công cụ này sẽ chỉ cần 1 vài dòng lệnh là giải quyết vấn đề”.&lt;/p&gt;

&lt;p&gt;Chỉ chi tiết hóa thôi thì sẽ bị sa đà vào tiểu tiết, lãng phí công số.
Chỉ trừu tượng hóa thôi thì sẽ có rủi ro là bị sai hướng vì không nắm rõ chi tiết.
Trừu tượng hóa trước thì sẽ bị sai hướng dẫn đến chi tiết hóa hoàn toàn sai lệch.&lt;/p&gt;

&lt;p&gt;Vì vậy chỉ có cách suy nghĩ đúng là &lt;strong&gt;chi tiết hóa rồi trừu tượng hóa&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-devil-is-in-the-details&quot;&gt;The devil is in the details&lt;/h1&gt;

&lt;p&gt;Tại sao trừu tượng hóa trước thì không tốt? Đơn giản thôi: bởi để migrate tính năng, ngoài &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì còn có &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rebase&lt;/code&gt;, nếu không chi tiết bài toán cũng như sự khác biệt giữa 2 câu lệnh thì có thể đi sai hướng và dùng sai công cụ.&lt;/p&gt;

&lt;h2 id=&quot;git-merge&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git-merge.svg&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;
Đầu tiên chúng ta sẽ tìm hiểu cách thông dụng nhất và hay được khuyến khích dùng nhất để giải bài toán của chúng ta.
Bản chất của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì cũng như hình vẽ bên: tạo 1 commit mới hẳn và chuyển tất cả tính năng của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào đó.
Đây là lựa chọn mặc định của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt;, bạn có thể thay đổi bằng thêm &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--squash&lt;/code&gt;.
Chi tiết câu lệnh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;merge&lt;/code&gt; thì như bên dưới có 2 options mặc định là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--ff&lt;/code&gt; cho fast-forward và &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--commit&lt;/code&gt; (tức là tạo commit mới hay là merge commit).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git merge &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;options&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;commit&amp;gt;...]
   or: git merge &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;
   or: git merge &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show a diffstat at the end of the merge
    &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;                show a diffstat at the end of the merge       
    &lt;span class=&quot;nt&quot;&gt;--summary&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;synonym to &lt;span class=&quot;nt&quot;&gt;--stat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;n&amp;gt;]           add &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;at most &amp;lt;n&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; entries from shortlog to merge commit message
    &lt;span class=&quot;nt&quot;&gt;--squash&lt;/span&gt;              create a single commit instead of doing a merge
    &lt;span class=&quot;nt&quot;&gt;--commit&lt;/span&gt;              perform a commit &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;the merge succeeds &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--edit&lt;/span&gt;            edit message before committing
    &lt;span class=&quot;nt&quot;&gt;--cleanup&lt;/span&gt; &amp;lt;mode&amp;gt;      how to strip spaces and &lt;span class=&quot;c&quot;&gt;#comments from message&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff&lt;/span&gt;                  allow fast-forward &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ff-only&lt;/span&gt;             abort &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;fast-forward is not possible
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--verify-signatures&lt;/span&gt;   verify that the named commit has a valid GPG signature
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          merge strategy to use
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;&lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value&amp;gt;
                          option &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;selected merge strategy
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--message&lt;/span&gt; &amp;lt;message&amp;gt;
                          merge commit message &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;a non-fast-forward merge&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; &amp;lt;path&amp;gt;     &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;message from file
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         be more verbose
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be more quiet
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; but leave index and working tree alone
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue &lt;/span&gt;the current &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-progress&lt;/span&gt; merge
    &lt;span class=&quot;nt&quot;&gt;--allow-unrelated-histories&lt;/span&gt;
                          allow merging unrelated histories
    &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt;            force progress reporting
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG sign commit
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;--overwrite-ignore&lt;/span&gt;    update ignored files &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           bypass pre-merge-commit and commit-msg hooks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vậy quá trình sẽ xảy ra suôn sẻ? Đương nhiên conflict có thể xảy ra và dev sẽ phải resolve bằng tay, sau đó thì dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --continue&lt;/code&gt; để tiếp tục merge.
Trong trường hợp đang merge mà gặp phải tình huống conflict không thể giải quyết được thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge --abort&lt;/code&gt; sẽ đưa bạn về thời điểm trước khi merge.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; đương nhiên là điều không mong muốn, mà điều mong muốn là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt; đến khi xong.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; nhìn chung là 1 quy trình an toàn &lt;strong&gt;nếu bạn chịu khó làm đến cùng&lt;/strong&gt;. 
Nếu mới gặp conflict đầu tiên bạn đã sợ hãi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; ngay thì sẽ không bao giờ đi đến cùng được.
Đồng thời quy trình sẽ rất tự động nếu 2 branches không conflict nhiều.
Vì vậy, trước khi quyết định có merge hay không thì tốt nhất nên điều tra sơ xem có nhiều file trùng nhau giữa lịch sử 2 branches với base không?
Nếu nhìn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git diff&lt;/code&gt; sơ mà thấy khác nhau nhiều quá là có lẽ … không nên cho phép merge.
Bởi như vậy không khác gì làm bằng tay (cứ tí lại gặp conflict phải resolve)!&lt;/p&gt;

&lt;p&gt;Tuy nhiên, so với giải pháp tiếp theo mà chúng ta giới thiệu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; có ít rủi ro gặp conflict hơn và nhìn chung số lần resolve chỉ là $\leq 1$, nên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; luôn luôn là giải pháp ưu tiên cho bài toán của chúng ta.&lt;/p&gt;

&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git-rebase.svg&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;
Một lựa chọn khác cho bài toán của chúng ta là &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;.
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; sẽ không tạo ra commit mới nào cả mà sẽ sửa lại lịch sử git của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/strong&gt;
Như hình vẽ bên trái, bạn thấy rõ là các commit của &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; sẽ được bố trí xen kẽ theo thứ tự thời gian vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bắt đầu từ commit đầu tiên của feature branch thì thực hiện merge và nếu gặp conflict thì dev phải resolve bằng tay rồi &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--continue&lt;/code&gt;.
Cũng như &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; bạn có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; để quay lại trạng thái ban đầu nếu … sợ!
Bạn cũng có thể &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt;, nhưng nhớ là nếu &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--abort&lt;/code&gt; dọn dẹp để đưa branch &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; về trạng thái ban đầu thì &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--quit&lt;/code&gt; sẽ để lại mớ hỗn độn nguyên xi đó.&lt;/p&gt;

&lt;p&gt;Trong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; thì dù 2 branches conflict nhiều thế nào thì cũng chỉ cần 1 merge commit để chứa tất cả.
Nhưng bạn thấy đấy với &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; số lần conflict có thể tỷ lệ thuận với số commit của hai branches.
Và công việc sẽ không khác gì bằng tay nếu hai branches conflict nhiều!
&lt;strong&gt;Nhìn chung đây là cách làm nguy hiểm hơn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; rất nhiều.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bạn có thể dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase -i&lt;/code&gt; để chọn lựa những commit muốn bỏ vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; nếu không phải tất cả mọi commit trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; đều có giá trị với bạn.
Sau khi chỉnh sửa lịch sử thì bạn có thể cập nhật branch bằng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -f&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt; | &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;upstream&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]]
   or: git rebase &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;cmd&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;newbase&amp;gt;] &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;branch&amp;gt;]
   or: git rebase &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;--onto&lt;/span&gt; &amp;lt;revision&amp;gt;     rebase onto given branch instead of upstream
    &lt;span class=&quot;nt&quot;&gt;--keep-base&lt;/span&gt;           use the merge-base of upstream and branch as the current base
    &lt;span class=&quot;nt&quot;&gt;--no-verify&lt;/span&gt;           allow pre-rebase hook to run
    &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--quiet&lt;/span&gt;           be quiet. implies &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;         display a diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--no-stat&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not show diffstat of what changed upstream
    &lt;span class=&quot;nt&quot;&gt;--signoff&lt;/span&gt;             add a Signed-off-by trailer to each commit
    &lt;span class=&quot;nt&quot;&gt;--committer-date-is-author-date&lt;/span&gt;
                          make committer &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;match author &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reset-author-date&lt;/span&gt;   ignore author &lt;span class=&quot;nb&quot;&gt;date &lt;/span&gt;and use current &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;n&amp;gt;                passed to &lt;span class=&quot;s1&quot;&gt;'git apply'&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ignore-whitespace&lt;/span&gt;   ignore changes &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;whitespace
    &lt;span class=&quot;nt&quot;&gt;--whitespace&lt;/span&gt; &amp;lt;action&amp;gt;
                          passed to &lt;span class=&quot;s1&quot;&gt;'git apply'&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--force-rebase&lt;/span&gt;    cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt;               cherry-pick all commits, even &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;unchanged
    &lt;span class=&quot;nt&quot;&gt;--continue&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--skip&lt;/span&gt;                skip current patch and &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--abort&lt;/span&gt;               abort and check out the original branch
    &lt;span class=&quot;nt&quot;&gt;--quit&lt;/span&gt;                abort but keep HEAD where it is
    &lt;span class=&quot;nt&quot;&gt;--edit-todo&lt;/span&gt;           edit the todo list during an interactive rebase
    &lt;span class=&quot;nt&quot;&gt;--show-current-patch&lt;/span&gt;  show the patch file being applied or merged
    &lt;span class=&quot;nt&quot;&gt;--apply&lt;/span&gt;               use apply strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--merge&lt;/span&gt;           use merging strategies to rebase
    &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--interactive&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;the user edit the list of commits to rebase
    &lt;span class=&quot;nt&quot;&gt;--rerere-autoupdate&lt;/span&gt;   update the index with reused conflict resolution &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;possible
    &lt;span class=&quot;nt&quot;&gt;--empty&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;drop,keep,ask&lt;span class=&quot;o&quot;&gt;}&amp;gt;&lt;/span&gt;
                          how to handle commits that become empty
    &lt;span class=&quot;nt&quot;&gt;--autosquash&lt;/span&gt;          move commits that begin with squash!/fixup! under &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--gpg-sign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;key-id&amp;gt;]
                          GPG-sign commits
    &lt;span class=&quot;nt&quot;&gt;--autostash&lt;/span&gt;           automatically stash/stash pop before and after
    &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--exec&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;     add &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;lines after each commit of the editable list
    &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--rebase-merges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;mode&amp;gt;]
                          try to rebase merges instead of skipping them
    &lt;span class=&quot;nt&quot;&gt;--fork-point&lt;/span&gt;          use &lt;span class=&quot;s1&quot;&gt;'merge-base --fork-point'&lt;/span&gt; to refine upstream
    &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt; &amp;lt;strategy&amp;gt;
                          use the given merge strategy
    &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--strategy-option&lt;/span&gt; &amp;lt;option&amp;gt;
                          pass the argument through to the merge strategy
    &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt;                rebase all reachable commits up to the root&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--reschedule-failed-exec&lt;/span&gt;
                          automatically re-schedule any &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; that fails
    &lt;span class=&quot;nt&quot;&gt;--reapply-cherry-picks&lt;/span&gt;
                          apply all changes, even those already present upstream
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nói chung chỉnh sửa lịch sử là quá trình rất nguy hiểm!
Vì vậy cần chi tiết hóa trước để tránh đi theo những cách bất thường, sau đó trừu tượng hóa để tìm ra công cụ tối ưu.&lt;/p&gt;

&lt;h1 id=&quot;lời-kết&quot;&gt;Lời kết&lt;/h1&gt;

&lt;p&gt;Bài viết lấy ví dụ về bài toán migrate tính năng từ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.
Bạn nên nhớ những Gitflow thực tế sẽ còn phức tạp hơn với những quy tắc như chỉ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; mới được merge vào &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, tuy nhiên đó là chủ đề khác.
Ngoài ra, nếu bài toán của bạn là bất thường, đòi hỏi phải edit history thì có thể bạn phải dùng rebase.
Nhưng nhìn chung trong các trường hợp &lt;strong&gt;bình thường&lt;/strong&gt;, tôi thấy hầu như đều dùng &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; tức là tạo ra merge &lt;strong&gt;commit mới hẳn&lt;/strong&gt; và chuyển hết tính năng cần thiết vào.
Thêm nữa, đây là migrate &lt;strong&gt;tính năng&lt;/strong&gt; chứ không chỉ là files hay tài nguyên, tức là các tính năng được implement trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature/1&lt;/code&gt; phải tái hiện như thế trên &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nói chung tạo cái mới thì tốt hơn!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="git" /><category term="gitflow" /><summary type="html">git merge và git rebase là 2 câu lệnh quen thuộc với lập trình viên chỉ để giải quyết cùng 1 bài toán: với 2 branches được phát triển song song, nay cần migrate các tính năng của branch feature vào branch chính (main). Vấn đề là làm thế nào? Một cách chi tiết thì chỉ có 2 cách tương ứng với 2 câu lệnh ở trên tiêu đề bài viết mà chúng ta sẽ đi sâu trong bài này.</summary></entry><entry><title type="html">アジャイル開発でタスクにアサインされる場合、直ぐにやるかどうかどうやって判定するか？</title><link href="https://www.caineng.in/non-english/se/2021/09/27/agile-feature.html" rel="alternate" type="text/html" title="アジャイル開発でタスクにアサインされる場合、直ぐにやるかどうかどうやって判定するか？" /><published>2021-09-27T00:00:00+07:00</published><updated>2021-09-27T00:00:00+07:00</updated><id>https://www.caineng.in/non-english/se/2021/09/27/agile-feature</id><content type="html" xml:base="https://www.caineng.in/non-english/se/2021/09/27/agile-feature.html">&lt;p&gt;&lt;img src=&quot;https://docs.microsoft.com/en-us/learn/azure-devops/get-started-with-devops/media/2-vsm-whiteboard1.png&quot; alt=&quot;Agile&quot; /&gt;
&lt;em&gt;Source: Microsoft&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;アジャイル開発現場では、看板に乗っているタスクをメンバーに割り当てる際に、そのメンバーは直ぐにそのタスクをやるかどうか見てみます。
時々、&lt;strong&gt;どうやってやるかどうかを決める方法について教えてください&lt;/strong&gt;とよく言われています。
まずは、&lt;strong&gt;優先順位&lt;/strong&gt;を決めて、一番優先の高いタスクを取ってやるから、依頼したタスクはその優先順位トップに入らない場合、断ります。
トップに入るとやります。
しかし、ここで微妙にどうやってその優先順位を早く決めるか方法論を考えたいですが、やはり&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue&lt;/code&gt;を使いたいです。
第一優先のタスクを$O(1)$時間量で計算できます。
次に、&lt;strong&gt;決定木&lt;/strong&gt;を使うべきです。
優先順位がつかない場合、いくつかの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yes/No&lt;/code&gt;質疑でやるかどうかを決めることもできます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;優先順位でアジャイルタスクの受託を決定する&quot;&gt;優先順位でアジャイルタスクの受託を決定する&lt;/h1&gt;

&lt;p&gt;日々でストーリーは新たに定められ、サブタスクに分けられます。
バグがある場合、バグ報告でチケットを新規起票し、バックログに登録されます。
同時に複数の複数のサブタスクとバグが発生する場合、&lt;strong&gt;先に何をやるべきか&lt;/strong&gt;決定しないとまずいです。
必要な作業をさぼって、不要なことをやってしまうと&lt;strong&gt;無駄（顧客価値に繋がらない作業）&lt;/strong&gt;をやっちゃってダメです。&lt;/p&gt;

&lt;p&gt;ストーリー、サブタスクとバグチケットにはポイント数が決まっており、主に&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;緊急性&lt;/li&gt;
  &lt;li&gt;重要性&lt;/li&gt;
  &lt;li&gt;コスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などでポイントが定められ、優先順位は総合的に評価されます。
その&lt;strong&gt;ポイント関数&lt;/strong&gt;は非常に重要なものです。
しかし、例えば、$N=1000$タスクが看板に登録された時に、新規タスクの依頼が来ると$O(log(N))$時間量ぐらいで先にやるものを決めれないと重要なタスクに遅延が発生します。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;どんなデータ構造で優先順位を列挙したり、けんさくしたりするのでしょう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue&lt;/code&gt;を使いたいですね。キューでFirst-In-First-Out (FIFO)が実装されるが、優先付きキューだと優先度で並んでいます。
冒頭には必ず一番優先度が高いタスクがありますので、素早く検索できます。&lt;/p&gt;

&lt;p&gt;配列か循環リストを使って実装したいですが、C++でポインターは8バイトのオーバーヘッドが発生するため、配列で実装しましょう。
親は子供より優先されるということなら、2分木でやります。
つまり、ヒープが必要です。
ヒープの挿入は$O(log(N))$時間量で削除は$O(1)$.&lt;/p&gt;

&lt;h1 id=&quot;実装例&quot;&gt;実装例&lt;/h1&gt;

&lt;h2 id=&quot;cの実装&quot;&gt;C++の実装&lt;/h2&gt;

&lt;p&gt;C++11以降では、標準ライブラリSTLには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;というテンプレートクラスが存在します。
それを使ってタスク管理で優先順位を管轄することも可能ですが、なかなかSTLに勝負したいという気持ちで一回実装してみます。&lt;/p&gt;

&lt;p&gt;子会のターゲットのタスクはこのように定義します。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;task&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ヒープはこのように実装します。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;heap&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ::delete q;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;) &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配列は基本的に固定長で長さを変更したい場合、新しい配列を設定し、そこに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;でデータ移行を行う必要です。
その移行の操作は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;の中身になります。
因みに、STLでは動的に長さを変更するためには、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;の実装で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;を使っています。
後で話しますが、STLでも自分の実装でも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;の回数で遅くなることもあります。&lt;/p&gt;

&lt;p&gt;ここから、ヒープの実装に入ります。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_heap&lt;/code&gt;には、こどもは親より優先度が高いなら、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swap&lt;/code&gt;するという話で上下関係を正しくしています。
これはシフト・アップとシフト・ダウンの話です。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt;はヒープにデータ挿入を行います。
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;はヒープから一番優先度の高いタスクを取って実装します。&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// SHIFT UP&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// SHIFT DOWN&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reinit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;make_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使う利便性で考えるとクラスを作ります。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _PQ_HPP_
#define _PQ_HPP_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;x0050.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cerr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Priority point must be positive!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;実験&quot;&gt;実験&lt;/h2&gt;

&lt;p&gt;計画でやりますが、主に考えたい確認項目は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正確性&lt;/li&gt;
  &lt;li&gt;速度・リソース&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;正確性&quot;&gt;正確性&lt;/h3&gt;

&lt;p&gt;正確性の確認で下記の実験を行います。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pq.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Previous max priority: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10タスクは少ないけど、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue::print_heap&lt;/code&gt;でヒープの内容を確認し、アルゴリズムの正確性が確認できます。
最初のメンバーは優先度が一番高いものであれば、PASSです。&lt;/p&gt;

&lt;p&gt;実験結果&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .&lt;span class=&quot;se&quot;&gt;\D&lt;/span&gt;ebug&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;0050.exe    
Priority point must be positive!
Max priority: 10, 25
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10, 25&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4, 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7, 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Max priority: 4, 20
Previous max priority: 10, 25
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4, 20&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;11, 13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;5, 17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7, 6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8, 2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2, 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9, 15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;6, 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ヒープの性質としてはPASSです。&lt;/p&gt;

&lt;h3 id=&quot;速度メモリ&quot;&gt;速度・メモリ&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;に勝ちたいため、$N=1000, 10000, 100000, 1000000$で比較します。&lt;/p&gt;

&lt;p&gt;実験コードは下記になります。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;pq.hpp&quot;
#include &amp;lt;string&amp;gt;
#include &amp;lt;chrono&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;queue&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;comp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exec time = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; [secs]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priority_queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq_stl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pq_stl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_resolution_clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exec time = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; [secs]&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行結果はなんと&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x0050_big&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.31148&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;→自分の実装&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.00065&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;→&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;の実装&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;おー、勝ちました！&lt;/p&gt;

&lt;p&gt;なぜなら、よく考えると、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::priority_queue&lt;/code&gt;は固定長の配列の欠点を克服するために、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;を使っているため、フルになると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reinit&lt;/code&gt;と同じく長さを延長することが必要ですが、自分の実装で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PriorityQueue * pq = new PriorityQueue(1000000);&lt;/code&gt;で最初から十分なメモリを与えて、延長の作業に時間を使っていないため高速です。&lt;/p&gt;

&lt;h1 id=&quot;決定木もう一つの考え方&quot;&gt;決定木：もう一つの考え方&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/iUvog.png&quot; alt=&quot;decision tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2分木の形を取っています。
これは、「やるかどうかを決定する」というよりも、「次に何をやるか」を決定するデータ構造です。
いくつかの切口とする質問をおいて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Yes/No&lt;/code&gt;で２派に分けて、実装パスを定める方法です。
やはり、優先度で決めた方がいいですね。&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="algorithm" /><category term="agile" /><category term="priority queue" /><summary type="html">Source: Microsoft アジャイル開発現場では、看板に乗っているタスクをメンバーに割り当てる際に、そのメンバーは直ぐにそのタスクをやるかどうか見てみます。 時々、どうやってやるかどうかを決める方法について教えてくださいとよく言われています。 まずは、優先順位を決めて、一番優先の高いタスクを取ってやるから、依頼したタスクはその優先順位トップに入らない場合、断ります。 トップに入るとやります。 しかし、ここで微妙にどうやってその優先順位を早く決めるか方法論を考えたいですが、やはりPriorityQueueを使いたいです。 第一優先のタスクを$O(1)$時間量で計算できます。 次に、決定木を使うべきです。 優先順位がつかない場合、いくつかのYes/No質疑でやるかどうかを決めることもできます。</summary></entry><entry><title type="html">セキュアブラウザについて</title><link href="https://www.caineng.in/pm/sre/non-english/2021/09/09/secure-browser.html" rel="alternate" type="text/html" title="セキュアブラウザについて" /><published>2021-09-09T00:00:00+07:00</published><updated>2021-09-09T00:00:00+07:00</updated><id>https://www.caineng.in/pm/sre/non-english/2021/09/09/secure-browser</id><content type="html" xml:base="https://www.caineng.in/pm/sre/non-english/2021/09/09/secure-browser.html">&lt;p&gt;&lt;img src=&quot;/assets/img/secure-browser.png&quot; alt=&quot;secure-browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中小企業向け&lt;a href=&quot;https://www.soumu.go.jp/menu_news/s-news/01cyber01_02000001_00111.html&quot;&gt;テレワークセキュリティガイドライン（第5版）&lt;/a&gt; [1]が令和3年5月には公表されました。
無料で直ぐに点検できますので、結構貴重な資料であろう。
その中で、セキュアブラウザを用いたテレワークのセキュリティガイドラインも一章ぐらいあります。
普通にウエブサイトを閲覧するためのIEやChromeなどもブラウザですが、セキュアブラウザって何でしょうか？
さらに、一般のブラウザと比べると付加価値とは何か？
ひょっとしたら調べていきます。
専門家レベルに対し豆知識かもしれないが、市民講座に参加するエンドユーザのレベルで理解できなければ、普及を妨げるし、セキュリティ向上につながらないため、頑張って調べます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;皆はセキュアブラウザだ&quot;&gt;皆はセキュアブラウザだ&lt;/h1&gt;

&lt;p&gt;なかなか、Firefox、Chrome、IEのホームページで見ると皆はセキュアだと主張しています。
「ウエブサイトの&lt;strong&gt;コンテンツ&lt;/strong&gt;を視聴できるブラウザに、&lt;strong&gt;セキュリティ&lt;/strong&gt;と&lt;strong&gt;プライバシー保護&lt;/strong&gt;の機能組を十分に実装されている」ものはセキュアブラウザであるみたいです。
コンテンツ視聴には、見る、聴く、話す、情報共有だけではなく、検索、フィルターなどの操作もできるが、一応、コンテンツの知識で、ここではネット上でユーザがデータをやり取りする操作のすべてを指すとしましょう。
これらの機能は「ブラウザ」の基礎機能となり、最低限で実装すべきの機能でしょう。&lt;/p&gt;

&lt;p&gt;それに加えて、&lt;strong&gt;セキュリティ&lt;/strong&gt;と&lt;strong&gt;プライバシー保護&lt;/strong&gt;の機能組はなぜ必要になるか？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;セキュリティ&lt;/strong&gt;: 悪意のあるユーザが誠実ユーザや組織から情報を盗んだり、攻撃に利用したりする恐れもあります。ブラウザの領域だと、組織よりもエンドユーザの情報の盗聴の可能性があります。もちろん、そのエンドユーザが会社の従業員である場合、組織の機密情報レベルに関係します。ですので、システムレベルでポリシーを設定し、ブラウザの挙動を制限する政策も企業のガバナンスの立場になります。しかし、それだけでは足りず、ブラウザ自体にも対策を備えないとインシデントが多発する可能性もあります。要するに、&lt;strong&gt;ブラウザ自体にはどれぐらいエンドユーザをネット上の機器から守れるかセキュア性を評価する指標になります&lt;/strong&gt;。ちなみに、システムレベルで設定する方法は受動的であり、接続先のIPなどのコネクションの情報を見てブロックするというルール化するプロセスも有効な方法です。ここで、セキュアブラウザには受動ではなく、エンドユーザ自身の能動的に活動させる方法もあります。戦争で、相手軍の動きを待たずに、先に主導権をとって、有利地を確保する手です。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;プライバシー保護&lt;/strong&gt;: 先に説明した盗聴の話と少し違います。業務での機密情報ではなく&lt;strong&gt;個人情報&lt;/strong&gt;の話かと思います。エンドユーザはネット上で活動し、活動履歴が出てきます。名前、メールアドレス、住所といった真の個人情報だけではなく、活動履歴も個人情報です。また、金融機関が発行するクレジットカードの番号や明細なども個人情報として扱われるべきであろう。福祉サービスや行政サービスと連携する個人番号、保険情報、住民票、住民移動履歴なども個人情報として扱います。機密情報がバレルと会社の利益に損害が発生する恐れがわかりやすいが、個人情報が盗聴すると何が起きるか？例えば、不注意でクレジットカードの番号が怪しい人に見せて、そのあとに講座から大金額が引き落としたなどエンドユーザ側で情報漏洩が発生するインシデントもあります。サービス経営側でユーザの個人情報を漏洩してしまうインシデントもあります。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ベルシステム24事件&lt;/strong&gt;: クレジットカード会社の派遣社員による悪用が原因の情報漏えい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;クレジットカード会社のコールセンター「ベルシステム」に勤める契約社員が、顧客の情報を不正に使用する犯罪もありました。コールセンターの業務で知り得た顧客のクレジットカード番号とセキュリティコードなどを、悪用目的で盗み出したというものです。顧客のクレジットカードにより購入した商品の額は900万円近くにのぼりました。情報セキュリティ部門に関連する部署の職員犯行により、社会的にも大きく騒がれました。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;セキュアブラウザはもちろんサービス運営側よりもエンドユーザ側に主導的なアプローチを適用し、セキュリティとプライバシー保護の両方を充実します。
金融機関には不正送金やクレジット窃盗などの詐欺（Fraud）を検出する受動的なアプローチも多く実施されるが、今回のセキュアブラウザはエンドユーザ側の対策になります。&lt;/p&gt;

&lt;h1 id=&quot;主要機能アバストセキュアブラウザの例&quot;&gt;主要機能：アバストセキュアブラウザの例&lt;/h1&gt;

&lt;p&gt;前節で説明したように、コンテンツ視聴機能組には、十分にセキュリティとプライバシーを守る機能組を足してセキュアブラウザになりますが、情報漏洩をエンドユーザ側で対策を備えることになります。&lt;strong&gt;どんな機能が実装されるか見てみましょう&lt;/strong&gt;。
今回は&lt;strong&gt;アバストセキュアブラウザ&lt;/strong&gt;を例にして解析します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;アンチウィルスと連携&lt;/strong&gt;: マルウエアやランサムウェアによる攻撃が増え続けています。ハッカーが対象のデバイスに情報がなくてもそのデバイスをコントロールし、攻撃に利用する恐れもあります。セキュアブラウザはアバストアンチウィルスに連携し、ウエブページ閲覧の時にマルウエアとランサムウェアをブロックすることでより安全なブラウジング体験を提供します。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;バンクモード&lt;/strong&gt; [3]: オンラインでショッピングやバンキングをするときに、金融情報を求めたり、フォームに入力したりすることがあります。
バンクモードは、実際のPCの内部で安全かつクリーンなPCとしての役割を果たす&lt;strong&gt;仮想デスクトップ&lt;/strong&gt;を提供します。
バンクモード仮想デスクトップは、悪意のあるスクリプトの挿入、キーストロークロギング、サードパーティアプリによるスクリーンショットの試行からユーザーを保護します。
オンラインバンキングのサイトにアクセスするときや、オンライン決済を行うときは毎回、バンクモードを使用することをおすすめします。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;VPN&lt;/strong&gt;: 仮想プライベートネットワークの略語です。下記に述べるプライベートモードとは違い、エンドユーザの活動をすべての第三者の侵入者から守れます。
第三者の侵入者はハッカーというだけではなく、インターネットプロバイダーや政府からも保護します。
アバストセキュアブラウザにはVPN機能が実装されていますので、そのまま使うとインターネット上でより安全な体験ができます。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-resprivacy.pressidium.com/wp-content/uploads/2021/08/private-and-secure-browser-with-a-VPN.png&quot; alt=&quot;vpn&quot; /&gt;
&lt;em&gt;Source: &lt;a href=&quot;https://restoreprivacy.com/browser/secure/&quot;&gt;Restore Privacy&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;アドブロック&lt;/strong&gt;: 余計な広告をブロックする話です。3つのレベルで設定できます。
「最小限」レベルでは、バナーやポップアップ、音声付き自動再生動画をブロックするなどできます。
「バランス」レベルでは、ウエブ閲覧を低速化するとされた広告をすべてブロックします。これはデフォルトレベルと設定されます。
「厳格」レベルでは、ほぼすべての広告をブロックします。一部のウエブサイトへのアクセスができなくなり、読み込めないなどもあります。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;指紋採取対策&lt;/strong&gt;: ネット上での活動経歴も個人情報です。サービス運営側と広告ネットワークがユーザの活動経歴を求めたいです。なぜなら、その履歴で最適な体験、広告をユーザに提供します。CookieやIPアドレスでユーザを特定する手法も古くて、ユーザ固有のブラウザ設定でユーザを監視できます。しかし、活動経歴をウエブサイトと広告ネットワークから守りたい場合、ユーザ固有のブラウザ指紋（ブラウザバージョンやインストールした拡張機能など）を隠す必要があります。&lt;strong&gt;できるだけ、VPNをオンにしてからこの機能もオンにすることで追加プライバシー保護レイヤーを設定できます&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;モバイル保護&lt;/strong&gt;: 近年、モバイルデバイスの普及により、携帯モバイルでのインシデントも多発しています。よって、PC版ではなく、モバイルでコンテンツ視聴を守る必要あります。アバストセキュアブラウザはAndroid版とiOS版も提供しています。
PCとともにモバイルにも導入しましょう。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;フィッシング対策&lt;/strong&gt;: 訪問先のウエブサイトを危険なリストに照合してチェックすることでフィッシングのような詐欺サイトへのアクセスを防止できます。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;トラッキング対策&lt;/strong&gt;: 訪問先でトラッキングスクリプトをスキャンし、それらユーザーの活動経歴をトラッキングする行為を発見します。この機能により、ユーザの訪問経歴を広告会社と分析会社から守れます。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;プライベートモード&lt;/strong&gt;: プライバシー保護のために、活動経歴を保存せずに、サクション終了時にCookieやウエブキャッシュ、セクションデータをすべて破棄します。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;パスワードマネージャー&lt;/strong&gt;: オンラインで安全にウエブサイトを閲覧できるために、かならず異なるサイトで異なるパスワードを設定することが必要です。それに伴い、設定パスワードが多発しているので、パスワードを忘れずに保管して管理する手法も必要となります。
エンドユーザは自らパスワードを記憶することが不要で、付箋や紙媒体にパスワードを記録することも不要です。
さらに、入力時に、パスワードを打たずに、ワンクリックで素早く入力できることで、再入力で漏れることもないでしょう。
アバストセキュアブラウザにはパスワードマネージャーが常にオンにしましょう。
ブラウザ（デフォルト）のものを使っても良くて、外部のパスワードマネージャーへの連携も可能となります。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;拡張機能ガード&lt;/strong&gt;: 拡張機能が役に立ちますが、同時にエンドユーザを悪意のあるハッカーとエクスプロイトにさらされるため、拡張機能をチェックする必要があります。
アバストセキュアブラウザの拡張機能ガードをオンにすると、拡張機能の身元を確認し、信頼できない拡張機能のインストールを防止できます。
自分で信頼できると判断したが、拡張機能ガードによりブロックされた場合、設定で例外を追加できますが、例外を追加する前に信頼性を必ず確保してください。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;プライバシークリーナー&lt;/strong&gt;: この機能で閲覧セクションで貯蓄された不要なデータを一括削除できます。
閲覧履歴やキャッシュされた画像やCookieやダウンロード履歴などを削除できます。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ハックチェック&lt;/strong&gt;: メールアドレスを入力することで、そのメールアドレスにリンクされたすべてのオンラインアカウントを監視し、個人情報が漏洩された場合、アラートを上げることになります。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;
&lt;p&gt;セキュアブラウザの機能についてアバストセキュアブラウザの例でわかりました。
コンテンツ視聴だけではなく、安全に閲覧できるために、セキュリティとプライバシー保護の機能組を十分に実装する必要があります。
セキュアブラウザはあくまでもエンドユーザ側を保護するための手法であり、テレワークでは不十分である可能性もありますが、チェックリストをキチンとさらされてポリシー化し、受動的手法も能動的手法もいろいろと活用しましょう。&lt;/p&gt;

&lt;p&gt;上記の機能組では、VPNはアバストセキュアブラウザで有料機能になるが、Pro版にアップグレードするか、外部の無償VPNを利用する手法が必要です。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;soumushou46online&quot;&gt;&lt;i&gt;総務省｜報道資料｜「テレワークセキュリティガイドライン（第5版）」（案）に対する意見募集の結果及び当該ガイドラインの公表&lt;/i&gt;. https://www.soumu.go.jp/menu_news/s-news/01cyber01_02000001_00111.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;avastsecurebrowser64online&quot;&gt;&lt;i&gt;追跡なしのプライベート ブラウザ | アバスト セキュア ブラウザ&lt;/i&gt;. https://www.avast.co.jp/secure-browser#pc.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;bankmode1online&quot;&gt;&lt;i&gt;アバスト セキュア ブラウザでバンク モードを開く方法 | アバスト&lt;/i&gt;. https://support.avast.com/ja-jp/article/Use-Bank-Mode/.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="sre" /><category term="non-english" /><category term="セキュアブラウザ" /><category term="ブラウザ" /><category term="セキュリティ" /><category term="プライバシー" /><summary type="html">中小企業向けテレワークセキュリティガイドライン（第5版） [1]が令和3年5月には公表されました。 無料で直ぐに点検できますので、結構貴重な資料であろう。 その中で、セキュアブラウザを用いたテレワークのセキュリティガイドラインも一章ぐらいあります。 普通にウエブサイトを閲覧するためのIEやChromeなどもブラウザですが、セキュアブラウザって何でしょうか？ さらに、一般のブラウザと比べると付加価値とは何か？ ひょっとしたら調べていきます。 専門家レベルに対し豆知識かもしれないが、市民講座に参加するエンドユーザのレベルで理解できなければ、普及を妨げるし、セキュリティ向上につながらないため、頑張って調べます。</summary></entry><entry><title type="html">C4 diagrams for software architecture visualization - Context, Containers, Components, and Code -</title><link href="https://www.caineng.in/pm/se/2021/09/03/c4-diagrams-software-design.html" rel="alternate" type="text/html" title="C4 diagrams for software architecture visualization - Context, Containers, Components, and Code -" /><published>2021-09-03T00:00:00+07:00</published><updated>2021-09-03T00:00:00+07:00</updated><id>https://www.caineng.in/pm/se/2021/09/03/c4-diagrams-software-design</id><content type="html" xml:base="https://www.caineng.in/pm/se/2021/09/03/c4-diagrams-software-design.html">&lt;p&gt;&lt;img src=&quot;https://res.infoq.com/articles/C4-architecture-model/en/resources/c4-1-1529934729133.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Source: InfoQ&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using MS Word and Excel, an engineer can describe the system in language and visuals.
Such conventional methodologies can be sufficient for small architecture with few components.
When the software system scales and changes frequently, maintaining records of the architecture by documents can be tedious.
Hence, the lack of interaction in conventional document methods may present a stiff learning curve for a new member to the project team.
To cope with these challenges, the &lt;strong&gt;C4 diagram model [1, 2, 3]&lt;/strong&gt; was created to give interactive views of the software architectures.
Systems are modeled at four different levels: system context, containers, components, and code.
These levels are represented by diagrams.
Intuitively, we can see the C4 diagrams as large visualization systems in which engineers can zoom in and out to see the details and the big picture.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;the-c4-model&quot;&gt;The C4 model&lt;/h1&gt;

&lt;h2 id=&quot;the-cure-of-representation&quot;&gt;The cure of representation&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Knowledge sharing&lt;/strong&gt; is important in software projects.
Using representations like documents and diagrams, teams can keep the understanding of the product identically among team members.
Also, having such powerful representations can keep stakeholders motivated.
A good representation of the software projects, especially the architectures, helps audiences to capture the mechanism of the project at a glance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good representation should be lightweight but doesn’t omit any aspects of the software product. It should contain as many details as possible but also must be compact and fast.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had experiences in several projects where knowledge sharing is important.
People realized the need, and they tried to share by different means: verbal conversations (i. e., meetings or discussions), visual communications (presentations and diagrams), and textual things (documents by MS Office, notes, …).
However, things will be like “a ton of documents” have been produced, and new members need to read all when joining the project.
Then when a business staff wants to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short and compact description&lt;/code&gt; to put in presentations (and will give the presentation to the clients or investors), someone will need to do the &lt;strong&gt;summarization&lt;/strong&gt; after reading the whole bundle.
Such textual summary was a good means for knowledge sharing, but the compression ratio was not quite good: several sentences can capture only some aspects of the projects, and then QA sections always come for clients and members to understand more.&lt;/p&gt;

&lt;div style=&quot;width: 40%; float: right; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/0b/1913_Piqua_Ohio_Advertisement_-_One_Look_Is_Worth_a_Thousand_Words.jpg&quot; /&gt;
&lt;p&gt;1913 Piqua Ohio Advertisement - One Look Is Worth a Thousand Words. Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words#/media/File:1913_Piqua_Ohio_Advertisement_-_One_Look_Is_Worth_a_Thousand_Words.jpg&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Another direction to find a compact representation is using visual information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A picture is worth a thousand words.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Diagrams and interactions are always good things. Some studies have shown that children will learn faster by visual representations like pictures and interesting pictures.
Finding such a compact and meaningful visual representation also needs to compress the whole architecture into small diagrams which are organized hierarchically.
In other words, architects who find such representations also need to refine, prune and search for compact architectures to put into the compact diagrams.&lt;/p&gt;

&lt;div style=&quot;width: 60%; float: left; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://c4model.com/img/c4-overview.png&quot; /&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://c4model.com/&quot;&gt;c4model.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Therefore, the search for good representations faces the tradeoff between the learning cost and the compactness of representations.
&lt;strong&gt;What C4 model provides is a compact, interactive and hierarchical representation of any software architecture.&lt;/strong&gt;
The model divides the architectural diagrams into four levels: context, containers, components, and code.
Low-level representations such as code and components represent details for implementations and maintenance.
Thus, they should be used by developers.
High-level representations such as context and containers represent an overview of the architecture such as system diagrams and container architecture (container here is not Docker!).&lt;/p&gt;

&lt;p&gt;Another aspect of a good representation is &lt;strong&gt;handling of changes&lt;/strong&gt;.
Projects always change: requirements change, designs change, people change, code change, architectures change, .etc.
Then the representations will change.
Having a &lt;strong&gt;general model&lt;/strong&gt; which is valid for many software architectures is a challenge.
Neither searching for such an architecture can be done soon, but for the short-term thinking, we need a representation that needs to change only a little even when the architectures change a lot.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good representation must be not only robust to changes in micro-level details (code and components designs) but also persistent to changes at macro-level architectures and management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;metamodel-and-notations&quot;&gt;Metamodel and notations&lt;/h2&gt;

&lt;p&gt;The author of C4 model &lt;strong&gt;Simon Brown&lt;/strong&gt; once talked about the invention as follows.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The C4 model was created as a way to help software development teams describe and communicate software architecture, both during up-front design sessions and when retrospectively documenting an existing codebase. 
It’s a way to create maps of your code, at various levels of detail, in the same ways you would use something like Google Maps to zoom in and out of an area you are interested in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although primarily aimed at software architects and developers, the C4 model provides a way for software development teams to efficiently and effectively communicate their software architecture at different levels of detail, telling different stories to different types of audiences when doing up-front design or retrospectively documenting an existing codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;The C4 model consists of a hierarchical set of software architecture diagrams for context, containers, components, and code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;elements-and-relationships&quot;&gt;Elements and relationships&lt;/h3&gt;
&lt;p&gt;The following elements and relationships form the diagrams in C4.
Notations and metamodel are described.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Terms&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Notation&lt;/th&gt;
      &lt;th&gt;Parent&lt;/th&gt;
      &lt;th&gt;Properties&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Person&lt;/td&gt;
      &lt;td&gt;A person represents one of the human users of your software system (e. g., roles, personas, etc.).&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-person.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Name, Description, Location (Internal or External)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Software system&lt;/td&gt;
      &lt;td&gt;A software system is the highest level of abstraction and describes something that delivers value to its users, whether they are human or not. It should be something large, contains all smaller levels of abstractions such as software containers.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-software-system.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Name, Description, Location (Internal or External), The set of containers that make up the software system&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Container&lt;/td&gt;
      &lt;td&gt;An application or data store. A container is essentially a context or boundary inside which some code or some data is stored.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-container.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;A software system&lt;/td&gt;
      &lt;td&gt;Name, Description, Technology, The set of components within the container&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Component&lt;/td&gt;
      &lt;td&gt;A component is a grouping of related functionality encapsulated behind a well-defined interface.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-component.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;A container&lt;/td&gt;
      &lt;td&gt;Name, Description, Technology, The set of code elements (e. g. classes, interfaces, etc.) that the component is implemented by&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Code&lt;/td&gt;
      &lt;td&gt;This is the lowest level in C4. The diagrams here show the details of code elements (e. g., classes, interfaces, objects, functions, etc.).&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;A component&lt;/td&gt;
      &lt;td&gt;Name, Description, Fully qualified type&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Relationship&lt;/td&gt;
      &lt;td&gt;Relationships are permitted between any elements in the model in either direction.&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/notation-relationship.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;Description and Technology&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;views&quot;&gt;Views&lt;/h3&gt;

&lt;p&gt;The C4 model consists of 4 basic views with respect to 4 levels of diagrams.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;View type&lt;/th&gt;
      &lt;th&gt;Scope&lt;/th&gt;
      &lt;th&gt;Permitted elements&lt;/th&gt;
      &lt;th&gt;Examples&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1. System Context&lt;/td&gt;
      &lt;td&gt;A software system.&lt;/td&gt;
      &lt;td&gt;Software systems, People&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-SystemContext.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2. Container&lt;/td&gt;
      &lt;td&gt;A software system&lt;/td&gt;
      &lt;td&gt;Software systems, People, Containers within the software system in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Containers.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3. Component&lt;/td&gt;
      &lt;td&gt;A container&lt;/td&gt;
      &lt;td&gt;Software systems, People, Other containers within the parent software system of the container in scope, Components within the container in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Components.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4. Code&lt;/td&gt;
      &lt;td&gt;A component&lt;/td&gt;
      &lt;td&gt;Code elements (e. g., classes, interfaces, etc.) that are used to implement the component in scope&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://c4model.com/img/bigbankplc-Classes.png&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;System Context diagrams&lt;/strong&gt; describe &lt;strong&gt;business usecases&lt;/strong&gt; in which the interaction between users (people) and the software system is visualized. By seeing system context, stakeholders catch the key use-cases of the system, how end-users will use the system, and so on.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Container diagrams&lt;/strong&gt; visualize the architecture of each container.
Formally, it is a diagram of users and containers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Component diagrams&lt;/strong&gt; visualize the internal architecture of a container with components are atomic elements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code diagrams&lt;/strong&gt; show classes, interfaces, objects, and relationships. One can use UML diagrams to visualize. The class diagram or the ER diagram can be examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;supplementary-diagrams&quot;&gt;Supplementary diagrams&lt;/h2&gt;

&lt;p&gt;Besides four basic views, there are several supplementary views for the C4 model to capture the dynamic and the big picture of software systems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;System Landscape diagram&lt;/strong&gt; shows the target software systems in a landscape with other related systems.
For example, the target system is an Internet Banking System.
It needs to interact with other systems in the banks like Email Systems, Mainframe Banking Systems, and other roles like Customer Service Staff and Back Office Staff.
To do this, add another diagram that sits “on top” of the C4 diagrams to show the system landscape from an IT perspective.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width: 50%; float: left; margin: 15px;&quot;&gt;
&lt;img src=&quot;https://c4model.com/img/bigbankplc-SignIn.png&quot; /&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://c4model.com/&quot;&gt;c4model.com&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Dynamic diagram&lt;/strong&gt; considers how elements in a static model collaborate at runtime to implement a user story, use case, feature, etc.
One can reuse the UML communication diagram to show it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;Deployment diagram&lt;/strong&gt; is based on the UML deployment diagram.
It illustrates how software systems and/or containers in the static model are mapped to infrastructure.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;p&gt;Tools for diagramming can be &lt;a href=&quot;https://c4model.com/&quot;&gt;a lot&lt;/a&gt;.
For only diagramming, I would like to recommend the &lt;a href=&quot;https://www.diagrams.net/&quot;&gt;Diagrams.net&lt;/a&gt;, which is very convenient for drawing system architecture.
It has many toolboxes for drawing deployment diagrams, AWS/GCP/Azure Cloud architectures, etc.&lt;/p&gt;

&lt;p&gt;For modeling the software architectures with diagramming, one can refer to Archi [2].&lt;/p&gt;

&lt;h2 id=&quot;a-tutorial&quot;&gt;A tutorial&lt;/h2&gt;

&lt;p&gt;One way to learn to draw is through the tutorial video.
The following tutorial introduces all about C4 model by the author with a part of PlantUML use-case with C4.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/x2-rSnhpw0g&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The C4 model solved the problem of a compact representation for software architectures without disregarding any aspects of the product.
The model was designed for Agile projects and to keep the team communicates better with team members as well as stakeholders.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;TheC4mod76:online&quot;&gt;&lt;i&gt;The C4 model for visualising software architecture&lt;/i&gt;. https://c4model.com/.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;ArchiOp50:online&quot;&gt;&lt;i&gt;Archi – Open Source ArchiMate Modelling&lt;/i&gt;. https://www.archimatetool.com/.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;brown2013software&quot;&gt;Brown, S. (2013). Software architecture for developers. &lt;i&gt;Coding the Architecture&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="se" /><category term="programming" /><category term="software architecture" /><category term="visualization" /><category term="c4 diagrams" /><category term="diagrams" /><summary type="html">Source: InfoQ Using MS Word and Excel, an engineer can describe the system in language and visuals. Such conventional methodologies can be sufficient for small architecture with few components. When the software system scales and changes frequently, maintaining records of the architecture by documents can be tedious. Hence, the lack of interaction in conventional document methods may present a stiff learning curve for a new member to the project team. To cope with these challenges, the C4 diagram model [1, 2, 3] was created to give interactive views of the software architectures. Systems are modeled at four different levels: system context, containers, components, and code. These levels are represented by diagrams. Intuitively, we can see the C4 diagrams as large visualization systems in which engineers can zoom in and out to see the details and the big picture.</summary></entry><entry><title type="html">The Last Pillar: The Liskov Substitution Principle</title><link href="https://www.caineng.in/pm/se/2021/08/29/liskov-substisution-principle.html" rel="alternate" type="text/html" title="The Last Pillar: The Liskov Substitution Principle" /><published>2021-08-29T00:00:00+07:00</published><updated>2021-08-29T00:00:00+07:00</updated><id>https://www.caineng.in/pm/se/2021/08/29/liskov-substisution-principle</id><content type="html" xml:base="https://www.caineng.in/pm/se/2021/08/29/liskov-substisution-principle.html">&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Argentina_substitute_bench_%E2%80%93_Portugal_vs._Argentina%2C_9th_February_2011_%281%29.jpg/1920px-Argentina_substitute_bench_%E2%80%93_Portugal_vs._Argentina%2C_9th_February_2011_%281%29.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Source: &lt;a href=&quot;https://en.wikipedia.org/wiki/Substitute_(association_football)&quot;&gt;Wikipedia&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In 1988, Barbara Liskov [6] wrote about the substitutions of software modules:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What is wanted here is something like the following substitution property: If for each object $o_1$ of type $S$ there is an object $o_2$ of type $T$ such that for all programs $P$ defined in terms of $T$, the behavior of $P$ is unchanged when $o_1$ is substituted for $o_2$ then $S$ is a subtype of $T$.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;Liskov Substitution Principle (LSP, [2, 6])&lt;/strong&gt; states that a software module should be built up from interchangeable parts.
Any violations of the principle lead to confusion and horrible mistakes in production.
In object-oriented designs, if different classes and modules behave differently, then one should not be the abstraction of the others.
The principle is helpful for designs of inheritance and REST API.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;liskov-substitution-principle&quot;&gt;Liskov Substitution Principle&lt;/h1&gt;
&lt;p&gt;The following diagram shows a design that conforms LSP.
The interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt; has two implementations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PersonalLicense&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BusinessLicense&lt;/code&gt;.
Although &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BusinessLicense&lt;/code&gt; has a custom property named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;users&lt;/code&gt;, both implementations do not have custom behaviors compared to behaviors of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt; (which has only one method: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculateFee()&lt;/code&gt;).
Therefore, these implementations are interchangeable as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.
They are subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lsp1.svg&quot; alt=&quot;Billing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Billing&lt;/code&gt; class does not depend on the concrete implementations of the interface &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;, and this is one of the benefits of LSP.
Both are substitutable to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;License&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;examples-of-violations&quot;&gt;Examples of violations&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Violations are bad! We should learn to avoid these negativities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous section, we learn a &lt;strong&gt;positive&lt;/strong&gt; example of the Liskov Substitution Principle (LSP).
In this section, we will learn &lt;strong&gt;negative&lt;/strong&gt; examples where LSP is violated.&lt;/p&gt;

&lt;h2 id=&quot;ducks-and-toys&quot;&gt;Ducks and Toys&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lsp2.svg&quot; style=&quot;float: left; width: 60%; margin: 15px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following design violates the LSP.
In this design, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt; can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quack()&lt;/code&gt; like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt;.
However, when the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remainBatteryAmount=0&lt;/code&gt;, it can raise an exception!
Neither the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt; can raise such an exception, so the behaviors are different.
The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt; is not a subtype of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So consider the following code:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just quacking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPECT_NO_THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code will work fine with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Duck&lt;/code&gt; but let us substitute it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DuckToy&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DuckToy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;battery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;battery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// throw an exception&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Just quacking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;private:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remainBatteryAmount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DuckToy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remainBatteryAmount = 0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;EXPECT_NO_THROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;duckToy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this will throw an exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In class design, conforming LSP is more than drawing a diagram but also enforces the code: programmers must write a clean inheritance.&lt;/p&gt;

&lt;h2 id=&quot;an-api-design&quot;&gt;An API design&lt;/h2&gt;

&lt;p&gt;Assume that we have a taxi driver management system.
Each driver identity has a dispatch URI in the driver database.
For example, we have a driver Bob, and the dispatch URI is:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aificorp.in/driver/Bob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When there is a new request from a customer assigned to Bob, the system dispatches all information needed for a pickup like&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aificorp.in/driver/Bob/
  pickupAddress/%s/pickupTime/%s/destination/%s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aificorp.in&lt;/code&gt; is the domain of a partner company, and it is different among partners.
Assume that developers in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aificorp.in&lt;/code&gt; are doing their job good.
The problem arises when a new developer joins the team in a partner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.com&lt;/code&gt;, and the new member dispatches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;destination&lt;/code&gt; by the abbreviation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dest&lt;/code&gt;!&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.com/driver/Alice/
  pickupAddress/%s/pickupTime/%s/dest/%s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;What is the problem?&lt;/strong&gt;
That is, now we need to add an exception in our system for this partner only:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partnerDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rfind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;acme.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;// handle the exception&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now our dispatches table is as follows.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;URI&lt;/th&gt;
      &lt;th&gt;Dispatch format&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Acme.com&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pickupAddress/%s/pickupTime/%s/dest/%s&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pickupAddress/%s/pickupTime/%s/destination/%s&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And so, our architect has had to add a significant and complex mechanism to deal with the fact that the interfaces of the restful services are not all substitutable.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;HumbleOb26:online&quot;&gt;&lt;i&gt;Humble Object at XUnitPatterns.com&lt;/i&gt;. http://xunitpatterns.com/Humble%20Object.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;cleanarch&quot;&gt;Martin, R. C. (2017). &lt;i&gt;Clean Architecture - A Craftman’s Guide to Software Structure and Design&lt;/i&gt;. Prentice Hall.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2009clean&quot;&gt;Martin, R. C. (2009). &lt;i&gt;Clean code: a handbook of agile software craftsmanship&lt;/i&gt;. Pearson Education.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2007professionalism&quot;&gt;Martin, R. C. (2007). Professionalism and test-driven development. &lt;i&gt;IEEE Software&lt;/i&gt;, &lt;i&gt;24&lt;/i&gt;(3), 32–36.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;binder2000testing&quot;&gt;Binder, R. (2000). &lt;i&gt;Testing object-oriented systems: models, patterns, and tools&lt;/i&gt;. Addison-Wesley Professional.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;abstraction1988hierarchy&quot;&gt;Liskov, B. (1988). Data Abstraction and Hierarchy. &lt;i&gt;SIGPLAN Notices&lt;/i&gt;, &lt;i&gt;23&lt;/i&gt;(5), 17–34.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="se" /><category term="programming" /><category term="design principles" /><category term="substitution principle" /><category term="liskov substitution principle" /><summary type="html">Source: Wikipedia In 1988, Barbara Liskov [6] wrote about the substitutions of software modules: What is wanted here is something like the following substitution property: If for each object $o_1$ of type $S$ there is an object $o_2$ of type $T$ such that for all programs $P$ defined in terms of $T$, the behavior of $P$ is unchanged when $o_1$ is substituted for $o_2$ then $S$ is a subtype of $T$. The Liskov Substitution Principle (LSP, [2, 6]) states that a software module should be built up from interchangeable parts. Any violations of the principle lead to confusion and horrible mistakes in production. In object-oriented designs, if different classes and modules behave differently, then one should not be the abstraction of the others. The principle is helpful for designs of inheritance and REST API.</summary></entry><entry><title type="html">Aggregation and Segregation</title><link href="https://www.caineng.in/pm/se/2021/08/28/aggregation-segregation.html" rel="alternate" type="text/html" title="Aggregation and Segregation" /><published>2021-08-28T00:00:00+07:00</published><updated>2021-08-28T00:00:00+07:00</updated><id>https://www.caineng.in/pm/se/2021/08/28/aggregation-segregation</id><content type="html" xml:base="https://www.caineng.in/pm/se/2021/08/28/aggregation-segregation.html">&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*YzBpqn1XSHOz9UpKc6HcJg.png&quot; alt=&quot;ISP&quot; /&gt;
&lt;em&gt;Source: Medium&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interface Segregation Principle (ISP)&lt;/strong&gt; is one of the five pillars in SOLID design principles.
The main spirit of ISP is that user interfaces shouldn’t rely on features or operations they don’t need.
Therefore, instead of designing an aggregated interface that contains functions for various member classes, we should segregate the functions into several sub-interfaces, for which each type of user only needs to a specific feature.
When other features change, the current feature is not affected, and the user service will not be interrupted.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/isp1.svg&quot; style=&quot;float: left; margin: 10px; width: 50%;&quot; /&gt;
Let’s consider the following interface.
There is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class which has three operations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; to calculate money, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt; for walking, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt; for riding.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police&lt;/code&gt; class only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; operation to calculate the money they collected from criminals.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pedestrian&lt;/code&gt; class only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt;, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rider&lt;/code&gt; only needs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt;.
However, in this &lt;strong&gt;aggregated design &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt;&lt;/strong&gt;, all actors have access to functions they don’t need.
The implementation of this aggregation can be found below:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _AGGREGATION_H_
#define _AGGREGATION_H_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Calculating ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Walking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Riding ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the main function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;aggregation.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can find the result:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buld &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Debug/aggregation.exe
Calculating ...
Walking ...
Riding ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;segregation&quot;&gt;Segregation&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/isp2.svg&quot; style=&quot;float: right; margin: 10px; width: 50%;&quot; /&gt;
The &lt;strong&gt;Interface Segregation Principle (ISP, [2])&lt;/strong&gt; states that the aggregated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class in the previous section was not good enough:
whenever changes happen in one function, it will force the whole to be re-compiled, and then affect all other functions and actors.
The ISP guides us that the following design will be better.
A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police&lt;/code&gt; interface (actually, in C++ we don’t have interfaces, but we can use abstract class instead), or a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PoliceInst&lt;/code&gt; class can have only one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function and doesn’t rely on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;walk&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ride&lt;/code&gt;.
The aggregation can be persisted by making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HumanInst&lt;/code&gt; class inherited from all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Police, Pedestrian&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rider&lt;/code&gt;.
Let’s see the implementation:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef _SEGREGRATION_HPP_
#define _SEGREGRATION_HPP_
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Police&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Calculating ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pedestrian&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Walking ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Riding ...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the main function:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;segregation.hpp&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PoliceInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;police&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PedestrianInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pedestrian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RiderInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Human also can calculate, walk and ride:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HumanInst&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calculate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we see the result again:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;buld &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cmake ..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./Debug/segregation.exe
Calculating ...
Walking ...
Riding ...
Human also can calculate, walk and ride:
Calculating ...
Walking ...
Riding ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This design is perfect as it keeps the aggregation and resolves the segregation issues at the same time.&lt;/p&gt;

&lt;p&gt;A sample &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cmake highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cmake_minimum_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;VERSION 3.0&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;isp CXX&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;include_directories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;aggregation main.cpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;segregation main_seg.cpp&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;HumbleOb26:online&quot;&gt;&lt;i&gt;Humble Object at XUnitPatterns.com&lt;/i&gt;. http://xunitpatterns.com/Humble%20Object.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;cleanarch&quot;&gt;Martin, R. C. (2017). &lt;i&gt;Clean Architecture - A Craftman’s Guide to Software Structure and Design&lt;/i&gt;. Prentice Hall.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2009clean&quot;&gt;Martin, R. C. (2009). &lt;i&gt;Clean code: a handbook of agile software craftsmanship&lt;/i&gt;. Pearson Education.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2007professionalism&quot;&gt;Martin, R. C. (2007). Professionalism and test-driven development. &lt;i&gt;IEEE Software&lt;/i&gt;, &lt;i&gt;24&lt;/i&gt;(3), 32–36.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;binder2000testing&quot;&gt;Binder, R. (2000). &lt;i&gt;Testing object-oriented systems: models, patterns, and tools&lt;/i&gt;. Addison-Wesley Professional.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;abstraction1988hierarchy&quot;&gt;Liskov, B. (1988). Data Abstraction and Hierarchy. &lt;i&gt;SIGPLAN Notices&lt;/i&gt;, &lt;i&gt;23&lt;/i&gt;(5), 17–34.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="pm" /><category term="se" /><category term="programming" /><category term="design principles" /><category term="interface segregation principle" /><category term="aggregation" /><category term="segregation" /><summary type="html">Source: Medium Interface Segregation Principle (ISP) is one of the five pillars in SOLID design principles. The main spirit of ISP is that user interfaces shouldn’t rely on features or operations they don’t need. Therefore, instead of designing an aggregated interface that contains functions for various member classes, we should segregate the functions into several sub-interfaces, for which each type of user only needs to a specific feature. When other features change, the current feature is not affected, and the user service will not be interrupted.</summary></entry><entry><title type="html">Phân tích xu hướng: Tại sao các hiện tượng thành công gần đây lại ít có phiên bản web hơn ứng dụng mobile?</title><link href="https://www.caineng.in/non-english/2021/08/26/mobile-and-web.html" rel="alternate" type="text/html" title="Phân tích xu hướng: Tại sao các hiện tượng thành công gần đây lại ít có phiên bản web hơn ứng dụng mobile?" /><published>2021-08-26T00:00:00+07:00</published><updated>2021-08-26T00:00:00+07:00</updated><id>https://www.caineng.in/non-english/2021/08/26/mobile-and-web</id><content type="html" xml:base="https://www.caineng.in/non-english/2021/08/26/mobile-and-web.html">&lt;p&gt;&lt;img src=&quot;https://jp.techcrunch.com/wp-content/uploads/2020/05/clubhouse-voice-chat-social-network.jpg?w=738&quot; alt=&quot;Clubhouse&quot; /&gt;
&lt;em&gt;Source: TechCrunch Japan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Cũng phải 9-10 năm trước đây, khi mới bắt đầu làm các nền tảng với mong muốn xây dựng “một phút huy hoàng rồi vụt tắt”, tôi hay thấy các nhà phát triển lựa chọn cùng lúc phát triển 3 phiên bản: Web, mobile (Android/iOS) và một bản có thể desktop.
Đó là những năm 2012 và việc đó chủ yếu để tăng độ phủ của dịch vụ.
Nhưng năm nay là năm 2021, và chúng ta không thể hướng dẫn các em trẻ bằng bộ não của những “ông già” mà thời huy hoàng từ những năm 2012.
Năm 2021, chúng ta cũng cần cập nhật và nhìn lại những ứng dụng thành công trong 2 năm qua của kỷ nguyên COVID, tôi chợt nhận ra:
ứng dụng ClubHouse thành công gọi vốn vòng C tương đương 100 triệu đô lẻ nhưng không hề cung cấp giao diện web, chỉ toàn ứng dụng mobile.
Ứng dụng na ná thế của Việt Nam là onMic cũng không thèm chơi với web luôn!
Ồ, chúng ta đã già rồi với giới trẻ có lẽ đã không còn mặn mà với việc xây một phiên bản cho desktop browser nữa.
&lt;strong&gt;Năm 2021 phải là thời đại của mobile&lt;/strong&gt;.
Chúng ta có lẽ đã sai, và cũng nên nhìn nhận lại khả năng của mobile apps (native chứ không phải nhúng mấy cái Javascript vớ vẩn)!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;responsive-web-apps-và-mobile-apps&quot;&gt;Responsive web apps và mobile apps&lt;/h1&gt;

&lt;h2 id=&quot;tổng-quan&quot;&gt;Tổng quan&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn0.tnwcdn.com/wp-content/blogs.dir/1/files/2014/11/Smartphone_subs_ericsson.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;By 2020, 90% dân số thế giới trên 6 tuổi (6,1 tỷ người) có sử dụng điện thoại di động. Nguồn: &lt;a href=&quot;http://thenextweb.com/insider/2014/11/18/2020-90-worlds-population-aged-6-will-mobile-phone-report/&quot;&gt;TheNextWeb&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Chúng ta luôn tự hỏi tại sao ngày nay lại phải học làm những thứ có thể hiển thị và hoạt động được trên mobile?
Câu trả lời là vì chỉ trong vài năm, số lượng thuê bao di động trên thế giới đã phủ khắp đến 90% dân số thế giới, tính tới 2020.
Điện thoại di động không phải quá khứ hay tương lai mà là hiện tại ngay trước mắt.
Giải pháp để khiến dịch vụ của bạn phủ rộng tới tất cả người dùng di động hiện tại chỉ có hai nhánh chính: &lt;strong&gt;responsive web apps và mobile apps&lt;/strong&gt;.
Những năm 2012, chúng ta, những “ông già” phải phát triển song song 3 phiên bản vì lúc đó tỷ lệ mobile chỉ tầm 1.3 tỷ/6 tỷ dân, tức là khoảng 23% hơn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive web apps&lt;/strong&gt; thì chủ yếu là HTML5/CSS3 có những tinh chỉnh để vừa vặn vào màn hình mobile.
Lợi thế cũng khả rõ ràng:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Một phiên bản cho tất cả người dùng&lt;/strong&gt;. cách làm web apps thì chỉ cần browser và quan trọng nhất là kết nối Internet.
Ngắt mạng là … giải tán!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vận hành và bảo trì đơn giản hơn vì trang web dễ nâng cấp, bảo trì và fix lỗi&lt;/strong&gt;. Người dùng thậm chí còn không nhận được thông báo khi xảy ra nâng cấp.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Phiên bản web rẻ hơn&lt;/strong&gt;. SEO cũng dễ dàng hơn, và bảo trì cũng sẽ rẻ hơn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mobile apps&lt;/strong&gt; là những ứng dụng có thể &lt;strong&gt;cài đặt&lt;/strong&gt; lên điện thoại di động và máy tính bảng.
Ứng dụng di động ưu thế nổi trội sẽ là &lt;strong&gt;trải nghiệm người dùng tốt hơn&lt;/strong&gt;.
Nếu như trang web nhắm tới tìm kiếm người dùng mới (vì vậy không tạo barrier trong cài đặt nâng cấp), thì ứng dụng mobile tập trung vào &lt;strong&gt;người dùng trung thành&lt;/strong&gt;.
Thường không nên nghĩ ứng dụng mobile chỉ là bản clone của web app, nó sẽ là một suy nghĩ sai lầm!
Và cuối cùng cái quan trọng là &lt;strong&gt;push notification&lt;/strong&gt;, đó là ưu thế không thể từ chối của mobile apps.
Ưu thế của mobile apps tập trung vào:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tập trung vào tính năng đặc biệt của nền tảng mobile&lt;/strong&gt;. Ví dụ người dùng Instagram có thể xem ảnh trên web vô tư nhưng để upload họ phải dùng mobile apps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile apps hoạt động trực tiếp với nền tảng, đòi hỏi cài đặt và nhận được những hỗ trợ tốt hơn về security cũng như tình năng nền tảng OS&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mobile apps có thể hoạt động offline&lt;/strong&gt;. Còn nói thực, tôi cũng làm nhiều với đủ kiểu web apps, web socket, mà nói chung cứ ngắt net là phiền! Không có Internet, đám webapps chỉ để nhìn.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tối ưu hóa trải nghiệm người dùng&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cung cấp các component native của mobile phone như network, voice, …&lt;/strong&gt;. Lập trình web hiện đại với Vue.JS hay reactJS có khá nhiều web component, nhưng nhìn chung cũng có giới hạn và hoạt động cũng không tốt ví dụ khi ngắt net!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Tạo tạm một bảng so sánh tính năng giữ hai sự lựa chọn để bạn đọc tham khảo.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Perspective&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Responsive website&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Mobile app&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Compatibility&lt;/td&gt;
      &lt;td&gt;Mobile version of the site is equally displayed in all browsers, despite the device model.&lt;/td&gt;
      &lt;td&gt;Requires development of several applications for various platforms.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Audience&lt;/td&gt;
      &lt;td&gt;All devices that have access to the Internet.&lt;/td&gt;
      &lt;td&gt;Only smartphones and tablets.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cost of entering the market&lt;/td&gt;
      &lt;td&gt;Payments for domain and hosting.&lt;/td&gt;
      &lt;td&gt;Developer licenses in the app stores.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ease of use&lt;/td&gt;
      &lt;td&gt;Doesn’t require download and installation.&lt;/td&gt;
      &lt;td&gt;Requires downloading and installation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Working offline&lt;/td&gt;
      &lt;td&gt;Not all devices support.&lt;/td&gt;
      &lt;td&gt;Possible.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Support, updates and bug fixing&lt;/td&gt;
      &lt;td&gt;Easy to update, maintain and fix bugs.&lt;/td&gt;
      &lt;td&gt;Difficult to update and monitor the application after it’s downloaded. Bugs will be fixed only in the next version.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Convenience of regular using&lt;/td&gt;
      &lt;td&gt;Average.&lt;/td&gt;
      &lt;td&gt;Good for regular using.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Personalization&lt;/td&gt;
      &lt;td&gt;Average. Mobile site is more focused on the service.&lt;/td&gt;
      &lt;td&gt;Good. App is more aimed at the individual user.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;giới-thiệu-ứng-dụng-voice-chat-room-clubhouse&quot;&gt;Giới thiệu ứng dụng voice chat room ClubHouse&lt;/h1&gt;

&lt;p&gt;Thế giới đang chuyển dần từ service-centric sang user-centric, từ web-based sang mobile-based.
Hiện tượng ClubHouse nổi lên từ thàng 4/2020, tức là mới hơn 1 năm.
Chúng ta sẽ nhìn nhận lại giá trị của ClubHouse trong ngành dọc: tức là các mạng xã hội âm thanh.&lt;/p&gt;

&lt;h2 id=&quot;mạng-xã-hội-âm-thanh&quot;&gt;Mạng xã hội âm thanh&lt;/h2&gt;

&lt;p&gt;Mạng xã hội âm thanh là mạng xã hội dựa trên việc chia sẻ âm thanh chứ không phải hình ảnh hay video.
Các mạng xã hội chia sẻ âm nhạc như Zing MP3, hay Spotify đã tồn tại từ lâu và với hình thức &lt;strong&gt;chia sẻ file&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Một đặc điểm của ClubHouse chính là việc chia sẻ thông qua nói chuyện tức là âm thanh cuộc nói chuyện được chia sẻ.
Người tham gia không nhìn thấy mặt nhau là đặc điểm khiến cho người dùng có thể tập trung vào nội dung nói chuyện hơn là nhìn sắc mặt nhau.&lt;/p&gt;

&lt;h2 id=&quot;hiện-tượng-clubhouse&quot;&gt;Hiện tượng ClubHouse&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tại sao ClubHouse lại thành hiện tượng như vậy?&lt;/strong&gt;
Bạn nên nhớ khi đạt giá trị 100 triệu đô, Facebook đã sở hữu 5,5 triệu người dùng vào năm 2005.
Nhưng cùng mức giá ấy, ClubHouse chỉ có vỏn vẹn &lt;strong&gt;5000 người dùng vào năm 2020&lt;/strong&gt;.
Thời cổ đại nếu một đội quân 5000 người dù dũng mãnh thế nào mà được xếp ngang hàng với đội quân 5,5 triệu người thì đó cũng là chuyện khá hiếm.
Twitter khi đạt giá trị 100 triệu đô cũng có 1,2 triệu người dùng, và Instagram cũng có 1,7 triệu MAU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/fomo.png&quot; alt=&quot;FOMO&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vậy cái gì làm nên giá trị của ClubHouse?&lt;/strong&gt;
ClubHouse đã thiết kế UX tức là trải nghiệm người dùng theo nguyên lý FOMO (Fear of missing out, tức là cảm giác bị lãng quên), khiến cho engagement của người dùng được nâng cao.
Thiết kế này đòi hỏi 3 tính năng nhất quyết bị loại bỏ (không được implement) là: chức năng mời, chức năng lưu trữ archive, và chức năng nhận xét comment.
Việc thiếu 3 chức năng, cùng với việc thiết kế room chat để chỉ có thể nghe người mình muốn nói chuyện vào lúc nửa đêm khiến người dùng càng gắn bó với app.
Bởi vì họ luôn ở trạng thái cảm thấy bị miss mất cái gì đó nên sẽ không dám đóng app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vậy tiềm năng của ClubHouse có thực sự đáng giá?&lt;/strong&gt;
Cái này có lẽ phải để thời gian trả lời.
Cá nhân tôi khi dùng thử phát hiện ra một điểm tuyệt vời là thiết kế UX rất đơn giả và ưu việt.
Họ không thiết kế kiểu ôm đồm mọi tính năng, mà tất cả đều tuân theo một thiết kế UX có trọng tâm.
FOMO là một ví dụ về việc: không phải cứ implement hết mọi tính năng thì sẽ tốt mà đôi khi bỏ đi không thèm implement một số tính năng lại đem lại trải nghiệm tuyệt vời.
Thế nên cũng không cần làm hết đâu!
Ví dụ họ cũng không cần web vì đúng là với chiến thuật của họ thì mấy cái Vue với React cũng chả để làm gì cả (90% dân số thế giới đã có mobile trên tay và native app thì còn lo gì ngắt mạng) :yum:&lt;/p&gt;

&lt;p&gt;Tại thời điểm ClubHouse gọi được 100 triệu đô vốn đầu tư thì cũng có nhiều ý kiến phản hồi là tại sao lại giá cao thể trong khi chỉ có 5000 users?
Hãy để thời gian minh chứng cho kết cục của startup này.
Tuy nhiên, cái chúng ta học được ở đây đó là &lt;strong&gt;tối ưu trải nghiệm người dùng trên mobile đang là xu hướng&lt;/strong&gt;, và web sẽ không làm được việc đó.&lt;/p&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="business" /><category term="mobile apps" /><category term="web apps" /><category term="single page app" /><summary type="html">Source: TechCrunch Japan Cũng phải 9-10 năm trước đây, khi mới bắt đầu làm các nền tảng với mong muốn xây dựng “một phút huy hoàng rồi vụt tắt”, tôi hay thấy các nhà phát triển lựa chọn cùng lúc phát triển 3 phiên bản: Web, mobile (Android/iOS) và một bản có thể desktop. Đó là những năm 2012 và việc đó chủ yếu để tăng độ phủ của dịch vụ. Nhưng năm nay là năm 2021, và chúng ta không thể hướng dẫn các em trẻ bằng bộ não của những “ông già” mà thời huy hoàng từ những năm 2012. Năm 2021, chúng ta cũng cần cập nhật và nhìn lại những ứng dụng thành công trong 2 năm qua của kỷ nguyên COVID, tôi chợt nhận ra: ứng dụng ClubHouse thành công gọi vốn vòng C tương đương 100 triệu đô lẻ nhưng không hề cung cấp giao diện web, chỉ toàn ứng dụng mobile. Ứng dụng na ná thế của Việt Nam là onMic cũng không thèm chơi với web luôn! Ồ, chúng ta đã già rồi với giới trẻ có lẽ đã không còn mặn mà với việc xây một phiên bản cho desktop browser nữa. Năm 2021 phải là thời đại của mobile. Chúng ta có lẽ đã sai, và cũng nên nhìn nhận lại khả năng của mobile apps (native chứ không phải nhúng mấy cái Javascript vớ vẩn)!</summary></entry><entry><title type="html">Nguyên lý đóng mở: Để thay đổi hãy thêm mới chứ đừng sửa cái cũ</title><link href="https://www.caineng.in/non-english/se/2021/08/25/open-close-principle.html" rel="alternate" type="text/html" title="Nguyên lý đóng mở: Để thay đổi hãy thêm mới chứ đừng sửa cái cũ" /><published>2021-08-25T00:00:00+07:00</published><updated>2021-08-25T00:00:00+07:00</updated><id>https://www.caineng.in/non-english/se/2021/08/25/open-close-principle</id><content type="html" xml:base="https://www.caineng.in/non-english/se/2021/08/25/open-close-principle.html">&lt;p&gt;&lt;img src=&quot;/assets/img/OCP.PNG&quot; alt=&quot;ocp principle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Một ngày đẹp trời, khách hàng gửi yêu cầu thay đổi phần mềm để chữa lỗi hiển thị trên chức năng báo cáo tài chính.
Một lập trình viên lão luyện đều sẽ hiểu ngay nguyên lý căn bản mà họ phải động đến sẽ là &lt;strong&gt;nguyên lý đóng mở (Open/Closed Principle hay OCP, [2])&lt;/strong&gt;.
Dù là chữa lỗi thì sửa một đoạn code có sẵn trong hệ thống cũng là &lt;strong&gt;hành vi sai trái&lt;/strong&gt;  so với bộ nguyên tắc SOLID của thiết kế phần mềm.
Nguyên lý đóng mở (OCP) trong thiết kế phần mềm nêu rõ: “&lt;em&gt;Mọi thiết kế phần mềm nên mở với thay đổi, nhưng đóng với sửa cái vốn có&lt;/em&gt;”.
Một kỹ sư phần mềm lão luyện sẽ hiểu để &lt;strong&gt;chữa lỗi&lt;/strong&gt; thì hành vi sửa cái đang code đang có do người trước viết ra (dù người đó là chính mình) đều là hành vi thiếu suy nghĩ: đúng hơn là phải thêm code mới để sửa lại tính năng bị lỗi.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;nguyên-lý-đóng-mở-trong-thiết-kế-phần-mềm&quot;&gt;Nguyên lý đóng mở trong thiết kế phần mềm&lt;/h1&gt;

&lt;h2 id=&quot;nguyên-lý&quot;&gt;Nguyên lý&lt;/h2&gt;

&lt;p&gt;Bertrand Meyer giới thiệu nguyên lý OCP vào năm 1988 với một dạng đơn giản như sau:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A software artifact should be open for extension but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Một module phần mềm nên mở với nâng cấp mở rộng, nhưng đóng với chỉnh sửa (thô bạo).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nguyên lý này phát biểu bởi hai phần: Mở với nâng cấp mở rộng và đóng với chỉnh sửa thô bạo.
Chúng ta sẽ bắt đầu từ một ví dụ trước.&lt;/p&gt;

&lt;h2 id=&quot;ví-dụ&quot;&gt;Ví dụ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/financial_report_ocp.PNG&quot; alt=&quot;OCP example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ví dụ trên đây thể hiện thiết kế một module phần mềm đọc dữ liệu từ database, phân tích tính toán và hiển thị trên web cũng như in report.
Bạn có thể thấy hai thiết kế quan trọng trong basic design ở đây là thiết kế màn (画面設計) và thiết kế bản xuất (帳票設計). 
Tuy nhiên, scope bài viết sẽ không đề cập sâu vào những vấn đề không cần thiết đó vội.
&lt;strong&gt;Thiết kế này cần đảm bảo tuân thủ OCP: cần phân chia class và component sao cho phần mềm dễ dàng nâng cấp mở rộng (thêm tính năng mới) mà không cần những chỉnh sửa thô bạo vào hệ thống đã có&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Trong hệ thống trên đây, mũi tên mở là chỉ quan hệ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using&lt;/code&gt; (ví dụ Financial Report Controller thì sử dụng interface Financial Report Presenter).
Mũi tên đóng chỉ quan hệ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implement&lt;/code&gt; hoặc &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inheritance&lt;/code&gt; (thừa kế).&lt;/p&gt;

&lt;p&gt;Thiết kế component đảm bảo những component nào dễ thay đổi thì sẽ không phụ thuộc vào những component khó thay đổi hơn.
Ví dụ Interactor là bộ phận chứa business rules nên cần tránh để các thay đổi của Controller hay Database làm ảnh hưởng tới Interactor.
Vì vậy, Interactor là thành phần tự do nhất trong hệ thống.
Những thay đổi trên Controller hay Presenters sẽ không làm Interactor thay đổi.
Nhưng thay đổi trên Interactor sẽ khiến tất cả thay đổi theo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thiết kế này mở với nâng cấp mở rộng&lt;/strong&gt;: bạn có thể thêm các classes mới cho Presenters hay Controller tùy ý.
Bạn thậm chí có thể tạo một Interactor mới và bỏ vào thay thế Interactor cũ.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thiết kế này đóng với chỉnh sửa thô bạo&lt;/strong&gt;: thô bạo nhất có lẽ là chỉnh sửa Interactor vì nó khiến tất cả thay đổi theo.
Mà đôi khi còn bất khả thi theo nghĩa: nếu đã tốn công thay đổi hết thì làm luôn cả hệ thống mới có rẻ hơn không?
Việc này xảy ra khi bạn muốn thay đổi business rule (không hẳn mới mà chỉ là sửa lại cái sai).
Ví dụ là muốn thay đổi request/response thôi chẳng hạn.&lt;/p&gt;

&lt;p&gt;Nguyên lý này được áp dụng trong quá trình thiết kế phần mềm, tức là sẽ phải thiết kế một phần mềm mà “rất khó để chỉnh sửa” đặc biệt chỉnh sửa một cách thô bạo thì gần như không thể.
Nhưng khi cần thêm mới thì rất dễ dàng và tiện lợi.
Đây kim chỉ nam cho thiết kế phần mềm mà mọi sinh viên học nghiêm chỉnh bộ môn này sẽ hiểu.&lt;/p&gt;

&lt;h2 id=&quot;phân-tích&quot;&gt;Phân tích&lt;/h2&gt;

&lt;h3 id=&quot;các-dấu-hiệu-của-một-phần-mềm-đang-theo-ocp&quot;&gt;Các dấu hiệu của một phần mềm đang theo OCP&lt;/h3&gt;

&lt;p&gt;Phần mềm theo OCP thường có thiết kế lớp lang quỷ củ kỷ luật.
Chiến lược chiến thuật phòng bị hầu như không có khuyết điểm, công khó mà thủ dễ.&lt;/p&gt;

&lt;p&gt;Đơn giản nhất là khi bạn thấy muốn thay đổi 1 hàm sẽ ảnh hưởng tới rất nhiều thành phần khác trong hệ thống, tức là không thể chỉnh sửa đơn giản mà phải thực hiện can thiệp “thô bạo”, thì đó có khả năng là một phần mềm theo OCP, và đó là một phần mềm tốt.&lt;/p&gt;

&lt;h3 id=&quot;các-triệu-chứng-của-hành-vi-thô-bạo&quot;&gt;Các triệu chứng của hành vi thô bạo&lt;/h3&gt;

&lt;p&gt;Và khi phần mềm được thiết kế tốt, thì việc chỉnh sửa thô bạo chính là phần sai của lập trình viên.
Vậy dấu hiệu hành vi sai trái là gì?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sa lầy trong cuộc chiến “chỉnh sửa”&lt;/strong&gt;: Bạn nhận lệnh chỉnh sửa và tổ chức đóng quân thực hiện nhiệm vụ mất vài ngày thậm chỉ vài tuần mà không sửa xong. 
Không cần biết sửa nhiều hay ít, nhưng sa lầy lâu như vậy vừa tốn tài lực bên trong lại ảnh hưởng tới bên ngoài.
Rõ ràng cuộc chiến đang sa lầy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Nội dung chỉnh sửa lớn&lt;/strong&gt;: Bạn kiểm tra diff trên Git và thấy hàng ngàn dòng code bị thay đổi, hàng trăm hàm bị thay đổi nội dung, …
Vâng, bạn đang thực hiện một cuộc can thiệp vũ trang “thô bạo”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sửa nhiều mà không hết lỗi, sửa chỗ này lại phát sinh lỗi ở chỗ khác&lt;/strong&gt;: Bạn tổ chức “bình định” chỉnh sửa hàm này xong, nhưng tại một component khác trong khu vực chiếm đóng lại xuất hiện lỗi mới.
Bạn đang sa lầy trong một cuộc “chỉnh sửa thô bạo” mà chỉ tốn tài lực của phía bạn thôi.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;đừng-chỉnh-sửa-thô-bạo-hệ-thống-có-sẵn&quot;&gt;Đừng chỉnh sửa thô bạo hệ thống có sẵn&lt;/h3&gt;

&lt;p&gt;Không chỉ lúc thiết kế mà ngay cả lúc thực hiện sửa lỗi, nếu các bạn gặp 1 phần mềm mà bạn cảm thấy vô cùng khó để chỉnh sửa, và bạn càng “&lt;strong&gt;cố đấm ăn xôi&lt;/strong&gt;”, càng tìm cách “mang kìm mang búa vào” để thay đổi cưỡng ép nó một cách thô bạo.
Thì hành động này của bạn là thiếu suy nghĩ!
Bởi vì như vậy kết quả sẽ là tạo ra một thay đổi mang tính “can thiệp vũ trang thô bạo”, và như vậy nhất định sẽ có cái gì đó không đúng: một là thiết kế phần mềm tuân thủ OCP thì bạn chính là kẻ thô bạo vi phạm OCP, hai là thiết kế phần mềm kém.
Trường hợp 1 thì bạn sai vì bạn “thô bạo”.
Trường hợp 2 thì bạn cũng sai vì nó đã kém bạn còn đề xuất sửa làm gì cho rách việc ra, và trách nhiệm của bạn còn lớn nữa nếu thêm mới lại “rẻ” hơn chỉnh sửa thô bạo, và thường như thế.&lt;/p&gt;

&lt;p&gt;Tóm lại nguyên lý đóng mở trong thiết kế phần mềm là kim chỉ nam không chỉ trong bước thiết kế ban đầu mà trong mọi bước thiết kế thay đổi về sau và nếu một ai tổ chức chỉnh sửa bằng “can thiệp vũ trang thô bạo”, tức là chỉnh sửa nghiêm trọng, thì người đó chắc chắn sai.
Khi bắt đầu công tác thay đổi một cái gì đó trong một phần mềm được thiết kế ngon nghẻ theo nguyên lý OCP (mà thường là thế), việc đầu tiên là điều tra kỹ để tránh việc thực hiện can thiệp vũ trang thô bạo.&lt;/p&gt;

&lt;h3 id=&quot;hãy-mở-rộng-nâng-cấp-để-thay-đổi-hãy-thêm-mới&quot;&gt;Hãy mở rộng nâng cấp để thay đổi, hãy thêm mới&lt;/h3&gt;

&lt;p&gt;Phần mềm được thiết kế tốt nhất định sẽ theo nguyên lý OCP.
Vì vậy bạn càng tìm cách chỉnh sửa thô bạo, bạn sẽ càng đi vào ngõ cụt trong nhiệm vụ thay đổi.
Lúc này, bạn cần nghĩ tới việc thêm mới bởi vì cửa ngõ duy nhất khiến phần mềm OCP thay đổi theo ý bạn là thay đổi theo hướng mở rộng.&lt;/p&gt;

&lt;p&gt;Ý nghĩa của chiến lược thêm mới chính là &lt;strong&gt;thay vì trực tiếp tổ chức can thiệp thô bạo, thì gián tiếp tác động thông qua việc thêm chức năng mới (tức là đầu tư thêm)&lt;/strong&gt;.
Ví dụ, nếu bạn thấy một Controller có lỗi, thay vì sửa thẳng vào đấy, hãy đề xuất 1 Story mới để thêm 1 controller mới với những tính năng mới và hướng lại các presenters vào controller mới.
Nhưng thiết kế của controller mới nên đảm bảo là đủ các tính năng của controller cũ, và như thế sau này controller cũ sẽ không còn giá trị nữa.
Bạn không phải can thiệp vào controller cũ nữa và sau này khi người ta không cần thì thực hiện quy trình &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deprecation&lt;/code&gt; thôi.
Nhờ thêm mới bạn sẽ không phải dính dáng vào những cuộc “sát phạt” vô đạo đức, vi phạm nguyên tắc của ngành.&lt;/p&gt;

&lt;h1 id=&quot;nguyên-lý-đóng-mở-và-đời-sống&quot;&gt;Nguyên lý đóng mở và đời sống&lt;/h1&gt;

&lt;h2 id=&quot;can-thiệp-thô-bạo-và-đầu-tư-thay-thế&quot;&gt;Can thiệp “thô bạo” và đầu tư thay thế&lt;/h2&gt;

&lt;p&gt;Những cuộc can thiệp vũ trang “thô bạo” xảy ra hàng ngày trên thế giới và đương nhiên khó có thể gọi những người đó là những &lt;strong&gt;kỹ sư phần mềm thực thụ&lt;/strong&gt;.
Những cuộc can thiệp trong thế giới thực luôn hàm chứa một lượng “chỉnh sửa lớn”, mà bạn hiểu “chỉnh sửa lớn” trong thế giới thực là gì: giết hại phụ nữ, trẻ em, người già, đốt phá đánh bom các công sở, tòa nhà, …
Những cuộc can thiệp đó thường kết thúc với sự phản kháng của phe bị can thiệp và sa lầy của bên tổ chức can thiệp, tốn kém tiền thuế của dân chúng.
Khi nhìn vào những sự việc như vậy và suy nghĩ dưới góc nhìn của ngành phần mềm, chúng ta thấy may mắn vì có kim chỉ nam là những nguyên lý để có thể tự tin rằng &lt;strong&gt;những người đó không phải là kỹ sư phần mềm chân chính&lt;/strong&gt;.
Tôi tán thành việc đào tạo kỹ sư phần mềm không chỉ đơn giản những người biết code mà phải thấm nhuần tư tưởng và đạo đức của ngành.
Đơn giản là code một cách thô bạo thì các nhà quân sự, chính trị gia, những nhà hoạt động văn hóa, họ cũng làm.
Một nguyên lý đầu tiên cần phải dạy tôi nghĩ chính là OCP.&lt;/p&gt;

&lt;p&gt;Bên cạnh can thiệp một cách thô bạo, thì thực ra muốn thay đổi một đối tượng có những cách gián tiếp mà nhẹ nhàng khác như tác động bên ngoài và thường là sẽ là đầu tư thêm tính năng mới.
Như đầu tư thêm trường học, tổ chức viện trợ kinh tế, giao lưu văn hóa, …
Cách làm này không “chỉnh sửa” cái gì mà chỉ thêm một cái gì đó và cái có sẵn mang tính hữu nghị.
Cách làm này ít điều tiếng hơn và “cởi mở” hơn.&lt;/p&gt;

&lt;p&gt;Thật thú vị khi thấy các hệ thống trong thế giới thực thường sẽ phản kháng khi có can thiệp vũ trang thô bạo, nhưng lại sẵn sàng bắt tay khi có tác động gián tiếp mang tính mở.&lt;/p&gt;

&lt;h2 id=&quot;hướng-dẫn-sinh-viên&quot;&gt;Hướng dẫn sinh viên&lt;/h2&gt;

&lt;p&gt;Bạn có một nhóm sinh viên cần hướng dẫn và trong đó có sinh viên rất cứng đầu và chậm tiến.
Bạn đứng giữa hai lựa chọn: một là can thiệp một cách thô bạo thông qua kỷ luật và tổ chức; hai là tiếp cận nhẹ nhàng thông qua bạn bè, gia đình và các thủ pháp.&lt;/p&gt;

&lt;p&gt;Bạn cần nhớ dù rằng bản tính con người có thể cứng đầu chậm tiến, nhưng ở mức độ nào đó khi đã vào đại học thì cũng có khả năng tiếp thu nhất định.
Nếu bạn chọn con đường vũ trang thì sẽ vấp phải phản kháng!
Tôi nhớ cách làm khá hay của một thày ngày xưa, đó là tổ chức nói chuyện và tìm cách thông qua bạn bè tổ chức để lôi kéo đối tượng vào các hoạt động.
Nhưng đó mới chỉ là bước 1, bước 2 sẽ là khi đối tượng có sự cởi mở nhất định thì sẽ thực hiện giao việc.
Chính là thêm mới tính năng, thông qua các giao việc đó, nhờ đối tượng làm thêm tính năng mới, nhưng thực chất là thông qua tính năng mới sửa đi cái lỗi của chính đối tượng.
Đối tượng tự mình thêm tính năng mới và nhận thức được cái sai của mình.
Quá trình diễn ra từ từ, nhưng cuối cùng đối tượng hiểu ra và đây mới là cách làm của người làm phần mềm.
&lt;strong&gt;Không được giao việc ngẫu nhiên, hoặc những việc không liên quan tới đối tượng, mà phải là những việc mới hẳn nhưng bản chất là những sai lầm cũ của đối tượng&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bộ-phim-giáo-sư-cờ-bạc-và-nguyên-tắc-thêm-mới-để-thay-đổi-đôi-khi-cách-trả-nợ-duy-nhất-là-tiếp-tục-vay-thêm&quot;&gt;Bộ phim “Giáo sư cờ bạc” và nguyên tắc thêm mới để thay đổi: đôi khi cách trả nợ duy nhất là tiếp tục vay thêm!&lt;/h2&gt;

&lt;p&gt;Tôi còn nhớ trong bộ phim &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Gambler_(2014_film)&quot;&gt;“Giáo sư cờ bạc”&lt;/a&gt; của Mỹ, nhân vật chính nợ một tay anh chị vài trăm ngàn đô, và bị tay anh chị sai đàn em đánh cho một trận tả tơi.
Nhưng sau khi “can thiệp thô bạo” như vậy tên anh chị vẫn không đòi được một xu, thậm chí cuối cùng, khi nhân vật chính đưa ra giải pháp cuối cùng là vay thêm tương đương số tiền đã vay để anh ta tiếp tục “khởi nghiệp”, nhà đầu tư anh chị đã phải thốt lên:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jim, anh định trả nợ cho tôi bằng cách vay thêm sao?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Và cuối cùng nhà đầu tư đã phải chấp nhận đầu tư thêm và hắn đã không thất vọng khi nhận lại toàn bộ số tiền một thời gian sau.
Nhà đầu tư cuối cùng sau khi can thiệp thô bạo không thành công, đã phải chuyển hướng sang cho vay thêm nhưng yêu cầu làm thêm tính năng mới và đạt kết quả.
Tất nhiên, đó là 1 canh bạc, nhưng mọi khởi nghiệp đều phải sống như vậy cho đến khi thành công thực sự mà!&lt;/p&gt;

&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;HumbleOb26:online&quot;&gt;&lt;i&gt;Humble Object at XUnitPatterns.com&lt;/i&gt;. http://xunitpatterns.com/Humble%20Object.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;cleanarch&quot;&gt;Martin, R. C. (2017). &lt;i&gt;Clean Architecture - A Craftman’s Guide to Software Structure and Design&lt;/i&gt;. Prentice Hall.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2009clean&quot;&gt;Martin, R. C. (2009). &lt;i&gt;Clean code: a handbook of agile software craftsmanship&lt;/i&gt;. Pearson Education.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;martin2007professionalism&quot;&gt;Martin, R. C. (2007). Professionalism and test-driven development. &lt;i&gt;IEEE Software&lt;/i&gt;, &lt;i&gt;24&lt;/i&gt;(3), 32–36.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;binder2000testing&quot;&gt;Binder, R. (2000). &lt;i&gt;Testing object-oriented systems: models, patterns, and tools&lt;/i&gt;. Addison-Wesley Professional.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;abstraction1988hierarchy&quot;&gt;Liskov, B. (1988). Data Abstraction and Hierarchy. &lt;i&gt;SIGPLAN Notices&lt;/i&gt;, &lt;i&gt;23&lt;/i&gt;(5), 17–34.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="programming" /><category term="software architecture" /><category term="open-close principle" /><category term="ocp" /><category term="SOLID" /><summary type="html">Một ngày đẹp trời, khách hàng gửi yêu cầu thay đổi phần mềm để chữa lỗi hiển thị trên chức năng báo cáo tài chính. Một lập trình viên lão luyện đều sẽ hiểu ngay nguyên lý căn bản mà họ phải động đến sẽ là nguyên lý đóng mở (Open/Closed Principle hay OCP, [2]). Dù là chữa lỗi thì sửa một đoạn code có sẵn trong hệ thống cũng là hành vi sai trái so với bộ nguyên tắc SOLID của thiết kế phần mềm. Nguyên lý đóng mở (OCP) trong thiết kế phần mềm nêu rõ: “Mọi thiết kế phần mềm nên mở với thay đổi, nhưng đóng với sửa cái vốn có”. Một kỹ sư phần mềm lão luyện sẽ hiểu để chữa lỗi thì hành vi sửa cái đang code đang có do người trước viết ra (dù người đó là chính mình) đều là hành vi thiếu suy nghĩ: đúng hơn là phải thêm code mới để sửa lại tính năng bị lỗi.</summary></entry><entry><title type="html">Đồng bộ và đa dạng, cũng như chi tiết và chung chung</title><link href="https://www.caineng.in/non-english/se/2021/08/22/synchronized-and-diversity-detail-and-abstract.html" rel="alternate" type="text/html" title="Đồng bộ và đa dạng, cũng như chi tiết và chung chung" /><published>2021-08-22T00:00:00+07:00</published><updated>2021-08-22T00:00:00+07:00</updated><id>https://www.caineng.in/non-english/se/2021/08/22/synchronized-and-diversity-detail-and-abstract</id><content type="html" xml:base="https://www.caineng.in/non-english/se/2021/08/22/synchronized-and-diversity-detail-and-abstract.html">&lt;p&gt;&lt;img src=&quot;https://www.baokhanhhoa.vn/dataimages/201911//original/images5384591_rac_thai.jpg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Nguồn: &lt;a href=&quot;https://www.baokhanhhoa.vn/xa-hoi/moitruong-dothi/201911/tai-che-phan-loai-rac-thai-nhua-con-nhieu-kho-khan-8139146/&quot;&gt;Báo Khánh Hòa Điện Tử&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Đồng bộ (tiếng Anh: synchronized)&lt;/strong&gt; thể hiện sự đồng thuận, thống nhất về trạng thái giữa một hay nhiều thành phần của hệ thống.
Trong khi sự &lt;strong&gt;đa dạng (tiếng Anh: diversity)&lt;/strong&gt; thể hiện sự phong phú, đa hình thái, trạng thái cùng tồn tại trong một hệ thống.
Mỗi khái niệm đều có tầm ảnh hưởng và ứng dụng riêng và không hề thiếu tầm quan trọng trong cuộc sống hàng ngày.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;sự-đồng-bộ-trong-hệ-thống-nhân-quả&quot;&gt;Sự đồng bộ trong hệ thống nhân quả&lt;/h1&gt;

&lt;p&gt;Mới sáng nay tôi đọc lại 1 bài báo từ năm 2019 của &lt;a href=&quot;https://www.baokhanhhoa.vn/xa-hoi/moitruong-dothi/201911/tai-che-phan-loai-rac-thai-nhua-con-nhieu-kho-khan-8139146/&quot;&gt;Báo Khánh Hòa Điện Tử&lt;/a&gt; về tình trạng tái xử lý rác thải nhựa ở Việt Nam nói chung và Khánh Hòa nói riêng.
Nhìn chung, tôi có 1 cái nhìn khá thông cảm về vấn đề rác thải tại Việt Nam, đặc biệt là rác thải nhựa, nếu bạn biết rằng để 1 miếng rác nhựa nhỏ bé phân hủy trong tự nhiên cũng mất tới hơn 50 năm (nguồn: [1]).
Vì vậy, việc xử lý triệt để những loại rác thải “khó tiêu” như nhựa và linh kiện phần mềm điện tử, đòi hỏi phải làm có quy trình quy chuẩn cẩn thận.
Bước đầu tiên trong một quy trình xử lý rác thải triệt để là &lt;strong&gt;phân loại rác ngay từ nguồn&lt;/strong&gt;.
Ở các nước tiên tiến như Nhật hay Âu Mỹ, chính quyền đã áp dụng những quy trình phân loại rác ngay từ hộ gia đình và ăn sâu vào ý thức của người dân.
Và để thói quen phân loại từ nguồn đó có mục đích: khi đưa ra bãi rác, sẽ có những quy trình xử lý tái chế khác nhau với rác khác loại.
Tuy nhiên, khi đem về VN thì cái quy trình từ nguồn tới xử lý tái chế ấy, lại chỉ áp dụng được 1 nửa và về sau nhân dân chán nản cũng từ bỏ thói quen đó.
Lý do thì như sau:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Công tác tái chế khó khăn một phần do đặc điểm của rác thải Việt Nam là chưa được phân loại từ nguồn. Tuy nhiên, việc phân loại rác hiện nay cũng gặp nhiều khó khăn. 
… trong 2 năm 2009 - 2010, Sở TN-MT đã triển khai dự án phân loại rác thải từ nguồn, thí điểm tại 2 địa phương ở Cam Ranh, trong đó có Cam Lộc.
Dự án kết thúc, người dân thực hiện đúng theo yêu cầu của mô hình, tách rác hữu cơ và vô cơ theo các bao đựng có màu sắc khác nhau.
Xe vận chuyển rác thải của Công ty Cổ phần Đô thị Cam Ranh vào lấy rác cũng có hộc riêng, đựng chất thải vô cơ riêng, hữu cơ riêng nhưng &lt;strong&gt;lại đem về xử lý chung&lt;/strong&gt;. 
Càng về sau, dự án mai một, người dân nhận thấy việc phân loại không còn ý nghĩa vì rác nào cũng đem về chôn lấp tại bãi xử lý nên không mặn mà với việc phân loại nữa.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Như vậy là việc phân loại chả có ý nghĩa gì vì nếu đến lúc xử lý không quan tâm tới loại thì còn phân loại làm gì?&lt;/strong&gt;
Và thế là khâu phân loại chỉ được áp dụng ở nguồn mà chẳng đem lại tác dụng gì vì khi đến bãi rác, nhãn phân loại không được dùng!
Mình có thể đem nhái lại quy trình của người ta, nhưng lại chỉ áp dụng 1 nửa, còn nửa kia thì bỏ đi, dẫn đến thiếu đồng bộ trong quy trình.
Nhái nhưng lại nhái nửa vời!
Đây chính là sự thiếu đồng bộ &lt;strong&gt;nhân quả&lt;/strong&gt;: phải dùng tới loại khi xử lý thì yêu cầu phân loại mới có động lực.
&lt;strong&gt;Nếu không việc phân loại chỉ là một hàm thừa thãi được định nghĩa trong hệ thống, bản thân xử lý thừa thãi ấy cũng thành rác rưởi&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sự-đa-dạng-trong-chi-tiết-và-chung-chung-2-mô-hình-dự-án-khác-nhau&quot;&gt;Sự đa dạng trong chi tiết và chung chung: 2 mô hình dự án khác nhau&lt;/h1&gt;
&lt;p&gt;Cách đây khá lâu, tôi có giới thiệu khá sâu về quy trình quản lý dự án [2].
Thực tế, nghiệp vụ dự án không thể lúc nào cũng đồng bộ như đòi hỏi của người dân Khánh Hòa trong bài toán trước.
Bạn hãy suy nghĩ hai kiểu dự án sau nhé:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dự án 1: làm một cánh cửa vào phòng họp&lt;/strong&gt;
Khi nghe đến yêu cầu của khách hàng như vậy, bạn thấy sao? Bạn có thể lên kế hoạch hành động chi tiết tỷ mỷ, break down thành task nhỏ trong vòng 5 phút? Chuyện đó quá hiển nhiên, &lt;strong&gt;vì ai cũng biết cánh cửa như thế nào, và dù có nhiều kiểu dáng, nhưng ai cũng biết là làm ra nó ra sao&lt;/strong&gt;.
Việc lên một cái breakdown cho một yêu cầu kiểu này có khi còn dễ hơn ăn kẹo và dự án làm cánh cửa cứ thế mà chạy.
Tuy nhiên, có một điểm chí tử trong kiểu hình dự án này: &lt;strong&gt;vì quá chi tiết nên rất khó thay đổi về sau (nếu thay đổi dù chỉ 1 tí cũng bỏ luôn đi làm lại cái mới tinh, sửa chữa có khi chả có tác dụng gì mà chỉ rách việc)&lt;/strong&gt; và vì vậy, kiểu dự án này bạn sẽ thấy nó xuất hiện nhiều trong những kiểu sản phẩm quá “hiển nhiên” (ví dụ như mấy cái form login của phần mềm).
Ví dụ về điểm chí tử cho dễ hình dung là một ngày kia, khách hàng yêu cầu tăng chiều cao của chiếc cửa lên gấp đôi: vậy là phải phá cả phòng họp đi để nâng chiều cao lên gấp đôi!
Quản lý tiến trình của dự án kiểu này cũng khá đơn giản: cứ theo trình tự làm maintenance, tuần tự như nước chảy về nguồn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dự án 2: làm một cánh cửa vô hình&lt;/strong&gt;
Bạn nghĩ sao về yêu cầu đến từ khách hàng này?
Bạn có thể lên kế hoạch break down cho nó được không?
Nếu bạn nghĩ là không, đây chính là lúc bạn từ bỏ cách suy nghĩ “cổ hủ” waterfall với WBS bắt buộc phải có.
Và bạn đến với cách suy nghĩ Agile!
Với kiểu hình yêu cầu như thế này, có những nguy cơ lớn sau:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Khách sẽ không có sự chắc chắn, mà bản thân họ cũng như bên phát triển sẽ có nhiều thay đổi.&lt;/strong&gt; đổi chính là tử địa nếu bạn là người cứ khăng khăng là phải làm WBS bằng mọi giá ngay từ đầu. Bạn phải hiểu là sẽ có những tình huống nhưu thế này: tuần này ông khách đi dự hội nghị A về, ông ấy thấy có tính năng X hay có thể tốt cho cánh cửa, ông ấy sẽ yêu cầu làm.
  Nhưng tuần sau, ông ấy đi dự triển lãm B về, ông ấy lại thấy để thực hiện việc vô hình phải có tính năng Y, ông ấy lại xóa đi tính năng X hoặc hạ độ ưu tiên của X xuống.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Ảnh hưởng bởi tốc độ thay đổi chóng mặt của công nghệ mới&lt;/strong&gt;.
  Bạn mà cứ khăng khăng là tôi phải làm WBS và tôi sẽ ép khách làm theo WBS thì sẽ không bao giờ làm được cánh cửa vô hình, vì những dự án kiểu này là những dự án cần tiếp thu công nghệ mới vốn thay đổi hàng ngày.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bạn mà cứ kiểu đòi đồng bộ theo kiểu ép dự án 2 phải chạy theo cách của dự án 1 là sẽ dẫn đến hoàn cảnh là dự án 2 không thể thực hiện thay đổi theo yêu cầu của khách vì cách làm của dự án 1 là không welcome changes.&lt;/p&gt;

&lt;p&gt;Ở vai trò người quản lý công ty, đương nhiên nếu tất cả các dự án đều cùng 1 kiểu và cứ thế áp dụng cung cách quản lý đồng bộ thì quá tuyệt vời và tiết kiệm công sức.
Tuy nhiên, thực tế thì bao giờ cũng là dự án 1 chạy theo kiểu WBS và không chào mừng sự thay đổi, còn dự án 2 thì bản chất lại luôn luôn thay đổi và khách dự án 2 thì luôn muốn thử nghiệm các tính năng mới.
Vì vậy mất công sức để quản lý tốt nhiều hình thái dự án trong cùng 1 tổ chức là chuyện bình thường, thậm chỉ kỹ năng quản lý sự đa dạng ấy là cần thiết.
Tất nhiên, là cần thời gian và cứng.&lt;/p&gt;

&lt;h2 id=&quot;tâm-thế-của-người-quản-lý-dự-án&quot;&gt;Tâm thế của người quản lý dự án&lt;/h2&gt;

&lt;p&gt;Thực ra thì chúng ta có thể thấy sự khác nhau trong tâm thế của người quản lý mỗi loại dự án.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tâm thế của quản lý dự án 1&lt;/strong&gt; sẽ luôn đòi hỏi việc theo dõi và đảm bảo quy trình đã định ra chạy đúng.
Quản lý dự án 1 cũng sẽ là người không welcome thay đổi, vì thay đổi luôn là hiểm nguy mà nếu cứ chạy theo đám đông là dẫn đến trễ kế hoạch, sai spec, …
Nói chung dự án 1 cần quản lý cực kỳ bảo thủ và cứng, sẵn sàng đấm đá tay đôi với thay đổi.
Phải là người kỷ luật, không chào đón và chấp nhận cái mới, cái thay đổi cũng ok.
Luôn cảnh giác cao độ, thiết lập các form, các quy trình để đảm bảo bên dưới không có gì chạy sai dự định.
Gặp cái mới cái thay đổi, nhìn chúng như kẻ thù và “táng” luôn là chuyện bình thường với kiểu quản lý này.
Vì nếu không như thế là … vỡ trận!
Quản lý dự án 1 như các bạn thấy sẽ đòi hỏi &lt;strong&gt;kinh nghiệm thực chiến&lt;/strong&gt; đặc biệt là kinh nghiệm &lt;strong&gt;áp đặt, quản lý theo phong cách kỷ luật sắt&lt;/strong&gt;.
WBS anh đã viết ra rồi mà các chú làm sai dù chỉ 1 ly là ra tòa án binh luôn!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tâm thế của quản lý dự án 2&lt;/strong&gt; sẽ phải là &lt;strong&gt;người cởi mở, nhẹ nhàng, chấp nhận thay đổi, chấp nhận cái mới&lt;/strong&gt;.
Quản lý dự án 2 sẽ hay gặp những tình huống thay đổi chóng mặt, vì vậy cũng cần là người có hiểu biết và nắm bắt thay đổi nhanh.
Gì chứ ít cập nhật công nghệ mới thì khó mà quản lý dự án 2 vì khách tự nhiên đòi hỏi implement tính năng mà ông ấy vừa đi hội nghị A về mà lại trả lời “em dốt, em không biết” thì có mà … giải tán!
Luôn luôn phải cởi mở, sẵn sàng làm, sẵn sàng trao đổi để tìm ra giải pháp mới.
&lt;strong&gt;Kinh nghiệm không cần&lt;/strong&gt;, vì công nghệ toàn cái mới chả ai biết ở đâu ra (thực ra là khách đi đây đi đó xem rồi thu lượm về cũng nhiều).
Người quản lý dự án 2 nên là &lt;strong&gt;người mềm mỏng, dĩ hòa vi quý&lt;/strong&gt;, với cung cách quản lý tạo không gian làm việc thoải mái để anh em thỏa sức sáng tạo.&lt;/p&gt;
&lt;h1 id=&quot;tài-liệu-tham-khảo&quot;&gt;Tài liệu tham khảo&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;ilyas2018plastic&quot;&gt;Ilyas, M., Ahmad, W., Khan, H., Yousaf, S., Khan, K., &amp;amp; Nazir, S. (2018). Plastic waste as a significant threat to environment–a systematic literature review. &lt;i&gt;Reviews on Environmental Health&lt;/i&gt;, &lt;i&gt;33&lt;/i&gt;(4), 383–406.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;meredith2017project&quot;&gt;Meredith, J. R., Shafer, S. M., &amp;amp; Mantel Jr, S. J. (2017). &lt;i&gt;Project management: a strategic managerial approach&lt;/i&gt;. John Wiley &amp;amp; Sons.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="non-english" /><category term="se" /><category term="programming" /><category term="software architecture" /><summary type="html">Nguồn: Báo Khánh Hòa Điện Tử Đồng bộ (tiếng Anh: synchronized) thể hiện sự đồng thuận, thống nhất về trạng thái giữa một hay nhiều thành phần của hệ thống. Trong khi sự đa dạng (tiếng Anh: diversity) thể hiện sự phong phú, đa hình thái, trạng thái cùng tồn tại trong một hệ thống. Mỗi khái niệm đều có tầm ảnh hưởng và ứng dụng riêng và không hề thiếu tầm quan trọng trong cuộc sống hàng ngày.</summary></entry><entry><title type="html">Idle Time Pricing Models in the Cloud</title><link href="https://www.caineng.in/ai/sre/2021/08/19/idle-time-pricing-models.html" rel="alternate" type="text/html" title="Idle Time Pricing Models in the Cloud" /><published>2021-08-19T00:00:00+07:00</published><updated>2021-08-19T00:00:00+07:00</updated><id>https://www.caineng.in/ai/sre/2021/08/19/idle-time-pricing-models</id><content type="html" xml:base="https://www.caineng.in/ai/sre/2021/08/19/idle-time-pricing-models.html">&lt;p&gt;&lt;img src=&quot;/assets/img/batch.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch processing (JP: バッチ処理, VI: Xu Lý Lô)&lt;/strong&gt; is the processing of jobs that can run without end-user interaction or can be scheduled to run as resources permit.
A program that reads a large file and generates a report, for example, is considered to be a batch job.
Services such as Azure Batch [1] and AWS Batch [2, 3] support runs of batch jobs with VMs/EC2 instances and serverless container backend.
However, running batch jobs requires VMs and instances to run continuously in production with almost &lt;strong&gt;zero downtime&lt;/strong&gt;.
It also means that there will be &lt;strong&gt;idle time&lt;/strong&gt; to keep batch jobs running in the background.
We review and estimate the idle time pricing of several cloud-based batch processing services. 
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;batch-processing-and-idle-time&quot;&gt;Batch processing and idle time&lt;/h1&gt;
&lt;p&gt;With the advent of cloud computing with virtualization, more and more workloads have been offloaded from conventional private clouds to public clouds in recent years.
The greatest issue of these approaches is the &lt;strong&gt;pricing models&lt;/strong&gt;.
Virtual machines often use the pay-per-use model, which requires running the VMs continuously, and non-working hours are begin paid.
For example, AWS EC2 instances are billed for running durations on an hourly basis.
Because the distribution of coming requests is unknown or probabilistic, then the instances must be kept running without downtime.
This results in hours without requests are being paid with the same price as hours with requests (real working hours).
The issue is called &lt;strong&gt;idle time issue&lt;/strong&gt;, which is well-known in cloud computing [1-3].&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch jobs&lt;/strong&gt; are scheduled jobs with minimal user interactions.
It is possible to have some jobs in the systems which cannot be answered in real-time then users want to submit for processing in the background.
The submitted jobs are queued and scheduled to process later when the application does not require them to give results soon.
Scheduled jobs are popped from the queue and run automatically with interactions to computations resources such as VMs and databases.
Due to a large number of jobs, a Massive Parallel Processing (MPP) system can be used for batch jobs when the number of data is too big (1TB or more)!
Azure Batch [1] and AWS Batch [2] are fully managed cloud services for batch jobs which give highly scalable without extensive programming efforts.
Azure Batch supports Azure VMs while AWS Batch supports EC2 instances based Elastic Container Service (ECS), Fargate-based ECS, and Lambda.
Reducing &lt;strong&gt;idle time&lt;/strong&gt; while deploying to these services is a demand, and it requires careful designs.
For example, in [5], Qureshi described a design that reduces Azure Batch cost using dynamic allocation and relocation of resources with lookahead technique for deallocating nodes.
Their results showed that 30% of the total cost was reduced with the proposed techniques.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graphical Processing Unit (GPU)&lt;/strong&gt; has helped to accelerate the latest Artificial Intelligence workloads.
Many Deep Learning applications require GPUs or even thousands of GPUs for training and inference.
Building such a massive GPU system requires tedious setups, maintenance, and oversized budgets.
Many public clouds such as Azure and AWS have more flexible pricing models which bill for milliseconds.
Their flagship services are AWS Lambda and Azure Functions.
In AWS Lambda and Azure Functions, computations are billed for running time only, which is calculated from when the resources are loaded into function memory to when the computation is finished with results is returned to an integration service like AWS API Gateway.
However, &lt;strong&gt;Lambda and Functions do not support GPU!&lt;/strong&gt;
Hence, the normal uses of these serverless computing mechanisms are often API calls, i. e., calling to other APIs, not any massive computations.
Therefore, deploying GPU-required batch jobs to the cloud often use VM-based approaches.
In [4], Risco and Moltó designed a batch processing system using AWS Batch with GPU-enabled ECS.
They used 12 vGPUs of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g3s.xlarge&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To summary, batch processing in the cloud relies on the pricing models that have idle time if we do not keep the system busy 24 hours per day.
AWS Batch supports some serverless mechanisms like Lambda and Fargate-based ECS but only supports CPUs.
For the need of GPUs, one must switch to instance-based or VM-based approaches, which turns us back to the idle time problem indeed.
&lt;strong&gt;The choice of pricing models is whether billing for milliseconds or not?&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;cloud-based-batch-processing&quot;&gt;Cloud-based batch processing&lt;/h1&gt;

&lt;h2 id=&quot;aws-batch&quot;&gt;AWS Batch&lt;/h2&gt;

&lt;h3 id=&quot;a-mistake-in-scale-out-design&quot;&gt;A mistake in scale-out design&lt;/h3&gt;

&lt;p&gt;One of the most interesting examples of how the scale-out and scale-up of instances are done in AWS Batch was this &lt;a href=&quot;https://forums.aws.amazon.com/thread.jspa?messageID=809896&amp;amp;threadID=265573&amp;amp;tstart=0&quot;&gt;QA&lt;/a&gt;.
A user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulsa9983&lt;/code&gt; asked for their tough situation of managing EC2 instances in 2017 as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have low-traffic, but want to keep some spot CPU available for quick response.
We set min CPU to 2, which initially starts a reasonably small instance, e. g. an m4.large.
However, after some batch requests with varying CPU and memory requirements, the cluster has grown to an m4.16xlarge, and it stays there day in and day out.
This costs us plenty more than we anticipated with the min CPU=2 setting.&lt;/p&gt;

  &lt;p&gt;Is there any way to make it scale down, or is the only alternative to set min CPU=0?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question was actually somewhat practical: there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus&lt;/code&gt; parameter in the AWS Batch template [6], for which when the system goes into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISABLED&lt;/code&gt; mode, then idle instances will be scale down to keep only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus&lt;/code&gt; running.
Setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus&lt;/code&gt; lower will reduce idle cost but increase the time for starting up, loading, provisioning new vCPUs.
That’s why even though there is an option to scale down &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus=0&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ulsa9983&lt;/code&gt; wanted to find another solution.
Their service is &lt;strong&gt;low traffic, but (we) want to keep some spot CPU available for quick response&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting solution came from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jamie@AWS&lt;/code&gt; included the following script:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Alternatively, you could achieve your goal by &lt;strong&gt;creating two managed to compute environments&lt;/strong&gt; which are both associated with your job queue.
For the first compute environment (with the lowest integer value for order), set min/desired/max vCPUs=2, ensuring that it always has a single EC2 instance with 2vCPUs in it. 
The second computes environment could have min vCPUs=0 and max vCPUs set to whatever upper limit you like.
With this model, AWS Batch jobs requiring two or fewer vCPUs could be immediately scheduled to the always-on instance while additional capacity is scaled up/down as needed when you have a larger number of concurrent jobs to run.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actually, this answer always keeps an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m4.large&lt;/code&gt; instance to be run without being modified and having another group of resources that can be scaled up and down according to the situations.
Nevertheless, on the trade-off of response time and cost, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus=2&lt;/code&gt; was kept, but the type of the instance was preserved to reduce cost.&lt;/p&gt;

&lt;p&gt;To find more about the parameters of AWS Batch, one can consult with [6].
AWS Batch is a batch computing platform with stateful jobs, job queues, GPU jobs, …
Jobs are the unit of work invoked by AWS Batch.
Jobs can be invoked as containerized applications running on Amazon ECS container instances in an ECS cluster.&lt;/p&gt;

&lt;h3 id=&quot;scar&quot;&gt;SCAR&lt;/h3&gt;

&lt;p&gt;SCAR [4] is a serverless system for GPU-enabled computing.
They have their own Functional Definition Language (FDL) for serverless workflows.
Their work helps to design a batch system faster and easier.
One example can be found below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/grycap/scar/raw/master/examples/av-workflow/workflow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This system does object detection and speech transcription for automatic captioning.
 Some examplar results can be seen as follows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/grycap/scar/raw/master/examples/av-workflow/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above two images are from &lt;a href=&quot;https://github.com/grycap/scar/raw/master/examples/av-workflow&quot;&gt;https://github.com/grycap/scar/raw/master/examples/av-workflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;azure-batch&quot;&gt;Azure Batch&lt;/h2&gt;

&lt;p&gt;Azure Batch [1, 8] creates and manages a pool of compute nodes (virtual machines), installs the applications you want to run, and schedules jobs to run on the nodes.
There’s no cluster or job scheduler software to install, manage, or scale.
Instead, you use Batch APIs and tools, command-line scripts, or the Azure portal to configure, manage, and monitor your jobs.&lt;/p&gt;

&lt;p&gt;Some important practices for designing a good batch system with Azure Batch:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/batch/high-availability-disaster-recovery&quot;&gt;Always design your Batch application for high availability&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/batch/error-handling&quot;&gt;Always define error handling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/batch/security-best-practices&quot;&gt;Always care about security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/batch/best-practices&quot;&gt;Best practices&lt;/a&gt;, .etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;idle-time-pricing-options&quot;&gt;Idle time pricing options&lt;/h1&gt;

&lt;p&gt;We summarize the pricing options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, container-based serverless options like Fargate ECS are available but do not really support GPU use cases.&lt;/strong&gt;
This is somewhat a pity for deep learning deployments because these options provide millisecond-based billing.
We will wait for GPU supports in the near future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second, even with some parametric methodologies like setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus&lt;/code&gt; VMs/instance-based options still need to face the trade-off between idle time and cost&lt;/strong&gt;.
An example of the use case was given in which a mistake in scale-out design has led to a scale-up option that doubled the bills.
Typically, we will need to keep &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minVcpus&lt;/code&gt;$\geq 2$ to have quick responses, but we still do not have scaledown of GPU (no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minvGpus&lt;/code&gt; parameters in AWS Batch template).
Then the idle cost is mostly unavoidable (SCAR [4] described their approach on scaling down with zero resources when no workload, then the startup time and loading time will increase in return, and they are idle costs).&lt;/p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Finally, we want to cut down our bills every month (but want to increase the income). :yum:
This article provides some guidance to help the readers to design their approaches for cloud-based batch processing systems.
Future works will direct to the practices of GPU-enabled serverless architecture with less idle time and high efficiency.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;soh2020overview&quot;&gt;Soh, J., Copeland, M., Puca, A., &amp;amp; Harris, M. (2020). Overview of Azure Platform as a Service. In &lt;i&gt;Microsoft Azure&lt;/i&gt; (pp. 43–55). Springer.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;witte2019event&quot;&gt;Witte, P. A., Louboutin, M., Modzelewski, H., Jones, C., Selvage, J., &amp;amp; Herrmann, F. J. (2019). Event-driven workflows for large-scale seismic imaging in the cloud. In &lt;i&gt;SEG Technical Program Expanded Abstracts 2019&lt;/i&gt; (pp. 3984–3988). Society of Exploration Geophysicists.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;balaji2018benchmarking&quot;&gt;Balaji, A., &amp;amp; Allen, A. (2018). Benchmarking automatic machine learning frameworks. &lt;i&gt;ArXiv Preprint ArXiv:1808.06492&lt;/i&gt;.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;risco2021gpu&quot;&gt;Risco, S., &amp;amp; Moltó, G. (2021). GPU-Enabled Serverless Workflows for Efficient Multimedia Processing. &lt;i&gt;Applied Sciences&lt;/i&gt;, &lt;i&gt;11&lt;/i&gt;(4), 1438.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;qureshi2019reduce&quot;&gt;Qureshi, A. N. (2019). Reduce Cost of Batch Processing Microsoft Azure Cloud. &lt;i&gt;JETIR-International Journal of Emerging Technologies and Innovative Research&lt;/i&gt;, 2349–5162.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;WhatIsAW85:online&quot;&gt;&lt;i&gt;What Is AWS Batch? - AWS Batch&lt;/i&gt;. https://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Computee29:online&quot;&gt;&lt;i&gt;Compute environment parameters - AWS Batch&lt;/i&gt;. https://docs.aws.amazon.com/batch/latest/userguide/compute_environment_parameters.html.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;BatchCom43:online&quot;&gt;&lt;i&gt;Batch - Compute job scheduling service | Microsoft Azure&lt;/i&gt;. https://azure.microsoft.com/en-us/services/batch/.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;</content><author><name>Tuan Nguyen-Anh</name></author><category term="ai" /><category term="sre" /><category term="mlops" /><category term="machine learning" /><category term="gpu" /><category term="serverless computing" /><category term="cloud computing" /><category term="idle time" /><category term="aws" /><category term="azure" /><category term="aws batch" /><category term="batch computing" /><category term="azure batch" /><summary type="html">Batch processing (JP: バッチ処理, VI: Xu Lý Lô) is the processing of jobs that can run without end-user interaction or can be scheduled to run as resources permit. A program that reads a large file and generates a report, for example, is considered to be a batch job. Services such as Azure Batch [1] and AWS Batch [2, 3] support runs of batch jobs with VMs/EC2 instances and serverless container backend. However, running batch jobs requires VMs and instances to run continuously in production with almost zero downtime. It also means that there will be idle time to keep batch jobs running in the background. We review and estimate the idle time pricing of several cloud-based batch processing services.</summary></entry></feed>